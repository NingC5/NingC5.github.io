<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/posts/%E8%8D%89%E7%A8%BF.html"/>
    <url>/posts/%E8%8D%89%E7%A8%BF.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">草稿</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">shaton</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-06-09 12:12:12</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">博客搭建与运维指南</span><br><span class="hljs-attr">category_bar:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">category_order:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol><li>后端云数据库</li></ol><p>MongoDB Atlas 是云端的 MongoDB 数据库平台。申请 MongoDB Atlas 账号，创建 MongoDB 数据库，以存储 Twikoo 的评论信息。Twikoo 前端应用通过 MongoDB 连接字符串连接到该数据库。</p><ol start="2"><li><p>前端云应用，并连接数据库</p></li><li><p><strong>申请并登录Netlify账号，创建一个Team</strong><br>作用：注册Netlify平台账号，用于托管和部署你的静态网站或前端应用。建立团队（Team）便于协作和管理多个项目。</p></li><li><p><strong>打开twikoojs&#x2F;twikoo-netlify仓库，点击fork将仓库fork到自己的账号下</strong><br>作用：复制一份Twikoo的部署模板到你的GitHub账号，方便你进行个性化配置和部署。</p></li><li><p><strong>回到Netlify，点击Add new site - Import an existing project</strong><br>作用：开始在Netlify上部署你的项目，选择已存在的Git仓库作为源。</p></li><li><p><strong>点击Deploy with GitHub，授权后选择刚刚fork的twikoo-netlify项目</strong><br>作用：将你的仓库与Netlify连接，启动自动化部署流程。</p></li><li><p><strong>点击Add environment variables - New variable，设置MONGODB_URI，部署</strong><br>作用：配置环境变量，将你的MongoDB连接字符串传递给部署的应用，使其能连接到数据库。</p></li><li><p><strong>部署完成后，设置自定义域名（可选）</strong><br>作用：为你的站点配置更易记、更专业的地址（如 <code>https://yourname.netlify.app</code>），提升品牌形象。</p></li><li><p><strong>进入Site overview，点击链接验证环境配置是否正确</strong><br>作用：确认部署成功且环境配置正确，确保云函数正常运行。</p></li><li><p><strong>云函数地址（含 <code>https://</code> 和 <code>/functions/twikoo</code> 后缀）即为你的环境ID</strong><br>作用：获得用于后续API调用或集成的云函数入口地址，便于后续开发或配置。</p></li><li><p>Twikoo 云应用，并连接云数据库</p></li></ol><p>Netlify 部署 Twikoo，使得 Twikoo 的函数逻辑（评论的存储、读取、管理等后端逻辑）交由 Netlify 的云函数（Serverless Functions）实现。云函数作为后端 API，处理评论的存储和读取请求。</p><ol start="3"><li><p>前端调用云应用提供的 API</p></li><li><p>Netlify 部署 Twikoo，并连接 MongoDB Atlas 数据库。</p></li></ol><p>简单地说，就是 Twikoo APP 上线了。页面发起评论操作请求时，云函数（Serverless Functions）处理评论请求，与 MongoDB Atlas 数据库交互。</p><ol start="3"><li><p>云函数地址设置到前端</p></li><li><p>云函数部署的版本要和前端版本一致。</p></li></ol><p>Fluid 主题使用 1.6.8 的 twikoo.all.min.js（前端），官网最新才 1.6.44（云函数部署）。</p><p>我个人使用 <code>https://cdn.jsdelivr.net/npm/twikoo@1.6.44/dist/twikoo.min.js</code>（全球 CDN）。</p><p>修改 Fluid 主题该 JS 的前缀和后缀：<br>前缀在主题配置文件底部，修改为 <code>twikoo: https://cdn.jsdelivr.net/npm/twikoo@1.6.44/dist/</code>，<br>后缀在 <code>layout\_partials\comments\twikoo.ejs</code> 第五行，<code>twikoo.all.min.js</code> 修改为 <code>twikoo.min.js</code>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>评论系统</title>
    <link href="/posts/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html"/>
    <url>/posts/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html</url>
    
    <content type="html"><![CDATA[<h1 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h1><p>评论系统介绍见以下连接：</p><blockquote><p><a href="https://shuiba.co/comment-systems-recommendation">第三方评论系统推荐 - Shuibaco • 水八口</a></p><p><a href="https://shuiba.co/third-party-comments-2023">第三方评论之 2023 年版 - Shuibaco • 水八口</a></p><p><a href="https://shuiba.co/changed-comment-system-from-disqus-to-waline">更换评论系统——从 Disqus 到 Waline - Shuibaco • 水八口</a></p><p><a href="https://shuiba.co/back-to-farbox-comment-system-and-some-conclusions">换回原生评论系统，以及近期折腾总结 - Shuibaco • 水八口</a></p></blockquote><blockquote><p><a href="https://weiweitop.fun/2019/08/10/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AF%94%E8%BE%83%E5%8F%8A%E9%80%89%E6%8B%A9/">静态博客评论系统的比较及选择 | 闲云野鹤</a></p></blockquote><blockquote><p><a href="https://yunyoujun.cn/posts/third-party-comment-system">第三方评论系统之我见 - 云游君的小站</a></p></blockquote><blockquote><p>Disqus 免费版有广告，国内使用不友好，且会收集用户信息，不推荐。</p><p><a href="https://www.uniconsent.com/zh/blog/disqus-gdpr-consent">Disqus 因违反 GDPR 许可规则被罚款 250 万欧元</a></p><p>Cusdis：<a href="https://www.v2ex.com/t/773205">最近做了一个开源的 Disqus 替代品 - V2EX</a></p><p>链接原使用 Cusdis，现已迁移到 Artalk：<a href="https://frostming.com/2021/04-28/self-host-comment-system/">自建、免费、开源的评论系统解决方案 - Frost’s Blog</a></p></blockquote><p>个人倾向：</p><ul><li>免费无广告！</li><li>评论样式为扁平式，或者是有设计的嵌套。贴吧评论区偏向扁平式。嵌套使得对话结构清晰，但个人感觉看着累。个人倾向于扁平式，我的博文内容不足以支撑评论和激烈的讨论 QAQ</li><li>数据格式，好迁移！（不懂啊，随便用用吧！）</li><li>有免费或低费的部署方案！（即使评论系统官网没有，你也得创造条件有！）</li></ul><p>感兴趣的评论系统：</p><ol><li><a href="https://artalk.js.org/">Artalk | 由 Golang 驱动的自托管评论系统</a></li><li><a href="https://twikoo.js.org/">Twikoo | 一个简洁、安全、免费的静态网站评论系统</a></li><li><a href="https://cusdis.com/">Cusdis - Lightweight, privacy-first, open-source comment system</a></li><li><a href="https://remark42.com/">Remark42 – Privacy-focused lightweight commenting engine | Remark42</a></li><li><a href="https://isso-comments.de/">Isso – a commenting server similar to Disqus</a></li></ol><p>可能会参考的链接（推荐看官方文档）：</p><ul><li><a href="https://iceprosurface.com/%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%95%88%E7%8E%87%E3%80%81%E5%B7%A5%E5%85%B7/%E6%88%91%E5%9C%A8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%8D%E8%B4%B9%E7%9A%84-serverless-%E6%9C%8D%E5%8A%A1#vercel">我在用的一些免费的 serverless 服务</a></li><li><a href="https://www.pseudoyu.com/zh/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></li><li><a href="https://www.pseudoyu.com/zh/2024/07/22/free_commenting_system_using_remark42_and_flyio">从零开始搭建你的免费博客评论系统（Remark42 + fly.io）</a></li><li><a href="https://atpx.com/blog/hugo-isso-comment/">使用 Isso 为 Hugo&#x2F;Hexo 等静态网站添加评论功能 - atpX</a></li></ul><p>个人说明：</p><ul><li>serverless 和 vps 就不介绍了，Wiki 吧！总不能把个人计算机当服务器使用吧，一直开着岂不要榨干 QAQ</li><li>如果选择 artalk 评论系统，推荐使用 render 部署。虽然 railway 和 render 都支持 Docker 容器，但 railway 已取消 free plan。或者，薅点免费或低费 vps。</li><li>太懒了，Fluid 主题已集成 twikoo，那就暂时使用它吧！官网部署方式介绍：<a href="https://twikoo.js.org/backend.html#%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2">云函数部署 | Twikoo 文档</a></li></ul><h1 id="Twikoo-评论系统"><a href="#Twikoo-评论系统" class="headerlink" title="Twikoo 评论系统"></a>Twikoo 评论系统</h1><p><a href="https://twikoo.js.org/quick-start.html">快速上手 | Twikoo 文档</a></p><p>按照官方文档快速上手吧！</p><p>个人是按官网教程做的：使用 MongoDB Atlas 云数据库，使用 Netlify 部署 twikoo 并连接该数据库。</p><hr><p>（或者，有时间，我再复述一遍官网流程？）</p><hr><p>【困惑】：MongoDB Atlas 云数据库怎么一激活就耗了 120 MB！还没使用云函数连接呢！免费额度才 500 MB！</p><h1 id="Twikoo-评论样式"><a href="#Twikoo-评论样式" class="headerlink" title="Twikoo 评论样式"></a>Twikoo 评论样式</h1><p><a href="https://blog.liushen.fun/posts/73765344/">twikoo 仿段落评论，实现快速评论功能 | LiuShen’s Blog</a></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>【Cloudflare worker 部署 twikoo】<a href="https://blog.wuzm219.cn/2024/12/hexo-add-twikoo/#%E9%83%A8%E7%BD%B2Twikoo">Hexo 博客系列（二） 为你的博客添加评论系统 | 一梦一孤舟</a></p><p><a href="https://thirdshire.com/twikoo-tutorial/">在静态博客里添加Twikoo评论系统，并配置邮箱和TG通知</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HexoとFluid草船借箭</title>
    <link href="/posts/Hexo%E3%81%A8Fluid%E8%8D%89%E8%88%B9%E5%80%9F%E7%AE%AD.html"/>
    <url>/posts/Hexo%E3%81%A8Fluid%E8%8D%89%E8%88%B9%E5%80%9F%E7%AE%AD.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其他功能模块 | 插件的使用，见链接：</p><ol><li><a href="https://hexo.fluid-dev.com/docs/icon/">图标 | Hexo Fluid 用户手册</a></li><li><a href="https://hexo.fluid-dev.com/docs/advance/#hexo-%E6%8F%92%E4%BB%B6">Hexo 插件 | Hexo Fluid 用户手册</a></li></ol><h1 id="minifier-压缩本地文件"><a href="#minifier-压缩本地文件" class="headerlink" title="minifier 压缩本地文件"></a>minifier 压缩本地文件</h1><p>官网：<a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a></p><blockquote><p><a href="https://dkrain.com/posts/hexo%E7%AB%99%E7%82%B9%E4%BC%98%E5%8C%96-%E5%8E%8B%E7%BC%A9%E7%AB%99%E7%82%B9%E5%86%85%E5%AE%B9%E4%BD%93%E7%A7%AF/">Hexo站点优化-压缩站点内容体积 - 暗雨冥的花田</a></p></blockquote><p>执行 generate | server 命令时都会压缩。本地图片压缩超慢（n mins）！也不适合本地测试！平时就别开吧！</p><blockquote><p>Tip：可能会遇到依赖项（很多）问题！可以删除 node_modules 目录，<code>npm install</code> 重新下载。</p></blockquote><h1 id="encrypt-博客加密"><a href="#encrypt-博客加密" class="headerlink" title="encrypt 博客加密"></a>encrypt 博客加密</h1><p>官网：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a></p><blockquote><p><a href="https://ednovas.xyz/2021/05/03/hexoencrypt/">Hexo 博客加密插件 | EdNovas 的小站</a></p></blockquote><p>Fluid 主题已经适配 encrypt 插件，直接安装并使用即可。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><blockquote><p><a href="https://www.cnblogs.com/frank-link/p/14838815.html">Webpack优化前端性能 - Frank-Link - 博客园</a></p><p><a href="https://github.com/matthiasmullie/minify">https://github.com/matthiasmullie/minify</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网站防护：Cloudflare</title>
    <link href="/posts/%E7%BD%91%E7%AB%99%E9%98%B2%E6%8A%A4%EF%BC%9ACloudflare.html"/>
    <url>/posts/%E7%BD%91%E7%AB%99%E9%98%B2%E6%8A%A4%EF%BC%9ACloudflare.html</url>
    
    <content type="html"><![CDATA[<p>Cloudflare 作为反代理服务器能够增强网站安全性，如果你使用 Cloudflare 代理你的网站。</p><blockquote><p>Tip：在 Cloudflare 上添加 DNS 记录时勾选小黄云，就是使用 Cloudflare 代理你的网站。如果你不想更改主域名的 NS 为 Cloudflare，那就只能在 Cloudflare 上牺牲备用域名，然后主域名 CNAME 副域名。</p></blockquote><blockquote><p>代理服务器是请求发起方与目标资源之间的中介。正向与反向只是概念上的差异——架设者与架设目的。正向代理服务器着重于监管（保护|控制）前者，由监管者架设；反向代理服务器聚焦于保护后者所在的 Web 服务器，由站主架设。</p><ol><li>随便看看：<a href="https://zhuanlan.zhihu.com/p/163948996">一文帮你梳理清楚「正向代理和反向代理的区别与联系」 - 知乎</a></li><li>比上个链接详细点：<a href="https://www.cnblogs.com/wzh2010/p/18031168">图文总结：正向代理与反向代理 - Hello-Brand - 博客园</a></li><li>直接 WIKI 吧：<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理 - 维基百科，自由的百科全书</a></li></ol></blockquote><p>请参考以下链接：</p><ol><li><a href="https://www.chia1104.dev/posts/website-attack-cloudflare-protection">我的網站被攻擊了，該怎麼透過 Cloudflare 來保護網站 | Chia1104</a></li><li><a href="https://blog.dejavu.moe/posts/cloudflare-waf-set-up-guide/">Cloudflare WAF 防护策略简易指南 · Dejavu’s Blog</a></li><li>Cloudflare 官方文档，设置界面也有部分参数说明。</li></ol><blockquote><p><a href="https://jamesqi.com/%E5%8D%9A%E5%AE%A2/Cloudflare%E7%9A%84%E6%B5%81%E9%87%8F%E9%A1%BA%E5%BA%8F">Cloudflare的流量顺序 | 祁劲松的博客👨‍💻</a></p></blockquote><p>知道 Cloudflare 在 proxy 流量时的顺序后，就按照个人需求搜索文章进行设置吧！</p><h1 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h1><p>……</p><h1 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h1><p>……</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://ping0.cc/">高精度IP地址归属地查询-IP风控值查询-原生IP查询-IP类型查询-家庭宽带IP查询-全球小鸡监控平台</a></p><p><a href="https://iplark.com/">IPLark - IP地址信息查询</a></p><blockquote><p><a href="https://medium.com/chouhsiang/cloudflare-30-days/home">系列文章：30 天入門 Cloudflare</a></p></blockquote><blockquote><p><a href="https://im88.tw/50261/cloudflare-bot-mode.html">Cloudflare 機器人對抗模式 預防網站被爬蟲佔據所有資源 - 小博數位生活</a></p><p><a href="https://im88.tw/50266/cloudways-antibot.html">如何防止惡意機器人導致 Cloudways 主機當機？小博的經驗分享 - 小博數位生活</a></p></blockquote><blockquote><p>【添加白名单啊！】<a href="https://carlos.mynet.tw/%E9%97%9C%E9%96%89Cloudflare%E7%9A%84%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%B0%8D%E6%8A%97%E6%A8%A1%E5%BC%8F/">關閉Cloudflare的機器人對抗模式 | Carlos Life Book</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/kjcy8/articles/17034342.html">Cloudflare 防 CC 攻击设置 - kjcy8 - 博客园</a></p></blockquote><blockquote><p><a href="https://www.sakamoto.blog/cloudflare-setup-ddos/">Cloudflare 設定防禦 DDoS 方法 – Sakamoto.blog – 探究科技未知領域</a></p></blockquote><blockquote><p><a href="https://cloudflare.zendesk.com/hc/en-us/categories/200276257">Page Rules – Cloudflare Help Center</a></p><p><a href="https://justyy.com/archives/3393">CloudFlare页面规则终级使用指南 | 小赖子的英国生活和资讯</a></p><p><a href="https://hostloc.com/thread-619429-1-1.html">已解决：CloudFlare 的页面规则 Page Rules 规则顺序-美国VPS综合讨论-全球主机交流论坛 - Powered by Discuz!</a></p></blockquote><blockquote><p><a href="https://jamesqi.com/comment/2839#comment-2839">关于Cloudflare的2a06:98c0:3600::103这个IPv6地址 | 祁劲松的博客👨‍💻</a></p><p><a href="https://bbs.itzmx.com/thread-100054-1-1.html">Cloudflare cf使用workers搭建一个简单的免费页面反代系统，不符合HTTP协议标准规范但是能凑合用，腾讯云函数已经收费 - 各类教程 - ZMX - IT技术交流论坛 - 无限Perfect，追求梦想 - itzmx.com</a></p></blockquote><blockquote><p><a href="https://tech.imydl.com/ty/1082.html">分享一个Typecho博客系统专用的CloudFlare缓存规则，优化加速一下下！ - 明月的运维学习笔记Blog</a></p><p><a href="https://tech.imydl.com/ty/1107.html">自己写了个Typecho博客自动清理CloudFlare缓存插件 - 明月的运维学习笔记Blog</a></p></blockquote><p>……</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进度说明</title>
    <link href="/posts/%E8%BF%9B%E5%BA%A6%E8%AF%B4%E6%98%8E.html"/>
    <url>/posts/%E8%BF%9B%E5%BA%A6%E8%AF%B4%E6%98%8E.html</url>
    
    <content type="html"><![CDATA[<p>博客进度：</p><ol><li>Hexo&amp;GitHubPages 搭建静态博客</li><li>使用 Fluid 主题，并进行一定的美化</li><li>GitHubPages 自定义域名</li><li>集成音乐播放器 APlayer</li><li>Cloudflare 防护网站（point）</li><li>在使用 Fluid 主题的前提下，实现丐版 PJAX</li></ol><hr><p>《博客搭建与运维指南》还有很多 todo，但是 no time！操作比较快，但写出来比较麻烦。（直接给个官方文档链接得了！自己去看吧！）</p><ol><li>内容不连贯。以第一篇“个人博客”为例，在该篇的域名和 IP 部分，只是死板地列出两者的定义。应该先介绍主机——连入因特网（通常泛称为互联网）的设备都称为主机 …balabala…</li><li>内容布局不合理…</li><li>内容详略不得当…</li></ol><p>不会以为我要改吧！no time！no way！</p><hr><p>海星是一个美丽的全海星球。</p><p>平台在某处扎了根，依附于平台的博客迁土填海，使得平台发展成中心化聚集地。作为中心化聚集地附属点的博客通过其广泛地关联。</p><p>私人博客是荒海中一个个孤岛，作为无中心化的离散点可以通过评论、友链等方式单一地连接。</p><p>（P.S.：可能会加个评论区？方便交流？）</p><hr><p>虽然 Fluid 主题不支持 PJAX，但是博客已用上丐版 PJAX——刷新页非文章页，首次请求文章页时，采用完全刷新；其余采用 PJAX。丐版仅是因为样式问题（<code>github-markdown.min.css</code> 之流）无法解决，只好折中。有人懂 Fluid 主题样式吗？</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>音乐播放器APlayer</title>
    <link href="/posts/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8APlayer.html"/>
    <url>/posts/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8APlayer.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo 注入静态代码片段的方式不再赘述，请参考前文——《Fluid主题の博客美化》。</p><p>APlayer 链接：</p><ol><li><a href="https://github.com/DIYgod/APlayer">GitHub - DIYgod&#x2F;APlayer: :lollipop: Wow, such a beautiful HTML5 music player</a></li><li><a href="https://aplayer.js.org/#/zh-Hans/">首页 - APlayer</a></li></ol><p>PJAX 链接：<a href="https://github.com/defunkt/jquery-pjax">GitHub - defunkt&#x2F;jquery-pjax：pushState + ajax &#x3D; pjax</a></p><p>APlayer 重构（感兴趣）：</p><ol><li><a href="https://segmentfault.com/a/1190000010324395">javascript - 用 TS + Vue 重写 APlayer HTML5 音乐播放器 - 个人文章 - SegmentFault 思否</a></li><li><a href="https://github.com/SevenOutman/vue-aplayer">GitHub - SevenOutman&#x2F;vue-aplayer: :cake: Easy-to-use music player for Vue 2.x</a></li></ol><p>【注】：笔者使用 APlayer，而未使用 MetingJS。</p><p>【注】：”完全刷新不影响音乐播放进度“，给出的参考链接在使用 MetingJS 的基础上实现该目的。</p><p>【注】：如果主题支持 PJAX，推荐使用该技术保持音乐播放进度。Fluid 主题不支持 PJAX，需要一定的设置才能使用它。（easy! easy? 已用上丐版 PJAX！）</p><h1 id="添加音乐播放器-APlayer"><a href="#添加音乐播放器-APlayer" class="headerlink" title="添加音乐播放器 APlayer"></a>添加音乐播放器 APlayer</h1><p>官网入门案例：</p><p><img src="%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8APlayer/image-20250522052032259.png"></p><p><strong>your work in HTML：</strong></p><ol><li>引入 <code>APlayer.min.css</code></li><li>引入 <code>APlayer.min.js</code></li><li>注入 <code>&lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</code> </li><li>注入 <code>&lt;script&gt;</code>，编写 JS 程序使得该 div 块具备 APlayer 功能</li></ol><hr><p><strong>your work in Hexo&amp;Fluid：</strong></p><ol><li>引入 <code>APlayer</code> 库</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">custom_js:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//lib.baomitu.com/aplayer/1.10.1/APlayer.min.js</span><br><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//lib.baomitu.com/aplayer/1.10.1/APlayer.min.css</span><br></code></pre></td></tr></table></figure><ol start="2"><li>注入 <code>&lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</code>。编写 JS 操作该 div 块，使之具备 APlayer 功能。</li></ol><blockquote><p>Tip：本代码源于 Fluid 主题官方</p><p>个人观点（不保正）：</p><ol><li>aplayer.js 为 defer 脚本，异步加载，仅节省微薄的下载时间，因为自调用函数内部的 aplayer 函数（new APlayer）绑定 window.load 事件。</li><li>new APlayer 绑定 window.load 事件，可能是为了避免加载错误而统一代码风格。在执行自调用函数前，元素（id&#x3D;”aplayer”）已被构建为 Node，Aplayer.js 已被下载和执行完毕，可直接 new APlayer。</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// scripts\inject.js</span><br><br><span class="hljs-comment">// 注入代表APlayer音乐播放器的div块，以及使得该div块具备APlayer功能的&lt;script&gt;，添加到所有页面</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">  &lt;!-- defer，异步加载 --&gt;</span><br><span class="hljs-string">  &lt;script defer src=&quot;/js/aplayer.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// source\js\aplayer.js</span><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> oldLoadAp = <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>;<br>  <span class="hljs-comment">// 绑定load事件，在页面所有资源（HTML、CSS、图片、脚本等）都加载完后执行</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    oldLoadAp &amp;&amp; <span class="hljs-title function_">oldLoadAp</span>();<br>      <br>    <span class="hljs-comment">// APlayer参数请参考官网！</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">APlayer</span>(&#123;<br>      <span class="hljs-attr">container</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;aplayer&#x27;</span>),<br>      <span class="hljs-attr">fixed</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 开启吸底模式</span><br>  <span class="hljs-comment">// mini: true,// 开启迷你模式</span><br>      <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">// 关闭音频自动播放</span><br>      <span class="hljs-attr">order</span>: <span class="hljs-string">&#x27;random&#x27;</span>,<br>      <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;#b7daff&#x27;</span>,<br>      <span class="hljs-attr">preload</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<span class="hljs-comment">// 不预加载</span><br>      <span class="hljs-attr">volume</span>: <span class="hljs-string">&#x27;0.1&#x27;</span>, <span class="hljs-comment">// 音量0.1</span><br>      <span class="hljs-attr">audio</span>: [<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Sometimes when it Rains&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;Wouter Harbers/Robert Cekov&#x27;</span>,<br>          <span class="hljs-comment">// 网易云音乐外链格式：https://music.163.com/song/media/outer/url?id=&lt;歌曲id&gt;.mp3</span><br>          <span class="hljs-comment">// 分享音乐的链接有该歌曲id</span><br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=1445599175.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Autumn Walk&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;Brad Jacobsen&#x27;</span>,<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=28661573.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Angels&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;Joshua Radin&#x27;</span>,<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=29950496.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Without You&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;X JAPAN&#x27;</span>,<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=37820373.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;夢のしずく&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;Takako Matsu&#x27;</span>,<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=22822226.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;current&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;KOKIA&#x27;</span>,<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=28285362.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;時計仕掛けのTikTok&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;KOKIA&#x27;</span>,<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=2133747616.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Melody&#x27;</span>,<br>          <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;KOKIA&#x27;</span>,<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://music.163.com/song/media/outer/url?id=27872014.mp3&#x27;</span>,<br>          <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;/image/post/girl.jpg&#x27;</span><br>        &#125;<br>      ]<br>    &#125;);<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="使用-MetingJS-以简化歌曲配置"><a href="#使用-MetingJS-以简化歌曲配置" class="headerlink" title="使用 MetingJS 以简化歌曲配置"></a>使用 MetingJS 以简化歌曲配置</h1><blockquote><p>你可能会参考的链接：</p><ol><li><a href="https://echeverra.cn/aplayer">如何在博客中添加Aplayer音乐播放器 - echeverra</a></li><li><a href="https://www.cnblogs.com/lwk9527/p/17425769.html">APlayer &amp; MetingJS 音乐播放器使用指南 - 流纹 - 博客园</a></li><li><a href="https://wangrunze.com/34.html">为网页添加音乐播放器：基于APlayer与Meting.js的完整指南-王润泽博客</a></li></ol></blockquote><p>【注】：笔者未使用 MetingJS，考虑到单标签限制歌曲唯一来源。</p><p>MetingJS 链接：<a href="https://github.com/metowolf/MetingJS">GitHub - metowolf&#x2F;MetingJS: :cake: A powerful plugin connect APlayer and Meting</a></p><p>需要说明的是，MetingJS 标签只能设置一种 type，而一个 MetingJS 标签代表一个 APlayer 实例，那么单标签就限制了歌曲来源。如果你使用歌单，即  <code>type=&quot;playlist&quot;</code>，那么欢迎使用 MetingJS。</p><hr><p><strong>your work in Hexo&amp;Fluid：</strong></p><ol><li>引入 <code>Meting.min.js</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">custom_js:</span><br>  <span class="hljs-comment"># 引入MetingJS库</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js</span><br></code></pre></td></tr></table></figure><ol start="2"><li>注入 <code>&lt;meting-js&gt;</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// scripts\inject.js</span><br><br><span class="hljs-comment">// 如果使用&lt;meting-js&gt;标签，删除前面设置的APlayer音乐播放器。</span><br><span class="hljs-comment">// MetingJS：网易云，歌单，歌单id，吸底模式，随机播放，不预加载，音量0.3，关闭歌词。</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">`</span><br><span class="hljs-string">&lt;meting-js </span><br><span class="hljs-string">  server=&quot;netease&quot; </span><br><span class="hljs-string">  type=&quot;playlist&quot; </span><br><span class="hljs-string">  id=&quot;9011426357&quot;  </span><br><span class="hljs-string">  fixed=&quot;true&quot;</span><br><span class="hljs-string">  order=&quot;random&quot; </span><br><span class="hljs-string">  preload=&quot;none&quot; </span><br><span class="hljs-string">  volume=&quot;0.3&quot;</span><br><span class="hljs-string">  lrc-type=&quot;0&quot;&gt;</span><br><span class="hljs-string">&lt;/meting-js&gt;</span><br><span class="hljs-string">`</span>);<br></code></pre></td></tr></table></figure><h1 id="完全刷新不影响音乐播放进度"><a href="#完全刷新不影响音乐播放进度" class="headerlink" title="完全刷新不影响音乐播放进度"></a>完全刷新不影响音乐播放进度</h1><p>有两种方式获取目标页面内容：</p><ol><li>完全刷新。不做处理，正常操作就是完全刷新。</li><li>局部刷新。采用 AJAX 技术；点击链接，发起 AJAX 请求，获取目标页面内容局部替换当前页面指定区域。</li></ol><hr><p>如果是完全刷新，音乐播放器会被重置，音乐播放进度消失。可以在刷新前“保存”状态数据， 刷新后“还原”状态数据，以此来保持音乐播放进度。</p><p>给出两个内容相同的参考链接，是在使用 MetingJS 的基础上实现的：</p><ul><li><a href="https://l3yx.github.io/2020/04/29/APlayer-%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E4%BF%9D%E6%8C%81%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E8%BF%9B%E5%BA%A6/">APlayer 跳转页面保持音乐播放进度 | l3yx’s blog</a></li><li><a href="https://yeelz.com/post/564.html">网站使用APlayer+MetingJS实现音乐播放 刷新页面保持音乐播放进度 - 野路子博客</a></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">//</span> <span class="hljs-string">scripts\inject.js</span><br><br><span class="hljs-string">//</span> <span class="hljs-string">Record</span> <span class="hljs-string">APlayer&#x27;s</span> <span class="hljs-string">status</span> <span class="hljs-string">data.</span><br><span class="hljs-string">hexo.extend.injector.register(&#x27;body_end&#x27;,</span> <span class="hljs-string">`</span><br>  <span class="hljs-string">&lt;script</span> <span class="hljs-string">src=&quot;/js/APlayerStatus.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`);</span><br></code></pre></td></tr></table></figure><hr><p>如果是局部刷新，可以使用 PJAX 局部刷新页面，不刷新音乐播放器部分，以此来保持音乐播放进度。</p><h1 id="APlayer-样式"><a href="#APlayer-样式" class="headerlink" title="APlayer 样式"></a>APlayer 样式</h1><p>可参考以下链接：</p><ol><li><a href="https://81.70.24.154/article/aplayer">Aplayer 音乐播放器美化配置 | Dale 的花园 ^_^</a></li><li><a href="https://l3yx.github.io/2020/04/29/APlayer-%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E4%BF%9D%E6%8C%81%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E8%BF%9B%E5%BA%A6/">APlayer 跳转页面保持音乐播放进度 | l3yx’s blog</a></li><li><a href="https://blog.saop.cc/p/8dc9/">Butterfly 主题 HTML5 音乐播放器 APlayer 美化调整 | 定の栈</a></li></ol><p>本想将 APlayer 模块设计成可移动的、特定形状的….. 太懒了，也就不改了。</p><p>如果使用 MetingJS，也可以参考：<a href="https://wangrunze.com/34.html">为网页添加音乐播放器：基于APlayer与Meting.js的完整指南-王润泽博客</a></p><h1 id="TODO（no-time-）"><a href="#TODO（no-time-）" class="headerlink" title="TODO（no time!）"></a>TODO（no time!）</h1><blockquote><p><a href="https://www.cnblogs.com/guangzan/p/14932931.html">MetingJS 是如何配合 Aplayer 加载歌单的 - guangzan - 博客园</a></p></blockquote><p>MetingJS 太过侵入 APlayer，关键的是——它未提供其他歌曲识别模式，还不够便利。</p><p>MetingJS 单标签限制歌曲唯一来源，该限制很容易解决。</p><ol><li>最简单的，<code>type=&quot;song&quot;</code>，设计分隔符隔断 songIds，读取时遍历为单 song 设置。</li><li>复杂一点，变更标签及数据行为。父标签为播放器通用设置，子标签分 type 设计。</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>APlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows用户组与权限</title>
    <link href="/posts/Windows%E7%94%A8%E6%88%B7%E7%BB%84%E4%B8%8E%E6%9D%83%E9%99%90.html"/>
    <url>/posts/Windows%E7%94%A8%E6%88%B7%E7%BB%84%E4%B8%8E%E6%9D%83%E9%99%90.html</url>
    
    <content type="html"><![CDATA[<p>在 Windows 操作系统中，用户组（组）具有预定义的权限和角色，主要用于管理和控制不同用户的权限。</p><p><strong>Windows 用户组（组）</strong></p><table><thead><tr><th align="left">组名称</th><th align="left">说明</th><th align="left">主要权限和特点</th></tr></thead><tbody><tr><td align="left"><strong>System（系统）账户</strong></td><td align="left">这是一个特殊的账户（不是用户组），由操作系统内部使用，运行系统服务，拥有最高权限。</td><td align="left">由操作系统内部管理，不是普通用户组成员。</td></tr><tr><td align="left"><strong>Administrators（管理员）</strong></td><td align="left">拥有最高权限的用户组，能够进行所有系统管理操作，包括安装软件、修改系统设置、创建和删除用户等。</td><td align="left">完全控制系统，几乎没有限制，是系统管理员的主要组。</td></tr><tr><td align="left"><strong>Authenticated Users（已验证用户）</strong></td><td align="left">所有经过验证登录的用户（包括普通用户和管理员）。</td><td align="left">具有登录权限，可以访问系统资源，权限视具体组而定。</td></tr><tr><td align="left"><strong>Users（用户）</strong></td><td align="left">普通用户组，成员具有基本使用权限，但不能进行系统级的更改。</td><td align="left">可以运行应用程序、访问自己的文件，但不能修改系统设置或安装软件。</td></tr><tr><td align="left"><strong>Guests（访客）</strong></td><td align="left">临时或有限权限的用户组，权限非常受限，主要用于临时访问。</td><td align="left">限制访问权限，不能安装软件或更改系统设置。</td></tr><tr><td align="left"><strong>Everyone（每个人）</strong></td><td align="left">所有试图访问计算机的用户（包括匿名访问）。</td><td align="left">包括所有用户（已登录或未登录），权限较广，但实际权限由共享和安全设置控制。</td></tr><tr><td align="left">……</td><td align="left">……</td><td align="left">……</td></tr></tbody></table><p>在域环境（比如公司网络，通过域控制器管理多个电脑和用户）中，Authenticated Users 比 Users 更广泛，包含所有验证过身份的用户（包括普通用户、管理员、甚至一些特殊用户）。只要他们成功登录到域中，就会成为这个组的成员。</p><p>在本地环境中，Users 和 Authenticated Users 的成员基本一致。普通用户同属于这两个组。</p><p><strong>在本地计算机上，以普通用户运行程序时，权限由 Users 和 Authenticated Users 共同决定。如果程序或文件夹需要更高的权限，可以修改文件&#x2F;文件夹的 Users&#x2F;Authenticated Users 权限（永久提升权限）；或者，“以管理员身份运行”程序（临时提升权限）。</strong></p>]]></content>
    
    
    <categories>
      
      <category>电脑</category>
      
      <category>Windows系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHubPages访问优化</title>
    <link href="/posts/GitHubPages%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96.html"/>
    <url>/posts/GitHubPages%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96.html</url>
    
    <content type="html"><![CDATA[<p>1111</p><p><a href="https://ping.chinaz.com/img.seaya.link">网站测速-站长工具</a></p><p><a href="https://www.v2ex.com/t/851983">有没有类似 coding 的服务。 - V2EX</a></p><h2 id="代理服务器与反向代理服务器"><a href="#代理服务器与反向代理服务器" class="headerlink" title="代理服务器与反向代理服务器"></a>代理服务器与反向代理服务器</h2><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>DNS（Domain Name System），进行域名解析。</p><p>【测试，比对】<a href="https://www.zhihu.com/question/435529831">(7 封私信 &#x2F; 31 条消息) 如何看待Cloudflare Pages？ - 知乎</a></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/382459372">TTL、Ping包最大字节数、网络时延、抖动、丢包率，看完瞬间变大神！ - 知乎</a></p><p><a href="https://www.aiboce.com/ask/137299.html">ping值多少才算正常？网络延迟标准解析 - 爱拨测</a></p><p><a href="https://zhuanlan.zhihu.com/p/1894447976841204096">实测！5个真正能用的IP查询网站，精准定位不忽悠 - 知乎</a></p><p><a href="https://www.itdog.cn/">ITDOG</a></p></blockquote><p><a href="https://github.com/orgs/community/discussions/23049">如何在自定义域名上启用 https 支持 · 社区 · 讨论 #23049</a></p><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><p><a href="https://www.rayks.com/article/cloudflarenewterms.html">Cloudflare新规：禁止代理服务和优选IP - 狸卡司 - Rayks Blog - Sueri_锐个人博客</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义Chrome浏览器的路径</title>
    <link href="/posts/%E8%87%AA%E5%AE%9A%E4%B9%89Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%B7%AF%E5%BE%84.html"/>
    <url>/posts/%E8%87%AA%E5%AE%9A%E4%B9%89Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%B7%AF%E5%BE%84.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.cnblogs.com/jxldjsn/p/15675058.html">Chrome浏览器自定义设置个人信息存储路径 - 旧巷里的旧少年 - 博客园</a></p><p><a href="https://www.iyio.net/2024/12/191707.html">Google Chrome 装到D盘及 Chrome 浏览器进阶设置 - 科学上网</a></p></blockquote><p>使用官方程序安装 Chrome 浏览器，该程序默认且固定的路径是 C 盘。</p><ol><li>可执行文件路径：<code>C:\Program Files\Google\Chrome\Application\chrome.exe</code></li><li>用户数据路径：<code>C:\Users\用户名\AppData\Local\Google\Chrome\User Data\</code></li><li>磁盘缓存路径：<code>C:\Users\用户名\AppData\Local\Google\Chrome\User Data\Default\Cache\</code></li><li>32 位 Chrome 浏览器和更新程序路径：<code>C:\Program Files (x86)\Google\</code></li></ol><p>因 C 盘容量不够，将 Chrome 浏览器安装到其他盘。（修改完后删除默认路径）</p><hr><p>【缺陷】：鼠标右键单击文件，打开方式，只能使用默认 Chrome 浏览器。除非你设置自定义 Chrome 浏览器为默认浏览器，鼠标左键双击文件。可能参考链接的软链接方式无此缺陷。</p><ol><li>下载 Google Chrome 离线安装包</li></ol><p>下载地址：<a href="https://github.com/Bush2021/chrome_installer">https://github.com/Bush2021/chrome_installer</a> </p><p>下载后使用 7z 双层解压，得到 chrome-bin 文件夹</p><ol start="2"><li>自定义 Chrome 浏览器的安装目录</li></ol><p>自选目录作为 Chrome 浏览器的安装目录，比如 <code>E:\APP\Chrome\</code> 目录。复制 chrome-bin 文件夹中的所有文件到 <code>E:\APP\Chrome\</code> 目录下。删除压缩包和 chrome-bin 文件夹。</p><ol start="3"><li>创建 Chrome 浏览器快捷方式</li></ol><p>在桌面右击【新建】→【快捷方式】→【浏览：chrome.exe】→【命名：Chrome】</p><ol start="4"><li>修改 Chrome 浏览器的用户数据目录和磁盘缓存目录（快捷方式）</li></ol><p>修改快捷方式只影响通过该特定快捷方式启动的 Chrome 实例。</p><p>右击【Chrome 浏览器快捷方式】 →【属性】→【快捷方式】→【目标】，修改目标值：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">E:\APP\Chrome\chrome.exe <span class="hljs-operator">-</span>-user-data-dir<span class="hljs-operator">=</span><span class="hljs-string">&quot;E:<span class="hljs-char escape_">\A</span>PP<span class="hljs-char escape_">\C</span>hrome<span class="hljs-char escape_">\U</span>ser Data&quot;</span> <span class="hljs-operator">-</span>-disk-cache-dir<span class="hljs-operator">=</span><span class="hljs-string">&quot;E:<span class="hljs-char escape_">\A</span>PP<span class="hljs-char escape_">\C</span>hrome<span class="hljs-char escape_">\U</span>ser Data<span class="hljs-char escape_">\D</span>efault<span class="hljs-char escape_">\C</span>ache&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>E:\APP\Chrome\chrome.exe</code> 是 chrome 程序路径</li><li><code>--user-data-dir</code> 参数配置数据目录（例如书签、历史记录、扩展程序设置等）</li><li><code>--disk-cache-dir</code> 参数配置磁盘缓存目录（数据目录包含此目录，可略）</li><li>如果路径或参数值包含空格，请用引号括起来，以免命令行解释器错误地分割路径或参数值。</li></ul><ol start="5"><li>修改 Chrome 浏览器的用户数据目录和磁盘缓存目录（注册表）</li></ol><p>修改注册表会影响到所有通过与 Chrome 关联的方式启动的 Chrome 实例。比如：通过开始菜单中的 Chrome 图标启动、通过其他应用程序内部的链接启动 Chrome 等。</p><p>【Windows+R】输入 regedit，打开注册表编辑器，<br>修改 <code>[HKEY_CLASSES_ROOT\ChromeHTML\shell\open\command]</code> 键值：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">E:\APP\Chrome\chrome.exe <span class="hljs-operator">-</span>-user-data-dir<span class="hljs-operator">=</span><span class="hljs-string">&quot;E:<span class="hljs-char escape_">\A</span>PP<span class="hljs-char escape_">\C</span>hrome<span class="hljs-char escape_">\U</span>ser Data&quot;</span> <span class="hljs-operator">-</span>-disk-cache-dir<span class="hljs-operator">=</span><span class="hljs-string">&quot;E:<span class="hljs-char escape_">\A</span>PP<span class="hljs-char escape_">\C</span>hrome<span class="hljs-char escape_">\U</span>ser Data<span class="hljs-char escape_">\D</span>efault<span class="hljs-char escape_">\C</span>ache&quot;</span> <span class="hljs-string">&quot;%1&quot;</span><br></code></pre></td></tr></table></figure><p>【注】：计算机可以设置默认浏览器。若【Ctrl + 鼠标左键】点击文本中的链接，计算机采用默认设置打开链接。</p><blockquote><p>你也可以修改以下键值：</p><ol><li>[HKEY_CLASSES_ROOT\ftp\shell\open\command]</li><li>[HKEY_CLASSES_ROOT\http\shell\open\command]</li><li>[HKEY_CLASSES_ROOT\https\shell\open\command]</li></ol><p>没必要，采用 Windows 的默认配置（IE 浏览器）即可。浏览器处理 http&#x2F;https 链接时依赖其自身处理逻辑。如果修改该键值为 Chrome 浏览器，edge 浏览器点击 http&#x2F;https 链接会跳转到 Chrome 浏览器。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>电脑</category>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装</tag>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub身份验证与Git连接GitHubPages仓库</title>
    <link href="/posts/GitHub%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8EGit%E8%BF%9E%E6%8E%A5GitHubPages%E4%BB%93%E5%BA%93.html"/>
    <url>/posts/GitHub%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8EGit%E8%BF%9E%E6%8E%A5GitHubPages%E4%BB%93%E5%BA%93.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-GitHub-Authentication"><a href="#1-GitHub-Authentication" class="headerlink" title="1. GitHub Authentication"></a>1. GitHub Authentication</h1><blockquote><p><a href="https://docs.github.com/zh/authentication">身份验证文档 - GitHub 文档</a></p></blockquote><p>GitHub 支持不同的身份验证方式，供用户远程连接。（认证）</p><ul><li>username &amp; password | passkey</li><li>personal access token（个人访问令牌）</li><li>SSH key</li></ul><p>SSH 协议（Secure Shell Protocol，安全外壳协议）可在不安全的网络上提供安全通道。推荐使用 SSH 连接到 GitHub，实现免密登录，且相对更安全。</p><h2 id="1-1-username-password"><a href="#1-1-username-password" class="headerlink" title="1.1 username &amp; password"></a>1.1 username &amp; password</h2><p>略。</p><h2 id="1-2-personal-access-token"><a href="#1-2-personal-access-token" class="headerlink" title="1.2 personal access token"></a>1.2 personal access token</h2><p><a href="https://zhuanlan.zhihu.com/p/401978754">2021.8.13起，Github要求使用基于令牌的身份验证 - 知乎</a></p><p>（按链接前半部分操作即可，token 权限设置为 repo。下方可略。）</p><p>Git 连接远程仓库，转为使用 token 进行认证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出当前仓库中已配置的远程仓库，并显示它们的 URL。</span><br>git remote -v<br><br><span class="hljs-comment"># 修改指定远程仓库的 URL，添加 token 信息。</span><br><span class="hljs-comment"># 例如：origin https://&lt;token&gt;@github.com/&lt;username&gt;/&lt;repo&gt;.git</span><br>git remote set-url &lt;remote_name&gt; &lt;new_url&gt;<br><br><span class="hljs-comment"># or</span><br><br><span class="hljs-comment"># 从当前仓库中删除指定的远程仓库。</span><br>git remote remove &lt;remote_name&gt;<br><span class="hljs-comment"># 添加一个新的远程仓库。指定一个远程仓库的名称和 URL，将其添加到当前仓库中。</span><br>git remote add &lt;remote_name&gt; &lt;remote_url&gt;<br></code></pre></td></tr></table></figure><h2 id="1-3-SSH-key"><a href="#1-3-SSH-key" class="headerlink" title="1.3 SSH key"></a>1.3 SSH key</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/Secure_Shell">Secure Shell - 维基百科，自由的百科全书</a></p><p><a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">Github配置ssh key的步骤（大白话+包含原理解释）-CSDN博客</a></p></blockquote><p>按 <a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh">通过 SSH 连接到 GitHub - GitHub 文档</a> 操作即可。</p><ol><li><strong>检查本地主机是否已有 SSH 密钥</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Git Bash 执行该命令，以查看是否存在现有的 SSH 密钥。</span><br><span class="hljs-built_in">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure><p><img src="GitHub%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8EGit%E8%BF%9E%E6%8E%A5GitHubPages%E4%BB%93%E5%BA%93/image-20250507224534623.png"></p><p>默认情况下，GitHub 支持的公钥的文件名有：<code>id_rsa.pub</code> ，<code>id_ecdsa.pub</code> ，<code>id_ed25519.pub</code> 。如果没有，则创建新的 SSH 密钥对。</p><ol start="2"><li><strong>生成新 SSH 密钥</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Git Bash 执行该命令，以生成新 SSH 密钥。将电子邮件替换为 GitHub 电子邮件地址。</span><br><span class="hljs-comment"># -t 选项指定要生成的密钥的类型（type）。rsa、ecdsa、ed25519。</span><br><span class="hljs-comment"># -C 选项用于为生成的密钥添加一个注释（comment）。</span><br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>该命令执行后，连按三次回车（跳过设置密钥文件路径、设置密钥密码、再次输入密钥密码），即可生成密钥对。</p><p>默认情况下，<code>ssh-keygen</code> 会在用户的主目录下的 <code>.ssh/</code> 目录中（<code>C:\Users\用户\.ssh\</code>）生成密钥对。默认的文件名取决于你选择的密钥类型：<code>id_type</code>（私钥）和 <code>id_type.pub</code>（公钥）。</p><p>如果需要管理多个密钥，可以添加 <code>-f</code> 选项来覆盖默认行为，指定生成的密钥文件的路径和文件名。</p><blockquote><p>Tip：建议将密钥保存在 <code>.ssh/</code> 目录中，确保其权限，以保护你的私钥。私钥文件通常应该只有所有者有读写权限（<code>chmod 600</code>）。</p></blockquote><ol start="3"><li><strong>新增 SSH 密钥到 GitHub 帐户</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Git Bash 执行该命令，以显示 SSH 公钥内容（或者使用文本编辑器打开公钥文件），将公钥复制到剪贴板。</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_ed25519.pub<br></code></pre></td></tr></table></figure><p>点击右上角个人资料照片 → Settings → SSH 和 GPG keys → New SSH key。</p><p><img src="GitHub%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8EGit%E8%BF%9E%E6%8E%A5GitHubPages%E4%BB%93%E5%BA%93/image-20250507232428459.png"></p><ol start="4"><li><strong>测试 SSH 连接</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Git Bash 执行该命令，用于测试本地 SSH 连接到 GitHub 是否成功。</span><br>ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果 SSH 连接成功，GitHub 会返回一个欢迎信息。</p><p><img src="GitHub%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8EGit%E8%BF%9E%E6%8E%A5GitHubPages%E4%BB%93%E5%BA%93/image-20250610073509386.png"></p><h1 id="2-Git-连接-GitHub-Pages-仓库"><a href="#2-Git-连接-GitHub-Pages-仓库" class="headerlink" title="2. Git 连接 GitHub Pages 仓库"></a>2. Git 连接 GitHub Pages 仓库</h1><p>之前，基于 hexo-deployer-git 部署本地静态博客到 GitHub Pages 时，Git 采用【HTTPS+密码】的方式连接 GitHub Pages 仓库。现在，连接方式可改为【HTTPS+token】或【SSH】，推荐【SSH】。</p><hr><p>【HTTPS+密码】</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><span class="hljs-comment"># 【HTTPS+密码】</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><hr><p>【HTTPS+token】</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://&lt;token&gt;@github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span> <span class="hljs-comment"># 【HTTPS+token】</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><hr><p>【SSH】</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><span class="hljs-comment"># 【SSH】，SSH见下图</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p><img src="GitHub%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8EGit%E8%BF%9E%E6%8E%A5GitHubPages%E4%BB%93%E5%BA%93/image-20250610073607974.png"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ol><li>SSH</li></ol><p><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/SSH.html">什么是SSH？SSH是如何工作的？ - 华为</a></p><p><a href="https://zhuanlan.zhihu.com/p/323322650">【科普】SSH都不懂，还搞什么网络 - 知乎</a></p><p><a href="https://blog.csdn.net/li528405176/article/details/82810342">SSH简介及两种远程登录的方法-CSDN博客</a></p><ol start="2"><li>加密算法</li></ol><p><a href="https://www.cnblogs.com/librarookie/p/15389876.html">RSA、DSA、ECDSA、EdDSA 和 Ed25519 的区别 - Librarookie - 博客园</a></p><p><a href="https://segmentfault.com/a/1190000039055271">奇妙的安全旅行之RSA算法 - 个人文章 - SegmentFault 思否</a></p><p><a href="https://www.cnblogs.com/MuXinu/p/17199443.html">非对称加密算法与数字签名 - MuXinu - 博客园</a></p><p><a href="https://www.cnblogs.com/bonelee/p/13035489.html">常用的数字签名算法包括：MD5withRSA／SHA1withRSA／SHA256withRSA／SHA1withDSA／SHA256withDSA／SHA512withDSA／ECDSA等 - bonelee - 博客园</a></p><p><a href="https://blog.csdn.net/junxuezheng/article/details/109478466">加密算法(DES,AES,RSA,ECC,MD5,SHA1)简介_des aes rsa-CSDN博客</a></p><ol start="3"><li>本机能通过 SSH 连接 GitHub 的原因——双方都集成 SSH 客户端。</li></ol><p><a href="https://www.cnblogs.com/sparkdev/p/10166061.html">Windows 支持 OpenSSH 了！ - sparkdev - 博客园</a></p><p>[<a href="https://www.itblogcn.com/article/2266.html">CMD] Windows SSH 连接服务器教程(系统自带方式)</a></p><p><a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">Github配置ssh key的步骤（大白话+包含原理解释）_github生成ssh key-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HexoとFluidの碎语（PJAX? Just Decide!）</title>
    <link href="/posts/Hexo%E3%81%A8Fluid%E3%81%AE%E7%A2%8E%E8%AF%AD.html"/>
    <url>/posts/Hexo%E3%81%A8Fluid%E3%81%AE%E7%A2%8E%E8%AF%AD.html</url>
    
    <content type="html"><![CDATA[<p>Hexo 成于简，败于简。</p><p>笔者很荣幸接触到 Hexo 开源静态博客框架，但它有点 old school 了。</p><p>Hexo 默认的 Markdown 渲染插件——marked，不够好。建议使用其他强劲的 Markdown 渲染插件。marked 插件在图片路径处理方面存在逻辑错误，笔者在  <a href="/posts/Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html" title="HexoとGitHubPages搭建静态博客">HexoとGitHubPages搭建静态博客</a>：文件管理与附属资源显示—— shit 小节的彩蛋中指出。</p><p>回归建立博客的初衷——记录。不要执着于该样式，一段时间变一点好了。</p><p>Fluid 主题也属于 old school 的一员了。它的界面设计还不够简洁，其他地方和别的通用主题没差。但是，Fluid 主题不支持 PJAX，详情见链接：<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/189">https://github.com/fluid-dev/hexo-theme-fluid/issues/189</a> 。如果想用 PJAX，请自行适配。或者，改用支持 PJAX 的主题。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHubPages自定义域名</title>
    <link href="/posts/GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html"/>
    <url>/posts/GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html</url>
    
    <content type="html"><![CDATA[<p>域名是互联网中用来唯一标识网站或资源的字符地址，通过域名系统（DNS）与对应的 IP 地址关联，方便用户访问。GitHub Pages 支持自定义域名，取代默认且固定的域名 <code>&lt;username&gt;.github.io</code> 。</p><p>虽然域名注册商一般也提供域名解析服务，但是笔者选择使用 Cloudflare 托管域名解析（以 Cloudflare 作为域名的权威 DNS 名称服务器，添加 DNS 记录）。因为 Cloudflare 有 Free Plan，提供 DDos 保护、Universal SSL 证书、全球 CDN 等基础服务，足够个人网站日常使用。</p><blockquote><p>Cloudflare、DDos（distributed denial-of-service attack，分布式拒绝服务攻击），SSL&#x2F;TLS（网络通信的安全协议之一），CDN（Content Delivery Network，内容分发网络），请粗览维基百科。</p></blockquote><blockquote><p>关于全球 CDN，详情见下篇博文——“GitHubPages访问优化”。</p></blockquote><h1 id="1-域名"><a href="#1-域名" class="headerlink" title="1. 域名"></a>1. 域名</h1><p>域名相关的概念请参考前文——《个人博客 》，“建站流程与 Github Pages”。</p><h2 id="1-1-注册域名"><a href="#1-1-注册域名" class="headerlink" title="1.1 注册域名"></a>1.1 注册域名</h2><p>顶级域名（Apex Domain）付费注册可以选择国内域名注册商或国外域名注册商。</p><ul><li>国内域名注册商，比如 <a href="https://cloud.tencent.com/">腾讯云</a> 和 <a href="https://www.aliyun.com/">阿里云</a>，注册的域名需要实名认证。DNS 解析也需要备案，而备案需要购买服务器。DNSPod 解析域名免费，注册 SSL 证书免费，但是将 SSL 证书部署到站点需要付费。</li><li>国外域名不需要实名认证和备案。邮箱和地址可能会要求用户认真填写。</li></ul><blockquote><p>Tips：</p><ul><li>Apex domains are also known as base, bare, naked, root apex, or zone apex domains.（顶级域 | 基础域 | 裸域 | 无子域 | 根域 | 区域根域）</li><li>DNSPod 是腾讯云旗下的域名注册商之一，提供域名解析服务。</li><li>一些国外组织提供免费域名注册服务。虽然注册的域名是顶级域名的子域名，但是能够用作顶级域名。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/30460060913">📢 重要通知：US.KG 域名暂停及迁移至 DPDNS.ORG - 知乎</a></p><p><a href="https://www.nodeseek.com/post-214461-1">永久免费域名us.kg保姆级申请过程</a></p><p><a href="https://ednovas.xyz/2021/12/17/euorg/">申请 eu.org 免费域名 | EdNovas 的小站</a></p></blockquote><hr><p>常见的域名注册商的情况见以下链接：</p><ul><li><a href="https://atpx.com/blog/choose-domain-registrar-and-dns/">从域名注册商到 DNS 服务，找到自己的组合 - atpX</a> ，</li><li><a href="https://dmthought.com/best-domain-registrars/">2025 年国外10个域名注册商推荐（有对比表格） - DMthought</a></li><li><a href="https://zhuanlan.zhihu.com/p/873902706">哪里买域名最便宜？2024下国内及海外域名购买平台对比，注意事项及注册优惠购买 - 知乎</a></li><li><a href="https://pengtech.net/sites/domain-service-providers.html">2025年各大主流域名服务商汇总 - 鹏叔的技术博客</a></li><li><a href="https://www.nodeseek.com/post-109404-1">❤️个人域名规划指南❤️</a></li></ul><p>简单地说一下域名情况：</p><ol><li>主站的域名固定后不要随意变更。（个人站点随意，但链接失效很烦人。）</li><li>一些域名注册商有套路。比如：首年超低价但续费超贵，绑定销售等。</li><li>【数字二级域 + new gTLD 一级域】 的组合通常很便宜。大概 8 rmb&#x2F;首年，180 rmb&#x2F;十年？</li><li>SEO 对一级域有限制要求。见链接：<a href="https://blog.liushen.fun/posts/159f1aa5/">域名迁移至 blog.liushen.fun | LiuShen’s Blog</a></li><li>Cloudflare 的所有域名都是成本价。但它旗下的域名无法更改 NS（域名服务器），绑定自家的一条龙服务。</li><li><a href="https://www.spaceship.com/">Spaceship</a> 是 Namecheap 新推出的域名注册子公司。它提供免费的 WHOIS 服务，支持支付宝付款。<code>.com</code> 顶级域名 6 $&#x2F;首年（优惠后），续费价格为 10 $&#x2F;每年。</li></ol><hr><p>个人选择：</p><ol><li><p>在 Spaceship 注册的 <code>.com</code> 顶级域名，作为主域名。后续可能将该域名迁移到 Cloudflare 名下。</p></li><li><p>在腾讯云注册的 new gTLD 域名，作为年抛域名。毕竟首年白菜，续费黄金，不划算。当然，如果以之作为主域名，可以一次性购买 10 年，有很便宜的域组合。</p></li></ol><h2 id="1-2-示例：在-Spaceship-注册域名"><a href="#1-2-示例：在-Spaceship-注册域名" class="headerlink" title="1.2 示例：在 Spaceship 注册域名"></a>1.2 示例：在 Spaceship 注册域名</h2><p>在 Spaceship 注册 <code>.com</code> 顶级域名有首年优惠，只需 40 rmb。当然，也可以选择注册便宜的域名组合。</p><p>请先关闭代理，再连接 Spaceship，否则域名注册可能会失败。</p><ol><li>注册 Spaceship 账号，登录网站。</li><li>打开 <a href="https://www.spaceship.com/zh/promos/">促销与优惠 - 特别促销代码和折扣 - Spaceship</a> 界面，复制 <code>.com</code> 顶级域优惠码，输入唯一域名，搜索。</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514164016855.png"></p><ol start="3"><li>加入购物车，打开订单界面；继续；粘贴 .com 顶级域优惠码，应用后金额变成 40 rmb，结账。</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514164316962.png"></p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514164423424.png"></p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514170002699.png"></p><ol start="4"><li>结账；添加支付宝付款。需要先填写地址信息才能付款。</li></ol><blockquote><p>Tip：地址别乱填，请参考 <a href="https://zhuanlan.zhihu.com/p/343708781">史上最全的中国地址英文地道写法，值得收藏！ - 知乎</a></p></blockquote><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514165334216.png"></p><ol start="5"><li>点击域名，打开域名管理器界面；点击域名，打开 名称服务器和DNS 界面。</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514170506888.png"></p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514170612526.png"></p><ol start="6"><li>添加 DNS 记录是生效于 Spaceship 名称服务器。可以更改 NS，输入 NS 地址，在 NS 处添加 DNS 记录。</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250514171001461.png"></p><h2 id="1-3-WHOIS-服务"><a href="#1-3-WHOIS-服务" class="headerlink" title="1.3 WHOIS 服务"></a>1.3 WHOIS 服务</h2><p>域名注册商一般都会提供 WHOIS 服务（付费&#x2F;免费），该服务十分重要。如果未采用该服务，则 WHOIS 数据库会公开域名注册数据目录的所有数据，这会暴露域名所有者的私人信息（name、邮箱等）。</p><p>近年来，ICANN 致力于使用 RDDS 取代 WHOIS 服务。查询者想获取域名所有者的私人信息必须联系域名注册商，域名注册商自行决定是否公开域名所有者的私人信息。</p><blockquote><p><a href="https://superuser.com/questions/1366161/what-is-rdds-service-and-how-to-query-the-rdds-service">dns - What is RDDS service and how to query the RDDS service - Super User</a></p><p><a href="https://rrsg.org/wp-content/uploads/2023/10/Understanding-RDDS-Responses.pdf">Understanding RDDS Responses - slide version</a></p><p><a href="https://www.icann.org/resources/pages/additional-rdds-information-policy-2024-05-23-zh">附加注册数据目录服务 (Registration Data Directory Service, RDDS) 信息政策 - ICANN</a></p><p><a href="https://www.icann.org/zh/blogs/details/whats-new-on-the-rdds-roadmap-10-9-2020-zh">注册数据目录服务 (RDDS) 路线图的最新资讯有哪些？</a></p></blockquote><p><a href="https://cloud.tencent.com/document/product/242/61484">域名注册 开启 CNNIC 隐私保护服务_腾讯云（最后更新时间：2024.12）</a> 提到，隐私保护服务仅支持在 <strong>DNSPod、腾讯云、广州云讯</strong>主体注册的 <strong>“.cn”</strong> 和 <strong>“.中国”</strong> 域名后缀，且需付费开启。（Maybe）现如今，腾讯云已取消付费的域名隐私保护服务，实行 RDDS 代替 WHOIS 服务。</p><blockquote><p>Tips：</p><ul><li>2025.5，笔者在 DNSPod 新注册了 new gTLD，该域名被腾讯云隐藏了所有者的私人信息。因此，笔者推断腾讯云已实行 RDDS 代替 WHOIS 服务。（应该是这样？文档信息反正是过时的。）</li><li>早期注册的域名若未采用 WHOIS 服务，已暴露的旧私人信息可能仍然是公开的。</li></ul></blockquote><blockquote><p>在 DNSPod 新注册的 new gTLD：</p><ol><li>经公共 WHOIS 查询，未查询到域名所有者的私人信息，告知查询者请联系域名注册商；</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250501182449269.png"></p><ol start="2"><li>经腾讯云 WHOIS 查询，腾讯云隐藏了域名所有者的私人信息，仅提供表单，用于给域名所有者留信。</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250502003122137.png"></p></blockquote><h2 id="1-4-数字证书（TLS-证书）"><a href="#1-4-数字证书（TLS-证书）" class="headerlink" title="1.4 数字证书（TLS 证书）"></a>1.4 数字证书（TLS 证书）</h2><ul><li><a href="https://zh.wikipedia.org/zh-cn/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89">公开密钥认证 - 维基百科，自由的百科全书</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A">传输层安全性协议 - 维基百科，自由的百科全书</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">超文本传输安全协议 - 维基百科，自由的百科全书</a></li><li>【系列文章】<a href="https://www.cloudflare-cn.com/learning/ssl/what-is-ssl/">SSL&#x2F;TLS 证书 | Cloudflare</a></li><li>【个人博客】<a href="https://blog.halfcoffee.com/docs/security/certificate">数字证书 - Wiki</a></li><li><a href="https://jiangxueqiao.com/post/3462229631.html">了解数字证书 - 独钓寒江雪</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93">域名服务器缓存污染 - 维基百科，自由的百科全书</a> ，<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81/7657893">域名劫持_百度百科</a></li><li><a href="https://r2wind.cn/articles/20220214.html">群晖部署SSL证书实现HTTPS安全访问 | 归去如风</a></li><li><a href="https://help.aliyun.com/zh/ssl-certificate/support/resolve-certificate-deployment-issues-based-on-browser-prompts#48a828f4f39lx">根据浏览器错误提示解决证书部署问题_数字证书管理服务（原SSL证书）(SSL Certificate)-阿里云帮助中心</a></li></ul><p>HTTPS 是 HTTP 协议结合 SSL&#x2F;TLS 协议实现的安全版本。URL 中的 “HTTPS” 即表明该网站实施 SSL&#x2F;TLS 加密。</p><p>网站部署 TLS 证书（一种数字证书）以保障用户与网站安全地连接：</p><ol><li>身份验证：确保用户连接到的是网站的真实身份，防止钓鱼或伪造网站。</li><li>传输数据加密：通过加密方式保护用户的隐私信息，防止数据在传输过程中被窃取或监听。</li><li>数据完整性和数字签名：使用数字签名保证传输的数据未被篡改，确保数据的完整性，防止中途篡改或伪造。</li></ol><p>向证书颁发机构（CA）申请 TLS 证书，然后在网站的源站服务器上安装并激活证书。激活证书后，该网站便可通过 HTTPS 进行加载，并且往返于该网站的所有流量都将受到加密和保护。</p><ul><li>申请 DV 级别的免费证书即可，有效期为 3 个月，到期手动续约。腾讯云和阿里云等都提供该服务，但是网站需要备案。</li><li>Cloudflare 提供免费的 TLS 证书，受 Cloudflare 保护的网站（即使用 Cloudflare 托管域名解析）只需点击几次即可激活 TLS。</li></ul><h1 id="2-DNS-及-Github-Pages-设置"><a href="#2-DNS-及-Github-Pages-设置" class="headerlink" title="2. DNS 及 Github Pages 设置"></a>2. DNS 及 Github Pages 设置</h1><blockquote><p><a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">Configuring a custom domain for your GitHub Pages site - GitHub Docs</a></p><p><a href="https://indiehackertools.net/blog/cloudflare-quick-integration-guide">Cloudflare 简易接入指南 | Indie Hacker Tools</a></p></blockquote><p>Github Pages 站点仅支持绑定单域名，而 www 子域名除外。如果配置正确，GitHub Pages 会自动在 apex domain 和 www 子域之间进行重定向。当然，自动重定向不适用于任何其他子域，例如 <code>blog</code>。</p><ol><li>A 记录：@（即 <code>shaton.online</code>，根域） → Github Pages IP（<code>185.199.108.153</code>，<code>185.199.109.153</code>，<code>185.199.110.153</code>，<code>185.199.111.153</code>）</li><li>CNAME 记录：www（即 <code>www.shaton.online</code>，子域） →  Github Pages default domain（<code>&lt;username&gt;.github.io</code>）</li><li>设置 Github Pages 站点绑定子域 <code>www.shaton.online</code>。</li></ol><blockquote><p>Tips：</p><ul><li>此处给出的 A 记录和 CNAME 记录就是“配置正确”。当然，CNAME 记录设置为 www → apex domain，效果一样。</li><li>GitHub Pages 自动重定向到站点绑定的域名。建议站点绑定子域，而不是 apax domain，<strong>个人不建议使用裸域</strong>。</li></ul><p><a href="https://www.quanzhan.co/archives/159">网站域名带www和不带有什么区别？ - luch的博客</a></p><p><a href="https://www.cnblogs.com/echo1937/p/8692421.html">为什么不建议给域名裸域添加CNAME记录 - 又是火星人 - 博客园</a></p><p><a href="https://codezhangborui.com/2023/08/make-cloudflare-cname-flatten-better/">让 CloudFlare 根目录 CNAME 拉平更好用 - CodeZhangBorui’s Blog</a></p></blockquote><p>这样，三个域名都能访问到部署在 Github Pages 的静态博客，而 <code>shaton.online</code>、<code>&lt;username&gt;.github.io</code> 会重定向到 <code>www.shaton.online</code>。</p><blockquote><p>Tip：如果仅希望 blog 子域访问该站点，请设置该站点绑定 blog 子域。添加 CNAME 记录：blog → <code>&lt;username&gt;.github.io</code>。</p></blockquote><p>设置完后，cmd.exe 执行命令 <code>ipconfig /flushdns</code> ，刷新本机 DNS 缓存。</p><blockquote><p><a href="https://blog.csdn.net/zhyl8157121/article/details/100551350">如何刷新本机DNS缓存（Win+Linux+OSX）_uos刷新dns缓存-CSDN博客</a></p></blockquote><hr><p>虽然 Spaceship&#x2F;DNSPod 也提供域名解析服务，但是笔者选择使用 Cloudflare 托管域名解析，因为其强大、免费、足够个人网站日常使用的 Free Plan。</p><p>以归属于 DNSPod 的域名为例，设置域名的 NS 变更为 Cloudflare，使用 Cloudflare 添加 DNS 记录。</p><h2 id="2-1-Cloudflare-DNS-设置"><a href="#2-1-Cloudflare-DNS-设置" class="headerlink" title="2.1 Cloudflare DNS 设置"></a>2.1 Cloudflare DNS 设置</h2><ol><li><a href="https://dash.cloudflare.com/">Cloudflare</a> 注册账户</li><li>点击左上角【CLOUDFLARE 图标】进入 Cloudflare home page，【账户主页】→【添加域】</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250516024943274.png"></p><ol start="3"><li>【输入现有域：个人域名】→【快速扫描 DNS 记录】→【继续】</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250516025220322.png"></p><ol start="4"><li>进入该域名的设置界面 →【选择 Free 计划】</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250516025325491.png"></p><ol start="5"><li>删除 DNS 记录（主要是删除 NS 记录）→【继续前往激活】→ 复制 Cloudflare NS 地址</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250516031506583.png"></p><ol start="6"><li>前往域名所在平台更改 NS。</li></ol><p>（以归属于 DNSPod 的域名为例，其他平台同理。）</p><p>【控制台】→【域名注册】→【我的域名】，点击该域名</p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250516031708730.png" alt="image-20250516031708730"></p><p>【修改 DNS 服务器】→【自定义 DNS】→ 设置为 Cloudflare NS 地址 →【提交】</p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250516032200530.png"></p><ol start="7"><li>【立即检查名称服务器】，然后等待 Cloudflare 激活该域名。</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250515085217138.png"></p><p>该域名在 Cloudflare 激活时，Cloudflare 会发送电子邮件。或者，【账户主页】域的状态显示为【活动】。</p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250516033043566.png"></p><ol start="8"><li>Cloudflare NS 添加 DNS 记录。</li></ol><p>该域名的设置界面 →【DNS | 记录】→【添加记录】（按图操作）</p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250517021613338.png"></p><p>添加 4 条 A 记录，使得根域名绑定 Github Pages IP。代理状态是 Cloudflare 提供的 CDN 服务。</p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250517021959178.png"></p><p>添加 1 条 CNAME 记录，使得 www 子域名转发到根域名（或 <code>&lt;username&gt;.github.io</code>）。</p><blockquote><p>Tip：懒得改图了，就写成子域转发到根域，效果和（或）是一样的。</p></blockquote><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250517022450962.png"></p><h2 id="2-2-Github-Pages-设置"><a href="#2-2-Github-Pages-设置" class="headerlink" title="2.2 Github Pages 设置"></a>2.2 Github Pages 设置</h2><p>在 Github Pages 仓库根目录下创建 <code>CNAME</code>（name 固定）文件，添加内容 <code>www.shaton.online</code> 。</p><p>或者，按下图操作，达到上面的效果。</p><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250609014651993.png"></p><h2 id="2-3-本地博客项目添加-CNAME-文件"><a href="#2-3-本地博客项目添加-CNAME-文件" class="headerlink" title="2.3 本地博客项目添加 CNAME 文件"></a>2.3 本地博客项目添加 CNAME 文件</h2><p>执行 deploy 命令后，Github Pages 仓库的文件可能会变更：</p><ol><li>被覆盖——本地博客项目该文件的内容变更</li><li>被删除——本地博客项目无该文件</li></ol><p>在 <code>source/</code> 目录下创建 <code>CNAME</code> 文件，添加内容 <code>www.shaton.online</code>。以免执行 deploy 命令后，GitHub Pages 设置失效。</p><h2 id="2-4-Cloudflare-SSL-TLS-设置"><a href="#2-4-Cloudflare-SSL-TLS-设置" class="headerlink" title="2.4 Cloudflare SSL&#x2F;TLS 设置"></a>2.4 Cloudflare SSL&#x2F;TLS 设置</h2><p>如果你的域名采用 Cloudflare 作为权威 DNS 名称服务器，Cloudflare 在其激活后会自动为其申请通用 SSL 证书。此证书涵盖你的顶级域名（<code>example.com</code>）和所有一级子域名（<code>subdomain.example.com</code>）。通用 SSL 证书有效期是 90 天，Cloudflare 会自动续订。</p><ol><li>【SSL&#x2F;TLS | 概述】，【SSL&#x2F;TLS 加密】设置为完全（full）模式，以便自动配置 SSL&#x2F;TLS 证书。即访问者与 Cloudflare 之间、Cloudflare 与源服务器之间均采用加密。</li></ol><blockquote><p><a href="https://developers.cloudflare.com/ssl/concepts/#ssltls-certificate">概念 ·Cloudflare SSL&#x2F;TLS 文档 — Concepts · Cloudflare SSL&#x2F;TLS docs</a></p></blockquote><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250517033841675.png"></p><ol start="2"><li>【SSL&#x2F;TLS | 边缘证书】，启用【始终使用 HTTPS】。在访问者与 Cloudflare 之间生效。</li></ol><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250517034203823.png"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://who.cx/">某个 WHOIS 查询网站</a></p><p><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https">使用 HTTPS 保护 GitHub Pages 站点 - GitHub 文档</a></p><p><strong>CNAME 记录不能与 A 记录重复。</strong> 例如，已经添加 A 记录：@（根域名） → Github Page IP，不能再添加 CNAME 记录：根域名 → <code>&lt;username&gt;.github.io</code> 。</p><hr><p>nslookup 命令行工具用于诊断域名系统基础结构的信息。</p><blockquote><p><a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/nslookup">nslookup | Microsoft Learn</a></p></blockquote><p><img src="GitHubPages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/image-20250518180810888.png" alt="image-20250518180810888"></p><hr><p>Github Pages 绑定经 Cloudflare 解析的域名，无法强制开启 HTTPS 的原因：</p><ol><li>Github Pages 从 <a href="https://letsencrypt.org/">Let’s Encrypt</a> 请求的 TLS 证书，与 Cloudflare 自动申请的 SSL&#x2F;TLS 证书冲突</li><li>Github Pages 站点通过 HTTP 引用资源</li><li>忘了，思索中……</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>待实现</title>
    <link href="/posts/%E5%BE%85%E5%AE%9E%E7%8E%B0.html"/>
    <url>/posts/%E5%BE%85%E5%AE%9E%E7%8E%B0.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://sspai.com/post/91285">2024 年了，我的博客有了什么变化 - 少数派</a></p><p><a href="https://www.pseudoyu.com/zh/2024/06/29/what_changed_in_my_blog_2024">2024 年了，我的博客有了什么变化</a></p><p><a href="https://www.baiyuyu.com/4261.html">算一算博客运行一年的花费 - 白鱼小栈</a></p><p><a href="https://blog.liushen.fun/posts/43f0ef13/">Cloudflare&#x2F;Vercel 项目推荐(4) | LiuShen’s Blog</a></p><p>【精】<a href="https://www.cnblogs.com/Sky-seeker/p/15855538.html">国内外免费对象存储和 CDN 加速额度 - 梦幻之心星 - 博客园</a></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/346151010">如何在云开发中优雅地管控 CDN 流量？ - 知乎</a></p><p><a href="https://www.krseo.com/web/111.html">CDN 回源流出流量是什么意思？-狂人网络</a></p></blockquote><p><a href="https://www.flyzy2005.com/build-page/cloudflare-free-https/">使用 Cloudflare 免费 https 证书 全站 https 访问配置教程 - flyzy 小站</a></p><h1 id="0-未知"><a href="#0-未知" class="headerlink" title="0. 未知"></a>0. 未知</h1><p><a href="https://zhuanlan.zhihu.com/p/20908409">LeanCloud 与阿里云到底有什么区别？ - 知乎</a></p><p><a href="https://blog.csdn.net/weixin_42242323/article/details/113228266">leancloud mysql 混合_leancloud 的优缺点？-CSDN 博客</a></p><h1 id="1-网站统计"><a href="#1-网站统计" class="headerlink" title="1. 网站统计"></a>1. 网站统计</h1><blockquote><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E7%BD%91%E9%A1%B5%E7%BB%9F%E8%AE%A1">配置指南：网页统计</a></p></blockquote><blockquote><p><a href="https://blog.liushen.fun/posts/73765344/">自部署 busuanzi 访问量统计服务 | LiuShen’s Blog</a></p><p><a href="https://mantyke.icu/posts/2021/umami-build/">Hugo | 使用 Umami 进行站点浏览量统计 | 小球飞鱼</a></p></blockquote><p>不蒜子虽然简单易用，但是它不支持在站点文章摘要列表中（如首页）逐个显示每篇文章的阅读次数。</p><blockquote><p>Leancloud 记数：<a href="https://shengdie.github.io/2016/10/18/hexo-leancloud/">Hexo 增加阅读量统计 | 晴天</a></p><p><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html">为 NexT 主题添加文章阅读量统计功能 | Doublemine</a></p></blockquote><blockquote><p><a href="https://atpx.com/blog/5-opensource-web-analytics-tool/">推荐 5 款免费开源的网站流量分析统计工具 - atpX</a></p><p><a href="https://atpx.com/blog/build-umami-web-analytics/">使用 Umami 自建网站流量统计分析工具 - atpX</a></p></blockquote><h1 id="3-安全"><a href="#3-安全" class="headerlink" title="3. 安全"></a>3. 安全</h1><p><a href="https://www.zhihu.com/question/29886750">从技术上看，cloudflare 比其他公司牛在哪儿？ - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/638417893">全站使用 CloudFlare 的总结:好处和坏处 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/25099885873">Cloudflare 是干什么的？Cloudflare 的作用与好处 - 知乎</a></p><p><a href="https://sspai.com/post/90170">从零开始搭建你的免费图床系统 （Cloudflare R2 + WebP Cloud + PicGo） - 少数派</a></p><p><a href="https://tyxiaoming.xin/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/">个人图床最佳方案：Cloudflare R2+PicGo - 陶渊小明</a></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/70240127">Hexo+Github Pages 快速实现个人网站（拓展：域名绑定+Netlify 自动部署+阿里云 OSS） - 知乎</a></p></blockquote><p><a href="https://www.baiyuyu.com/5644.html">搭建免费、无限空间的图床：Cloudflare Pages 和 Telegraph-Image</a></p><h1 id="4-在线编辑"><a href="#4-在线编辑" class="headerlink" title="4. 在线编辑"></a>4. 在线编辑</h1><p><a href="https://cloud.tencent.com/developer/article/2448704?from=15425">HEXO 系列教程 | 将 Qexo 接入 Hexo，实现静态博客的动态管理！-腾讯云开发者社区-腾讯云</a></p><h1 id="5-GFW"><a href="#5-GFW" class="headerlink" title="5. GFW"></a>5. GFW</h1><p>【界面舒适，内容充实，字节】<a href="https://shinya.click/fiddling/tech-about-gfw">GFW 原理考 | 信也のブログ</a></p><p>【牛人笔记】<a href="https://docs.phillweston.com/article/theory-and-bypass-method-of-the-great-firewall">GFW 的原理和绕过——IDS 攻防战 | Phillweston Blog</a> 【To-Track, Hard】</p><p>【论文，有评论】<a href="https://gfw.report/publications/usenixsecurity23/zh/">中国的防火长城是如何检测和封锁完全加密流量的</a></p><p>【论文？】<a href="https://www.scribd.com/document/14812496/GFW%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AA%81%E7%A0%B4%E6%8A%80%E6%9C%AF-%E6%9C%80%E6%96%B0%E7%89%88">GFW 的工作原理及突破技术（最新版） | PDF</a></p><p><a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E">防火长城 - 维基百科，自由的百科全书</a></p><p>【科普，简短】<a href="https://www.mlvlog.com/1149.html">［科普］什么是 GFW(长城防火墙)? - 陌罗博客</a></p><p><a href="https://www.scribd.com/document/14812496/GFW%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AA%81%E7%A0%B4%E6%8A%80%E6%9C%AF-%E6%9C%80%E6%96%B0%E7%89%88">GFW 的工作原理及突破技术（最新版） | PDF</a></p><p><a href="https://www.oneyearago.me/2019/06/14/learn_gwf/">G.F.W 的原理 | changan’s blog</a></p><hr><p><a href="https://fika.ink/blog/28093.html">GFW 原理和封锁技术 | Fika</a> ，原文：<a href="https://xuranus.github.io/2017/10/09/GFW%E5%8E%9F%E7%90%86%E5%92%8C%E5%B0%81%E9%94%81%E6%8A%80%E6%9C%AF">Page not found · GitHub Pages</a> ，发现 <a href="https://xuranus.github.io/">XUranus</a> 。【To-Track】</p><blockquote><p>【与 XUranus 的博文一致，但是标注发表于 2015-07-05？烂杂志！】<a href="https://www.china-week.com/html/6409.htm">于艳平：长城防火墙的工作原理和封锁技术 – 中国报道周刊</a></p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-section"># 另一篇同样的博文（https://www.satechat.club/1404.html）的评论（2022.5）：</span><br><br>Trueswzz：<br>国内的互联网环境真是佛了啊！现在 steam，github 也开始抽风了。切香肠战术……可是我们又能怎么办呢。<br>Charlie894：<br>steam 是自愿的,国内游戏审核太臃肿,非要持证上架.你想要看到蒸汽商店里没有踩的朋克,给他爱 5 这些吗《〈《<br><br>boshugege：<br>其实并不止这样。<br>DNS 污染非常好解决，改 host 可以解决非常多 DNS 污染的问题。<br>现在的梯子都是加密的 UDP 包，原本的 GFW 已经防不住了，但是现在的 GFW 有机器学习，还会强制让大的加密包丢包，必要时还会人工干预……现在的 GFW 的各种防御技术早就不是大家可以全部知道的了，而且国家有能力让 GFW 再强很多。<br>Charlie894：<br>像 SNI 污染这样吧,,,另外我还是要说明,现在互联网主要还是以 TCP 为主,我在鸡总转发上的流量显示,UDP 的出现真的很少了,单仅支持 UDP 转发的话这个转发面板说实话真没人敢用<br>6 月 GFW 已经开始发作了,猪头的广州移动已经反向墙了<br></code></pre></td></tr></table></figure><p><a href="https://blogs.changbaiqi.top/2024/02/27/learnnote/ji-suan-ji-wang-luo/gfw-yuan-li-he-feng-suo-ji-zhu/">GFW 原理和封锁技术 | 长白崎の个人博客</a> ，其引用链接为 XUranus 的博文留档，发现 <a href="https://github.com/hoochanlon/fq-book/blob/master/docs/abc/gfw.md">留档集</a> 。</p><hr><p><a href="https://jinhui1988.github.io/posts/3ecfb2a45">GFW 的工作原理 | Jinhui’s Blog</a></p><p><a href="https://blog.51cto.com/xwxhvip/1939675">GFW 的工作原理与封锁技术和部分解决方法_新网学会博客的技术博客_51CTO 博客</a></p><p><a href="https://7p7k.com/article/000075/.html">GFW 的原理及如何翻墙 - 老王的个人博客</a></p><p><a href="https://www.zongscan.com/demo333/95763.html">国内“翻墙”服务的技术原理-侯体宗的博客</a></p><h1 id="6-Git-服务器"><a href="#6-Git-服务器" class="headerlink" title="6. Git 服务器"></a>6. Git 服务器</h1><p><a href="https://www.ruanyifeng.com/blog/2022/10/git-server.html">最简单的 Git 服务器 - 阮一峰的网络日志</a></p><p>【只看】<a href="https://zhuanlan.zhihu.com/p/40371444">搭建属于你自己的 Git 服务器 - 知乎</a></p><p>【开头有一个链接】<a href="https://blog.csdn.net/mmlhbjk/article/details/141731713">搭建 Git 私人服务器完整指南_git 服务器搭建-CSDN 博客</a> ，其博客：<a href="https://blog.lenyiin.com/building-git-private-server/">搭建 Git 私人服务器完整指南 - Lenyiin blog</a></p><p><a href="https://www.jianshu.com/p/9c91a050a0dc">如何在云服务器上使用 git 管理项目(git 远程仓库、ssh 配置、多密钥对配置) - 简书</a></p><p><a href="https://developer.aliyun.com/article/1650159">图解 Git——服务器上的 Git《Pro Git》-阿里云开发者社区</a></p><p><a href="https://www.cnblogs.com/cloudboy/p/13031882.html">Git 配置及使用(使用云服务器） - 云上男孩 - 博客园</a></p><p><a href="https://gitwebcn.com/16089.html">如何将 GitHub 项目部署到云服务器：完整指南 - github 在线教程网</a></p><p><a href="https://cloud.tencent.com/developer/article/1961888">如何搭建自己的 git 服务器-腾讯云开发者社区-腾讯云</a></p><p><a href="https://blog.csdn.net/sunzongpeng/article/details/130065011">云服务安装配置 git_腾讯云 服务器 部署 github-CSDN 博客</a></p><h1 id="7-GitHub-Pages-替代方案"><a href="#7-GitHub-Pages-替代方案" class="headerlink" title="7. GitHub Pages 替代方案"></a>7. GitHub Pages 替代方案</h1><p><a href="https://hee.ink/p/%E4%BB%8E-github-pages-%E8%BF%81%E7%A7%BB%E5%88%B0-cloudflare-pages-%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0/">从 GitHub Pages 迁移到 CloudFlare Pages 的体验与踩坑小记</a></p><blockquote><p><a href="https://blog.csdn.net/m0_53898287/article/details/128321759">Coding pages 不见了-CSDN 博客</a></p><p><a href="https://hy187.github.io/post/14.html">解决 hexo 引入图床，手机和 web 不显示图片的问题 | 流火七月</a></p></blockquote><blockquote><p><a href="https://blog.loli.wang/blog/2023-10-08-surge/doc/">记一次折腾 Surge (github pages 替代品) - 魔王の博客</a></p></blockquote><blockquote><p><a href="https://v2ex.com/t/822876">CODING 网站托管服务倒闭 - V2EX</a></p><p><a href="https://www.v2ex.com/t/203297">请给云计算一点宽容 - V2EX</a></p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/55252024">手把手教你使用 Netlify 部署博客及部署自动化 - 知乎</a></p><p><a href="https://www.cnblogs.com/KairusZhang/p/17923459.html">cloudflare,vercel and netlify 的作用和区别 - KairusZhang - 博客园</a></p><p><a href="https://zhuanlan.zhihu.com/p/31416527">使用 Netlify 持续集成你的静态网站 - 知乎</a></p><p><a href="https://blog.csdn.net/weixin_47436633/article/details/129281237">使用 netlify 实现自动化部署前端项目（无服务器版本）-CSDN 博客</a></p><blockquote><p><a href="https://blog.csdn.net/abjtxf/article/details/145434573">【建站】专栏目录-CSDN 博客</a></p><p>【需 vip】<a href="https://blog.csdn.net/abjtxf/article/details/145431141">2025 最全 Netlify 部署指南：5 分钟免费部署前端项目，实现自动化+免费 HTTPS（附登录问题解决）-CSDN 博客</a></p><p><a href="https://blog.csdn.net/abjtxf/article/details/145431226">2025 最全 Cloudflare Pages 部署指南：5 分钟免费部署前端项目_cloud flare 部署的程序日期不对-CSDN 博客</a></p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/638417893">全站使用 CloudFlare 的总结:好处和坏处 - 知乎</a></p><p><a href="https://blog.csdn.net/techshrimp/article/details/139684106">Cloudflare 浑身都是宝，普通用户能白嫖多少服务？盘点 cloudflare 的免费功能_cloudfare-CSDN 博客</a></p><h1 id="8-加速"><a href="#8-加速" class="headerlink" title="8. 加速"></a>8. 加速</h1><p><a href="https://blog.eurekac.cn/p/d3c51290.html">SpeedUp!使用黑科技为你的网站提速 - CyanFalse’s HomeRegion</a></p><p><a href="https://blog.eurekac.cn/p/daa17206.html">为什么我更想要 FullCone 网络 - CyanFalse’s HomeRegion</a></p><blockquote><p><a href="https://www.cnblogs.com/Sky-seeker/p/15855538.html">国内外免费对象存储和 CDN 加速额度 - 梦幻之心星 - 博客园</a></p><p><a href="https://www.cnblogs.com/Sky-seeker/p/15855492.html">国内外免费域名、DNS 解析、CDN 加速、虚拟主机服务商 - 梦幻之心星 - 博客园</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/Renyi-Fan/p/11949242.html">阿里云 OSS 的 存储包、下行流量包、回流流量包 三者有啥关系 - 范仁义 - 博客园</a></p><p><a href="https://blog.csdn.net/Nove1205/article/details/143213753">上行流量和下行流量的区别-CSDN 博客</a></p><p><a href="https://blog.csdn.net/Jingxingyun/article/details/132100997">什么是上行流量，下行流量和上行速度，下行速度？_上行流量月包是什么-CSDN 博客</a></p></blockquote><p>阿里云 cdn 回源</p><p><a href="https://blog.mnxy.eu.org/posts/tech/cdn">白嫖 Cloudflare 优选 IP 给 Vercel 网站加速 - 梦念逍遥の BLOG</a></p><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><p><a href="https://sspai.com/post/56893">Docker 的入门「指北」 - 少数派</a></p><p>个人博客荒废而导致链接失效是个很常见的问题。如果你收集的资源是个人博客的博文，建议下载离线网页或手动摘抄到本地。</p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p><a href="https://www.cnblogs.com/yssjun/p/10145864.html">Git 认证方式 https 和 ssh 的原理及比较 - alpha_panda - 博客园</a></p><p><a href="https://www.zhihu.com/question/347333411">(5 封私信 &#x2F; 1 条消息) git 中为什么要设置 ssh 密钥呀？ - 知乎</a></p><p><a href="https://blog.csdn.net/juanxiaseng0838/article/details/118675491">Git 原理 SSH 公钥 私钥的理解_ssh 公钥和私钥有什么用-CSDN 博客</a></p><p>[<a href="https://www.cnblogs.com/dzblog/p/6930147.html">Jenkins][Git]ssh 原理以及与 https 的区别 - 疲惫的豆豆 - 博客园</a></p><p><a href="https://www.cnblogs.com/Higurashi-kagome/p/18417665">GitHub 配置 SSH Key 的步骤及原理解释 - Higurashi-kagome - 博客园</a></p><p><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH 原理与运用（一）：远程登录 - 阮一峰的网络日志</a></p><p><a href="https://blog.51cto.com/u_12891/9795988">ssh 密钥和私钥 ssh 密钥原理_gjnet 的技术博客_51CTO 博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/501837199">SSH 登录及其原理详解 - 知乎</a></p><p><a href="https://www.cnblogs.com/scofi/p/6617394.html">SSH 公钥登录原理 - scofi - 博客园</a></p><p>【有错误】<a href="https://zhuanlan.zhihu.com/p/108161141">每天都在用 SSH，你知道 SSH 的原理吗？ - 知乎</a></p><p><a href="https://blog.csdn.net/Dontla/article/details/120902725">SSH 公钥原理（密钥，秘钥，私钥）（看了还是懵逼啊！）_ssh 公钥私钥认证原理-CSDN 博客</a></p><p><a href="https://blog.csdn.net/m0_51720581/article/details/131796669">ssh 详解–让你彻底学会 ssh-CSDN 博客</a></p><h1 id="前端包管理器"><a href="#前端包管理器" class="headerlink" title="前端包管理器"></a>前端包管理器</h1><blockquote><p><a href="https://nodejs.cn/en/learn/getting-started/an-introduction-to-the-npm-package-manager">Node.js 中文网 — npm 包管理器简介</a></p><p><a href="https://npm.nodejs.cn/packages-and-modules">包和模块 | npm 中文网</a></p></blockquote><blockquote><p><a href="https://juejin.cn/post/7218069978044645432">彻底了解 npm、cnpm、yarn、pnpm 几种包管理器 - 掘金</a></p><p><a href="https://juejin.cn/post/7286362110211489855">pnpm、npm、yarn 包管理工具『优劣对比』及『环境迁移』 ## 前言 博主在开发前端网站的时候，发现随着开发的项 - 掘金</a></p></blockquote><p><a href="https://juejin.cn/post/7139361933756465183">npm 和 yarn 的历史及对比（上）一张图概括前端包管理器历史 - 掘金</a></p><p><a href="https://juejin.cn/post/7139380312697470990">npm 和 yarn 的历史及对比（下）一张图概括前端包管理器历史 - 掘金</a></p><blockquote><p><a href="https://juejin.cn/post/6844904065827241998">yarn 的安装和使用 - 掘金</a></p><p><a href="https://www.bytezonex.com/archives/DziKCHt3.html">Yarn DLX：让你的开发工作流程更轻松 - ByteZoneX 社区</a></p><p><a href="https://dev.nodejs.cn/learn/the-npx-nodejs-package-runner/">Node.js 包运行器 npx</a></p><p><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html">npx 使用教程 - 阮一峰的网络日志</a></p></blockquote><p><a href="https://juejin.cn/post/7144598583201759246">npm 和 yarn 安装机制及缓存 npm npm 安装机制 - 掘金</a></p><blockquote><p><a href="https://nodejs.cn/npm/cli/v9/configuring-npm/package-json/">package.json - npm 中文文档</a></p><p><a href="https://www.bytezonex.com/archives/x9bB0o3O.html">dependencies vs peerDependencies：深入理解包管理中的细微差别 - ByteZoneX 社区</a></p><p><a href="https://segmentfault.com/a/1190000041855828">前端 - dependencies 和 devDependencies 和 peerDependencies - 个人文章 - SegmentFault 思否</a></p><p><a href="https://blog.csdn.net/lph159/article/details/144359933">【Node.js】npm 和 peerDependencies ：理解与使用-CSDN 博客</a></p><p><a href="https://www.cnblogs.com/wonyun/p/9692476.html">探讨 npm 依赖管理之 peerDependencies - wonyun - 博客园</a></p><p><a href="https://segmentfault.com/a/1190000022435060">前端 - 一文搞懂 peerDependencies - 个人文章 - SegmentFault 思否</a></p></blockquote><blockquote><p><a href="https://gitcode.csdn.net/66ca1bfeaa1c2020b359e015.html">package.json 版本号符号^和~前缀的区别_cao_tinggang-GitCode 开源社区</a></p><p><a href="https://www.jianshu.com/p/6061186a2733">package.json 中版本号详解~和^和*的区别 - 简书</a></p></blockquote><h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode+"></a>VSCode+</h1><blockquote><p><a href="https://stackoverflow.com/questions/51521004/in-visual-studio-code-ctrlv-is-not-working">copy paste - In Visual Studio Code Ctrl+V is not working - Stack Overflow</a></p><p>卸载 vim 插件</p></blockquote><h2 id="Perttier"><a href="#Perttier" class="headerlink" title="Perttier"></a>Perttier</h2><blockquote><p><a href="https://blog.csdn.net/qq_38060125/article/details/148088622">【Prettier】代码美化工具Prettier快速上手教程</a></p><p><a href="https://blog.csdn.net/qq_38060125/article/details/148088938">【Prettier】 进阶使用与避坑指南（续集）</a></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/90171778459c">VS Code中格式化插件Prettier-Code Formatter保姆级设置</a></p></blockquote><p>嫌弃 Typora 打开多文档太麻烦，我就转向 VSCode。我在 VSCode 中安装了 Prettier 插件，用于格式化文件。在全局设置中未设置 MarkDown 采用 Prettier 格式化的情况下，VSCode 使用 Prettier 格式化了我打开的 MD 文档，而我又没有备份 MD 文档！SHIT！只能将错就错了！等以后有功夫再设置自己的格式化要求。（它将文档中所有中英文都空格了，不符合我的要求，原先我都手动格式的！）</p><p>PS：还未找出哪里的设置的，不过能设置 MarkDown 禁用格式化。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// ohter</span><br><br>  <span class="hljs-attr">&quot;[markdown]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// other</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>SHIT!</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人博客</title>
    <link href="/posts/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
    <url>/posts/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    
    <content type="html"><![CDATA[<p>Web Log（网络日志），简称 Blog（博客）。</p><p>笔者使用 Typora 做学习记录。苦恼的是，md 文档的大量开启会导致计算机运行内存占用陡增，遂产生了建立博客的念头——在网站上浏览自己的记录。</p><p>【注】：只看前两章即可。</p><h1 id="1-Personal-Choices"><a href="#1-Personal-Choices" class="headerlink" title="1. Personal Choices"></a>1. Personal Choices</h1><p>记录可以使用笔记软件&#x2F;工具，也可以发布在平台社区或个人博客网站上，方式各有优劣。</p><hr><p><strong>笔记工具</strong>，诸如 Notion、Wolai、语雀、Obsidian 和 Typora 等。笔记工具使用门槛低，适合个人整理、快速记录。笔记工具不要随意切换，数据迁移比较繁琐。如果是本地编辑，个人推荐 Obsidian 或 Typora；如果偶尔需要网页编辑，可以使用语雀。</p><ul><li><p>Notion：互联工作站。</p></li><li><p>Wolai：Notion 的本土化版本，云笔记且支持本地存储。</p></li><li><p>语雀：云端知识库。</p></li><li><p>Obsidian：本地知识库。</p></li><li><p>Typora：原始的 MarkDown 编辑器。</p></li><li><p><a href="https://www.yuque.com/">语雀云端知识库</a>：支持诸如定制 URL、在线编辑、自带评论功能等，还具备一定的社区环境（社交）。缺点是占用内存且卡顿、审核、付费、非自建等。【语雀停机事件】也引发用户对数据安全问题的广泛关注。</p></li></ul><blockquote><p><a href="https://ld246.com/article/1738580142674">DeepSeek 锐评各大笔记软件：Obsidian、Notion、flomo、思源笔记、语雀、OneNote - 链滴</a></p><p><a href="https://sspai.com/post/57704">快速拥有自己的博客，语雀或许是不错的选择 - 少数派</a></p><p><a href="https://sspai.com/post/96863">为什么笔记用户要保卫自己的「数字主权」？ - 少数派</a></p></blockquote><hr><p><strong>平台社区</strong>，诸如 CSDN、ITeye、博客园、开源中国、微信公众号、简书、知乎专栏、稀土掘金、SegmentFault、GitHub 等。平台社区的好处在于“社区”二字——交流反馈以及打造商业价值。需要注意的是，博主受制于平台政策。平台可能会要求博主整改博文，甚至删帖。因此，平台仅适合作为内容的“分发渠道”，但不建议作为主阵地。此外，平台社区人员混杂。个人很喜欢 ITeye 的 RednaxelaFX，他现在偶尔在知乎回答问题。</p><ul><li>CSDN：SEO 好，阅读量高，内容限定计算机领域。布局差，广告多。（不是很推荐，个人希望搜浏览器少显示 CSDN 的内容！）</li><li>ITeye：原 JavaEye，old school，现已迁移到 CSDN。（shit! ITeye died!）</li><li>博客园：SEO 好，阅读量有保证，内容限定计算机领域，可以定制主题界面。平台陈旧，有广告。</li><li>开源中国</li><li>微信公众号：个人引流，只是平台。</li><li>简书：界面简洁，双端适配。SEO 差，故事会多，无法定制。</li><li>知乎专栏：商业价值高，界面设计现代。SEO 一般，内容混杂，无法定制（原界面就够好）。</li><li>稀土掘金：开发者的技术内容分享与交流平台，抄袭 panda。</li><li>SegmentFault：开发者技术社区。</li><li>GitHub：全球同性交友平台。（Nicccccce!!!!!!）</li></ul><blockquote><p><a href="https://www.cnblogs.com/dadaozhijian22/p/9590703.html">个人技术博客的选择：CSDN、博客园、简书、知乎专栏还是 Github Page？ - Carzy_Learner - 博客园</a></p><p><a href="https://zhuanlan.zhihu.com/p/25042028">【资料合集】 RednaxelaFX 写的文章&#x2F;回答的导航帖（work in progress） - 知乎</a></p></blockquote><hr><p><strong>个人博客网站</strong>，可使用动态&#x2F;静态博客框架。动态博客框架，诸如 WordPress、Ghost、Typecho 等，适合追求一定自由度又不想从零搭建的人，功能需要付费（$: NO WAY!）。静态博客框架，诸如 Hexo、Hugo 等，需要一定的配置和部署，自主性高。</p><p>如果还不清楚，可以参考这些博文：<a href="https://sspai.com/post/59504">2020 年，如何才能拥有一个个人网站？ - 少数派</a> 、<a href="https://ednovas.xyz/2021/07/03/blog/">如何挑选博客框架、在线博客平台 | EdNovas 的小站</a> 、<a href="https://mantyke.icu/posts/2021/hugo-build-blog/">Hugo | 一起动手搭建个人博客吧 | 小球飞鱼</a> 。</p><blockquote><p><a href="https://blog.konata.vip/?p=148">【新手向】你究竟需要什么样的博客方案 – 此方方有限公司</a></p><p><a href="https://blog.csdn.net/twg666/article/details/124748337">静态&#x2F;动态博客 Blog 框架简介_静态博客-CSDN 博客</a></p></blockquote><hr><p>笔者决定搭建静态博客，因为其自主性高，“水形依器”。静态博客的维护成本相对较低（比较动态），能够让笔者更专注于写作（impossible）。</p><ol><li><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个基于 Node.js 的快速、简洁且高效的静态博客框架。Hexo 支持 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li><li><a href="https://gohugo.com.cn/">Hugo</a> 是一个快速且灵活的静态站点生成器，采用 Go 语言编写，简单、易用、高效、易扩展、快速部署。</li><li><a href="https://valaxy.site/">Valaxy</a> is Next Generation Static Blog Framework.</li></ol><p>Hugo 生成静态网页的速度快。Valaxy 新！新手友好！笔者暂时使用 Hexo，因为它比较 old，适合探索。</p><blockquote><p><a href="https://atpx.com/blog/dynamic-to-static-website/">个人博客的最终归宿是静态网站吗 - atpX</a></p><p><a href="https://sspai.com/post/59904">浅谈我为什么从 HEXO 迁移到 HUGO - 少数派</a></p></blockquote><p>静态博客（前端）只是开始，你可以自行增加功能，使之成为动态博客（前后端）。比如：评论系统（可能需要连接数据库）、登录系统（Flask, Django, Next.js）等。</p><blockquote><p><a href="https://juejin.cn/post/6844903959635705870">Next.js 实践总结 - 登录授权验证最佳方案 - 掘金</a></p><p><a href="https://blog.csdn.net/gitblog_00061/article/details/137219220">探索微博客平台：microblog——一个轻量级、强大的个人博客系统-CSDN 博客</a></p><p><a href="https://blog.csdn.net/weixin_48191864/article/details/141039166">如何使用 Next.js 和 GitHub Issues 构建个人博客:从零到上线的完整指南-CSDN 博客</a></p></blockquote><h1 id="2-建站流程与-Github-Pages"><a href="#2-建站流程与-Github-Pages" class="headerlink" title="2. 建站流程与 Github Pages"></a>2. 建站流程与 Github Pages</h1><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">域名系统 - 维基百科，自由的百科全书</a></p></blockquote><p>个人网站的一般建站流程如下：</p><ol><li>注册域名（Domain Name）。（域名注册商一般也提供域名解析服务。 ）</li><li>获取服务器。</li><li>将个人网站部署到服务器上，服务器分配独立 IP。（通过独立 IP 可直接定位到个人 Web 网站。）</li><li>DNS（Domain Name System，域名系统）解析域名——名称服务器（Name Server，简称 NS）添加 DNS 记录，绑定个人域名和服务器分配的独立 IP。</li><li>通过个人域名访问部署在服务器上的个人网站。</li><li>注册数字证书，并部署到服务器的个人网站上 balabala ……</li></ol><p>服务器也可能分配的是域名，而不是独立 IP。可以使用服务器分配的域名访问个人网站；或者 DNS 将个人域名指向服务器分配的域名，然后使用个人域名访问个人网站。</p><blockquote><p>Tips：若服务器分配域名，意味者用户使用的是服务器提供的公用 IP，服务器必须通过域名部分定位特定用户的资源。Github Pages 就是采用该模式。</p></blockquote><h2 id="2-1-域名与-IP-地址"><a href="#2-1-域名与-IP-地址" class="headerlink" title="2.1 域名与 IP 地址"></a>2.1 域名与 IP 地址</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D">域名 - 维基百科，自由的百科全书</a></p></blockquote><p><strong>IP 地址</strong>（Internet Protocol Address）是分配给每台连接互联网的计算机或网络设备的唯一数字标识，通常以点分十进制（IPv4，例如 192.168.1.1）或冒号分隔的十六进制（IPv6，例如 2001:0db8::1）表示。主机之间通过 IP 地址来定位和通信。</p><p><strong>域名</strong>（Domain Name，简称 Domain）是互联网中用来唯一标识网站或资源的字符地址，更便于人类记忆和使用。</p><p>域名通过 DNS 映射到对应的 IP 地址，用户通过域名访问网站，背后由 DNS 将其解析为实际的 IP 地址，完成与目标服务器的通信。</p><hr><p><strong>域名是一个由字母、数字和连字符组成的字符串，用点（.）分隔。域名从右到左依次是顶级域、二级域、子域（可选）。</strong> 以 <code>www.google.com</code> 为例 ，<code>.com</code> 是顶级域，google 是二级域，www 是子域。</p><p><strong>顶级域</strong>（Top-Level Domain，简称 TLD）位于域名的最右端部分，用于划分互联网域名的类别或区域。顶级域主要分为以下几类：</p><ol><li>通用顶级域（gTLD，generic TLD），适用于各种用途。例如：<code>.com</code>（商业），<code>.org</code>（组织），<code>.net</code>（网络相关），<code>.info</code>（信息），<code>.biz</code>（商务） 等。</li><li>国家和地区顶级域（ccTLD，country code TLD），代表特定国家或地区。例如：<code>.cn</code>（中国），<code>.us</code>（美国），<code>.uk</code>（英国），<code>.jp</code>（日本）等。</li><li>新通用顶级域（new gTLD），近年来新增的多样化域名，涵盖行业、兴趣、品牌等。例如：<code>.app</code>（应用），<code>.tech</code>（科技），<code>.shop</code>（商店），<code>.中国</code>（中文通用顶级域名）等。</li></ol><p><strong>二级域</strong>（Second-Level Domain）位于顶级域的左侧，通常是由企业、组织或个人注册的名字，用于标识具体的实体或网站。</p><p><u>一般我们付费注册的域名是 Apex Domain（顶级域名&#x2F;根域名）。Apex Domain 是没有子域的二级域名本身，由【二级域 + 顶级域】组成。</u></p><blockquote><p>Tip：Apex Domain 强调的是域名的最高层级，TLD 强调的是顶级域的类型。不要使用“一级域名”这种非正式用词来描述顶级域名。</p></blockquote><p><strong>子域</strong>（Subdomain）位于域名的左侧，通常在二级域名前面，用点（.）隔开。子域可以用来划分网站的不同部分或服务，例如：<code>mail</code> 用于邮件系统，<code>shop</code> 用于电子商务。子域名可以有多级，形成更复杂的层级结构。</p><blockquote><p>Tip：Github Pages 的顶级域名是 <code>github.io</code>，它分配给用户的固定子域名是 <code>&lt;username&gt;.github.io</code>。</p></blockquote><p>完整的域名由【子域（可选）+ 二级域 + 顶级域】组成。这三者结合起来，构成了完整的互联网域名体系，方便用户访问、组织和管理网站资源。</p><h2 id="2-2-服务器"><a href="#2-2-服务器" class="headerlink" title="2.2 服务器"></a>2.2 服务器</h2><p>（没空整理！）</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器 - 维基百科，自由的百科全书</a></p></blockquote><p><a href="https://zh.wikipedia.org/zh-cn/%E7%B6%B2%E9%A0%81%E5%AF%84%E5%AD%98%E6%9C%8D%E5%8B%99">网页托管服务 - 维基百科，自由的百科全书</a></p><h2 id="2-3-Github-Pages"><a href="#2-3-Github-Pages" class="headerlink" title="2.3 Github Pages"></a>2.3 Github Pages</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/GitHub">GitHub - 维基百科，自由的百科全书</a></p><p><a href="https://docs.github.com/zh/pages">GitHub Pages 文档 - GitHub 文档</a></p></blockquote><p>GitHub 是一个在线软件源代码托管服务平台，开源免费。<u>GitHub Pages 是 GitHub 提供的一个<strong>静态</strong>网站托管服务，它直接从 GitHub Pages 仓库获取 HTML、CSS 和 JavaScript 静态资源文件。</u></p><blockquote><p>Note：GitHub Pages 仓库是指 name 固定的 GitHub 仓库——<code>&lt;username&gt;.github.io</code>。</p></blockquote><p>GitHub Pages 提供固定的子域名 <code>&lt;username&gt;.github.io</code> 。用户可以通过该域名访问 GitHub Pages 仓库的静态资源文件。GitHub Pages 支持自定义域名。</p><hr><p>GitHub Pages 网站受以下使用限制的约束：</p><ol><li>每个账号只能创建一个 GitHub Pages 网站。</li><li>GitHub Pages 源仓库的建议限制为 1 GB。</li><li>已发布的 GitHub Pages 网站不能大于 1 GB。</li><li>GitHub Pages 站点的软带宽限制为每月 100 GB。“软带宽限制”指的是该网站每月允许的最大数据传输量限制，超过此限制可能会受到限制或额外收费。</li><li>GitHub Pages 站点的软限制为每小时 10 次构建（可超）。如果您使用自定义 GitHub Actions 工作流程构建和发布站点，则此限制不适用。</li></ol><hr><p>“Hexo - Git - Github Pages 仓库（public）” 是一种常用的静态博客架构，简单、免费（$: SAY NO!），但公开。</p><p>先使用 Hexo 生成本地静态博客，再使用 Git 将静态站点 push 到 Github Pages 仓库。这样，一个静态网络博客就构建好了。你可以通过 <code>https://&lt;username&gt;.github.io</code> 访问自己的博客。</p><blockquote><p>Add：早期，很多站主&#x2F;博主考虑到个人网站&#x2F;博客在国内的可访性和访问速度，使用 coding pages 而不是 Github Pages 来部署源站（个人网站&#x2F;博客）。后来，coding pages 项目终止，由此产生的数据丢失及其他问题致使不少博主终止博客，很多有价值的博文也随之消散。部分博文因为 CSDN 的偷取而保留了下来，后来者几乎只能付费从 CSDN 获取早期博主的智慧结晶，见 <a href="https://linux.do/t/topic/494834">如何获取 CSDN 付费文件？ - 开发调优 - LINUX DO</a> 评论区。如果你想要自己的博文还附带分享价值——首先，请备份好数据（Git 是个好选择，Github 勉强够用）；其次，分享精神不懈怠（Github Pages 免去烦恼，Cloudflare Pages 也推荐）。</p></blockquote><p>该架构还有很大的改动空间，取决于你的需求和 money。</p><ul><li><p>如果博客需要评论系统 Waline，可以将它部署到 Vercel。</p><blockquote><p>Tip：GitHub Pages 只支持托管静态资源，而 Waline 涉及数据库交互，是动态的。</p></blockquote></li><li><p>考虑到 GitHub Pages 源仓库的容量限制，博客的图片等资源可以存储到其他位置，在博客中使用链接引用它们。比如，使用阿里云 OSS（Object Storage Service）存储博客的图片等资源。</p></li><li><p>……</p></li></ul><h1 id="3-Blog-Design-Optimization"><a href="#3-Blog-Design-Optimization" class="headerlink" title="3. Blog Design &amp; Optimization"></a>3. Blog Design &amp; Optimization</h1><p>对个人博客而言，<strong>数据安全</strong>、<strong>隐私保护</strong>与<strong>页面性能</strong>（如渲染效率、资源优化等）也是三大核心焦点。</p><blockquote><p>Tip：在博客未商用仅作交流的角度下考虑。如果是商业化项目，用户几乎没有隐私权。</p></blockquote><p><strong>数据安全</strong>是确保数据的<strong>机密性</strong>、<strong>完整性</strong>、<strong>可用性</strong>。（CIA 三元组：Confidentiality，Integrity 和 Availability）</p><ul><li><strong>数据丢失</strong>（如存储故障、误删除）—— 属于可用性问题。</li><li><strong>数据泄露</strong>（如黑客攻击、内部人员窃取）—— 属于机密性问题。</li><li><strong>数据篡改</strong>（如恶意修改）—— 属于完整性问题。</li></ul><p>可以通过加密、访问控制、备份、防篡改机制等技术手段确保数据安全。</p><hr><p><strong>隐私保护</strong>是保障个人对自身数据的<strong>控制权</strong>，确保数据收集、处理、共享符合法律法规（如 GDPR）和用户授权。</p><ul><li>避免过度收集用户数据（如 APP 权限滥用）。</li><li>匿名化&#x2F;去标识化处理（如医疗数据研究）。</li><li>用户知情权与选择权（如隐私政策透明）。</li></ul><p>可以通过数据脱敏、差分隐私、最小化收集原则等技术手段实现隐私保护。</p><p>当个人博客集成第三方服务时需要注意这点。比如评论系统，Disqus 侵犯用户隐私，Valine 存在隐私泄露问题。</p><blockquote><p><a href="https://www.uniconsent.com/zh/blog/disqus-gdpr-consent">Disqus 因违反 GDPR 许可规则被罚款 250 万欧元</a></p></blockquote><hr><p><strong>页面性能</strong>主要关乎用户体验，比如网页加载速度、交互流畅度等。</p><ul><li>CDN（Content Delivery Network），内容分发网络。简单地说，CDN 就是节点服务器缓存数据，供用户就近获取。</li><li>可以通过资源优化（压缩资源，CDN 等）来减少浏览器渲染时间。</li><li>……</li></ul><h1 id="4-Further-use-of-GitHub"><a href="#4-Further-use-of-GitHub" class="headerlink" title="4. Further use of GitHub"></a>4. Further use of GitHub</h1><p>【待实现】GitHub Issues can be used as micro blog.</p><blockquote><p><a href="https://blog.csdn.net/gitblog_00098/article/details/137067617">探索创新：使用 GitHub Issues 构建个人博客的新方式-CSDN 博客</a></p><p><a href="https://io-oi.me/tech/continuous-writing-with-github-issues/">使用 GitHub Issues 持续写作 | reuixiy</a></p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/400962805">使用 GitHub Issues 来写博客 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/687430865">使用 VS Code + Github 搭建个人博客 - 知乎</a></p><p><a href="https://githubrsp.com/2955.html">使用 GitHub Issues 打造个人博客的终极指南 - github 中文站</a></p><blockquote><p><a href="https://blog.ichr.me/post/blog-with-github-issues/">尝试在 GitHub Issues 上写文章并自动同步至博客 | ChrAlpha’s blog</a></p><p><a href="https://blog.ichr.me/post/github-issues-nextjs-blog/">再谈在 GitHub Issues 写作，顺带算是样式开源 | ChrAlpha’s blog</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题の博客美化</title>
    <link href="/posts/Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96.html"/>
    <url>/posts/Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96.html</url>
    
    <content type="html"><![CDATA[<p><code>_config.yml</code> 是本地博客项目配置文件，<code>_config.fluid.yml</code> 是 Fluid 主题配置文件。执行 generate 命令时，Hexo 会将配置数据渲染到 HTML 文件中。本篇仅列出一些常规设置，<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">Fluid 配置指南</a> 有详细的主题配置说明。</p><p>主题配置能作用于主题指定的模块，Fluid 主题将页面划分为三部分，不同页面也有些许差异：</p><ol><li>header（页眉）<ul><li>navigation（导航栏）</li><li>banner（横幅 | 顶部大图）</li></ul></li><li>main（主体）</li><li>footer（页脚）</li></ol><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250608173802990.png"></p><blockquote><p>Tip：可以修改 Fluid 主题代码来改变页面布局及页面元素，使博客更具个人色彩。（没空！）</p></blockquote><p><strong>【注意】：配置文件及其他程序文件要以 utf8 编码，否则涉及中文的页面会出现乱码。</strong></p><blockquote><p><a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/">Hexo博客Fluid主题魔改记录 - KEVIN’S BLOG</a></p><p><a href="https://emoryhuang.cn/blog/1729600336.html">Hexo + Fluid 美化 | EmoryHuang’s Blog</a></p><p><code>https://mrna16.github.io/2024/11/14/【Hexo】Fluid主题美化/</code></p></blockquote><h1 id="1-全局"><a href="#1-全局" class="headerlink" title="1. 全局"></a>1. 全局</h1><h2 id="博客标题和图标"><a href="#博客标题和图标" class="headerlink" title="博客标题和图标"></a>博客标题和图标</h2><blockquote><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87">图标 | Hexo Fluid 用户手册</a></p><p><a href="https://blog.csdn.net/luohaitao/article/details/131386273">优质的10个免费icon图标网站_iconstore-CSDN博客</a></p></blockquote><p>标题：修改配置文件（<code>_config.yml</code>）的 <code>title</code> 属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">title:</span> <span class="hljs-string">shaton沙桐</span><br></code></pre></td></tr></table></figure><p>图标：修改主题配置文件（<code>_config.fluid.yml</code>）的 <code>favicon</code> 属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/image/favicon/shaton.ico</span><span class="hljs-comment"># 对应 source/image/favicon/shaton.ico</span><br><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-comment"># Icon for Apple touch</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/image/favicon/shaton.ico</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425200933444.png" alt="博客标题和图标"></p><h2 id="导航栏：左侧的标题"><a href="#导航栏：左侧的标题" class="headerlink" title="导航栏：左侧的标题"></a>导航栏：左侧的标题</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;shaton沙桐的乐色桶&quot;</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425094632915.png"></p><h2 id="导航栏：menu"><a href="#导航栏：menu" class="headerlink" title="导航栏：menu"></a>导航栏：menu</h2><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95">导航菜单</a></p><p>暂时没这个需求。</p><h2 id="页脚：展示-PV-与-UV-统计"><a href="#页脚：展示-PV-与-UV-统计" class="headerlink" title="页脚：展示 PV 与 UV 统计"></a>页脚：展示 PV 与 UV 统计</h2><ul><li>PV：Page View，页面浏览量。</li><li>UV：Unique Visitor，独立访客数。</li></ul><p>Fluid 主题默认集成了 busuanzi | leancloud | umami，用于展示网站的 PV 与 UV 统计数。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 设置为 true，开启。</span><br>    <span class="hljs-comment"># Options: busuanzi | leancloud | umami</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><span class="hljs-comment"># 暂时使用 busuanzi，不蒜子不需要申请账号，简单易用。</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span> <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><h2 id="页脚：添加博客运行时间"><a href="#页脚：添加博客运行时间" class="headerlink" title="页脚：添加博客运行时间"></a>页脚：添加博客运行时间</h2><blockquote><p>Tip：可以先了解 “其他：注入静态代码片段”，或者直接设置此部分，或者暂时跳过此部分。</p></blockquote><p>首先，在主题配置的 <code>footer.content</code> 部分添加 <code>&lt;div&gt;</code> 标签，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></td></tr></table></figure><p>然后，在站点根目录下创建 <code>source/js/duration.js</code> ，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 注意：文件以 utf8 编码，否则页面中文显示乱码。</span><br><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 设置建站时间（修改为你的时间），格式：月/日/年 时:分:秒</span><br>  <span class="hljs-keyword">var</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;04/07/2025 00:00:00&quot;</span>);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-comment">// 计算时间差（毫秒）</span><br>    <span class="hljs-keyword">var</span> diff = now - startTime;<br><br>    <span class="hljs-comment">// 转换为天、小时、分钟、秒</span><br>    <span class="hljs-keyword">var</span> totalSeconds = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(diff / <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-keyword">var</span> days = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(totalSeconds / (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>));<br>    <span class="hljs-keyword">var</span> hours = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((totalSeconds % (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>)) / (<span class="hljs-number">60</span> * <span class="hljs-number">60</span>));<br>    <span class="hljs-keyword">var</span> minutes = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((totalSeconds % (<span class="hljs-number">60</span> * <span class="hljs-number">60</span>)) / <span class="hljs-number">60</span>);<br>    <span class="hljs-keyword">var</span> seconds = totalSeconds % <span class="hljs-number">60</span>;<br><br>    <span class="hljs-comment">// 补零</span><br>    <span class="hljs-keyword">var</span> hStr = hours.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">var</span> mStr = minutes.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">var</span> sStr = seconds.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> =<br>      <span class="hljs-string">&quot;本站已安全运行&amp;nbsp&quot;</span> + days + <span class="hljs-string">&quot;&amp;nbsp天&amp;nbsp&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> =<br>      hStr + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mStr + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + sStr + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 初次调用</span><br>  <span class="hljs-title function_">updateTime</span>();<br>  <span class="hljs-comment">// 每250毫秒刷新一次</span><br>  <span class="hljs-built_in">setInterval</span>(updateTime, <span class="hljs-number">250</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250427000453897.png" alt="页脚显示博客运行时间"></p><h2 id="强制全局-HTTPS"><a href="#强制全局-HTTPS" class="headerlink" title="强制全局 HTTPS"></a>强制全局 HTTPS</h2><p>将所有请求强制升级为 HTTPS。避免域名升级到 HTTPS 后，站点引用资源出现 HTTP、HTTPS 混用的情况，造成资源无法显示。如是外部资源，需要本身支持 HTTPS。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">force_https:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="全局字体"><a href="#全局字体" class="headerlink" title="全局字体"></a>全局字体</h2><blockquote><p>详情见：<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%A8%E5%B1%80%E5%AD%97%E4%BD%93">配置指南：全局字体</a></p><p>该博文的操作比较繁琐：<a href="https://zhul.in/2023/11/28/use-lxgw-wenkai-in-hexo-fluid/">在 Hexo Fluid 主题中使用霞鹜文楷 - 竹林里有冰的博客</a></p></blockquote><p>虽然官方推荐使用系统自带的字体，而不是额外引入字体（占内存导致浏览器渲染变慢），但改变字体能够让用户在浏览博客时具有更好的视觉体验。</p><p><a href="https://github.com/lxgw/LxgwWenKai">霞鹜文楷</a> 是一款开源中文字体，可免费商用。它字形漂亮，无论是做标题艺术字还是正文阅读都很舒适。</p><hr><p>在主题配置文件引入【霞鹜文楷】css，并应用该字体：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">font:</span><br>  <span class="hljs-comment"># 全局字体族启用【霞鹜文楷】字体。</span><br>  <span class="hljs-attr">font_family:</span> <span class="hljs-string">&quot;LXGW WenKai Screen&quot;</span><br><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-comment"># 引入【霞鹜文楷】css。bootcdn 是稳定、快速、免费的前端开源项目 CDN 加速服务。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://cdn.bootcdn.net/ajax/libs/lxgw-wenkai-screen-webfont/1.7.0/style.min.css</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250426161651277.png"></p><h1 id="2-首页"><a href="#2-首页" class="headerlink" title="2. 首页"></a>2. 首页</h1><h2 id="顶部大图"><a href="#顶部大图" class="headerlink" title="顶部大图"></a>顶部大图</h2><blockquote><p>待参考：<a href="https://zhul.in/2024/09/25/random-banner-backgroud-image-implement-for-hexo-fluid-with-javascript/#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8D%A2%E6%8E%89%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87-API">基于 JavaScript 的 Hexo Fluid 主题 banner 随机背景图实现 - 竹林里有冰的博客</a></p></blockquote><p>主题配置中，每个页面都有名为 <code>banner_img</code> 的属性，可以使用本地图片的路径，也可以为外站链接。</p><p>指向本地图片（本地指定图片）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-comment"># 给出首页设置，其他页面同理。</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/image/banner/粉女.jpg</span><span class="hljs-comment"># 对应 source/image/banner/粉女.jpg</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425100521695.png"></p><p>指向外站链接（外站指定图片或随机图片，取决于外链）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-comment"># 给出首页设置，其他页面同理。</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 图库挺好，就是资源加载很耗时，导致页面性能很差。todo：建立个人图库（没空）。</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://api.seaya.link/web.php?type=file</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.jixiaob.cn/?post=93">【持续更新】75个二次元、三次元随机图API接口分享及预览 - 赵苦瓜のBlog</a></p></blockquote><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425105521241.png"></p><hr><p>主题配置中的 <code>post.banner_img</code> 属性用于文章页统一设置所有博文的顶部大图。如果文章页的每篇博文需要单独设置顶部大图，可以在每篇文档的 Front-matter 部分指定 <code>banner_img</code> 属性值。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: Fluid主题の博客美化<br><span class="hljs-section">banner<span class="hljs-emphasis">_img: /image/banner/粉女.jpg</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br></code></pre></td></tr></table></figure><p><strong>主题配置文件优先级低于 Front-matter。</strong> 如果两处都未设置，则不显示。</p><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425142932942.png" alt="博文页的顶部大图"></p><h2 id="副标题打字机"><a href="#副标题打字机" class="headerlink" title="副标题打字机"></a>副标题打字机</h2><p>如果设置副标题为固定的内容，修改 <code>text</code> 字段即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 默认为 true，即默认开启首页大图中的副标题文字。</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;Cornpoppies, are you still burning, in the rain ...&quot;</span><span class="hljs-comment"># 副标题内容</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425095046842.png" alt="固定的内容"></p><p>如果副标题内容需要变化，也可以通过外链获取变化的内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 默认为 true，即默认开启首页大图中的副标题文字。</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;Cornpoppies, are you still burning, in the rain ...&quot;</span><span class="hljs-comment"># 副标题内容 </span><br>    <span class="hljs-comment"># 通过api接口获取内容，如果请求失败则按 text 字段显示</span><br>    <span class="hljs-attr">api:</span> <br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 默认为 false，即仅按 text 字段显示。设置为 ture，使用外链。</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><span class="hljs-comment"># API 地址，必须返回的是一个 JSON 格式</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br>      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<span class="hljs-comment"># 从请求结果中获取指定字段的值</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425094714301.png" alt="变化的内容"></p><h2 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h2><p>Fluid 主题默认会自动截取文章开头内容作为摘要显示在首页。</p><ul><li>因为文章开头的内容可能并不是摘要，可以在文档的 Front-matter 部分设置 excerpt 属性来取代默认行为。如果 excerpt 属性无值，记得删除该属性。</li><li>如果博文的 title 能够概括其内容，而无需单独列出摘要，可以在主题配置文件中取消自动截取。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 自动截取文章摘要</span><br>  <span class="hljs-comment"># Auto extract post</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><span class="hljs-comment"># 设置为 false，关闭。</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250426214125048.png"></p><h2 id="归档文章-隐藏文章-文章排序"><a href="#归档文章-隐藏文章-文章排序" class="headerlink" title="归档文章 | 隐藏文章 | 文章排序"></a>归档文章 | 隐藏文章 | 文章排序</h2><p>请看官网，略。</p><hr><p>在文档的 Front-matter 部分设置</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">hide: true# 隐藏文章，不在首页和其他归档分类页里展示。（草稿功能被该设置取代）<br></code></pre></td></tr></table></figure><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">archive: true# 文章在首页隐藏，但仍需要在归档分类页里展示。<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">sticky:</span> <span class="hljs-number">100</span> <span class="hljs-meta"># 置顶文章，有置顶图标。sticky 数值越大，该文章越靠前。（文章更新时可以用一下）</span><br></code></pre></td></tr></table></figure><h1 id="3-文章页"><a href="#3-文章页" class="headerlink" title="3. 文章页"></a>3. 文章页</h1><h2 id="文章在首页的封面图"><a href="#文章在首页的封面图" class="headerlink" title="文章在首页的封面图"></a>文章在首页的封面图</h2><p>可以在主题配置文件中统一设置所有博文在首页的封面图：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 首页封面图</span><br>  <span class="hljs-attr">default_index_img:</span>   <br></code></pre></td></tr></table></figure><p>也可以在具体文档的 Front-matter 部分单独设置每篇博文在首页的封面图：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 使用Hexo搭建个人博客<br><span class="hljs-section">index<span class="hljs-emphasis">_img: /image/post/girl.jpg# 对应 source/image/post/girl.jpg</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br></code></pre></td></tr></table></figure><p><strong>主题配置文件优先级低于 Front-matter。</strong> 如果两处都未设置，则不显示。</p><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250425134722903.png" alt="博文在首页的封面图"></p><h2 id="文章标题下方的元信息"><a href="#文章标题下方的元信息" class="headerlink" title="文章标题下方的元信息"></a>文章标题下方的元信息</h2><p>文章标题下方的元信息显示【作者】和【浏览量计数】：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 作者，优先采用 front-matter 部分的 author 字段，其次是 hexo 配置中 author 值</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-string">ture</span><span class="hljs-comment"># 设置为 ture，开启。</span><br>      <br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 设置为 ture，开启。</span><br>      <span class="hljs-comment"># 统计数据来源</span><br>      <span class="hljs-comment"># Options: busuanzi | leancloud | umami</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250426211112710.png"></p><h2 id="在文章开头显示文章更新时间"><a href="#在文章开头显示文章更新时间" class="headerlink" title="在文章开头显示文章更新时间"></a>在文章开头显示文章更新时间</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，</span><br>  <span class="hljs-comment"># 可在文档的 Front-matter 部分设置 `updated` 属性手动指定（和 date 一样格式）。</span><br>  <span class="hljs-comment"># 本人不设置该属性，采用 Hexo 默认读取的时间。</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 设置为 ture，开启。</span><br><br>    <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-attr">date_format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 提示标签类型。不同的类型显示不同的颜色。</span><br>    <span class="hljs-comment"># Options: default | primary | info | success | warning | danger | light</span><br>    <span class="hljs-attr">note_class:</span> <span class="hljs-string">info</span><br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250426211147090.png"></p><h2 id="侧边栏展示当前分类下的文章"><a href="#侧边栏展示当前分类下的文章" class="headerlink" title="侧边栏展示当前分类下的文章"></a>侧边栏展示当前分类下的文章</h2><p>侧边栏【按自定义顺序】展示当前分类下的文章。</p><blockquote><p>Tip：最简单的方式是设置文档 titlie 为 “数字.title” 的形式，然后按 title 顺序排序即可。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 侧边栏展示当前分类下的文章</span><br>  <span class="hljs-attr">category_bar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 设置为 ture，开启。</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 部分指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 文档的 Front-matter 部分指定 `category_bar: true`</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧。</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><span class="hljs-comment"># 采用默认值 left 即可，目录栏默认在右侧。</span><br><br>    <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>    <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>    <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;category_order&quot;</span><span class="hljs-comment"># 文档的 Front-matter 部分指定 `category_order: 数字`</span><br><br>    <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>    <span class="hljs-attr">post_limit:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><hr><p>示例：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-section"># 使用Hexo搭建个人博客.md 的 Front-matter 部分</span><br><br>category<span class="hljs-emphasis">_bar: true</span><br><span class="hljs-emphasis">category_</span>order: 1<br></code></pre></td></tr></table></figure><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-section"># Fluid主题的博客美化.md 的 Front-matter 部分</span><br><br>category<span class="hljs-emphasis">_bar: true</span><br><span class="hljs-emphasis">category_</span>order: 2<br></code></pre></td></tr></table></figure><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250426211339288.png"></p><h2 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h2><blockquote><p><a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">文章页 | Tag 插件</a></p></blockquote><p>【注】：笔者很少用它们，因为它们不太符合笔者的写作习惯。</p><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><p>推荐使用 HTML 形式，而不是代码形式。</p><p>HTML 标签格式：<code>&lt;p class=&quot;note note-primary&quot;&gt;便签内容&lt;/p&gt;</code> 。note-primary 代表一种颜色。 </p><p class="note note-primary">color of primary</p><p class="note note-secondary">color of secondary</p><p class="note note-success">color of success</p><p class="note note-danger">color of danger</p><p class="note note-warning">color of warning</p><p class="note note-info">color of info</p><p class="note note-light">color of light</p><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><p>推荐使用 HTML 形式，而不是代码形式。</p><p>HTML 标签格式：<code>&lt;span class=&quot;label label-primary&quot;&gt;标签内容&lt;/span&gt;</code> 。label-primary 代表一种颜色。 </p><p><span class="label label-primary">primary</span></p><p><span class="label label-default">default</span></p><p><span class="label label-info">info</span></p><p><span class="label label-success">success</span></p><p><span class="label label-warning">warning</span></p><p><span class="label label-danger">danger</span></p><h3 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h3><p>使用折叠块，可以折叠代码、图片、文字等任何内容，你可以在 markdown 中按如下格式：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% fold info @title %&#125;<br>需要折叠的一段内容，支持 markdown<br>&#123;% endfold %&#125;<br></code></pre></td></tr></table></figure><ul><li>info：和行内标签类似的可选参数，primary | default | …</li><li>title：折叠块上的标题</li></ul><hr><p>示例 1：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% fold primary @这是一个折叠块 %&#125;<br>Hello World!<br>&#123;% endfold %&#125;<br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-primary collapsed" data-toggle="collapse" href="#collapse-ed076287" role="button" aria-expanded="false" aria-controls="collapse-ed076287">        <div class="fold-arrow">▶</div>这是一个折叠块      </div>      <div class="fold-collapse collapse" id="collapse-ed076287">        <div class="fold-content">          <p>Hello World!</p>        </div>      </div>    </div><hr><p>示例 2：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% fold success @这也是一个折叠块，折叠代码块 %&#125;<br>​<span class="hljs-code">```yml</span><br><span class="hljs-code"># _config.fluid.yml</span><br><span class="hljs-code">​```</span><br>&#123;% endfold %&#125;<br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-84cc2465" role="button" aria-expanded="false" aria-controls="collapse-84cc2465">        <div class="fold-arrow">▶</div>这也是一个折叠块，折叠代码块      </div>      <div class="fold-collapse collapse" id="collapse-84cc2465">        <div class="fold-content">          <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h1><h2 id="注入静态代码片段（point）"><a href="#注入静态代码片段（point）" class="headerlink" title="注入静态代码片段（point）"></a>注入静态代码片段（point）</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/plugins">插件 | Hexo</a> ，<a href="https://hexo.io/zh-cn/api/injector">注入器（Injector） | Hexo</a></p><p><a href="https://hexo.fluid-dev.com/docs/advance/#hexo-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">注入代码 | Hexo Fluid 用户手册</a></p><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E8%87%AA%E5%AE%9A%E4%B9%89-js-css-html">自定义 JS &#x2F; CSS &#x2F; HTML | Hexo Fluid 用户手册</a></p></blockquote><p>有三种方式注入静态代码片段到生成的 HTML 文件：</p><ol><li>直接使用的 Hexo 提供的脚本与注入器。注入 HTML。</li><li>在 Hexo 脚本中，使用 Fluid 主题提供的注入器。注入 HTML，且支持注入 <code>ejs</code> 代码。</li><li>在 Fluid 主题文件中设置。引入外部的 JS、CSS，或注入 HTML。</li></ol><blockquote><p>Tip：Fluid 主题通过对前者的封装，使得主题配置文件中的设置也能够注入到指定位置。</p></blockquote><h3 id="Hexo-注入"><a href="#Hexo-注入" class="headerlink" title="Hexo 注入"></a>Hexo 注入</h3><p>使用 Hexo 提供的脚本与注入器：</p><ol><li>在站点根目录下创建 scripts 文件夹，里面放入自定义脚本。Hexo 在生成网站时会自动加载它们。</li><li>Hexo 提供 Injector（注入器）钩子函数，用于将静态代码片段注入到生成的 HTML 的 <code>&lt;head&gt;</code> 和&#x2F;或 <code>&lt;body&gt;</code> 中。Hexo 会在 <code>after_render:html</code> 过滤器（在渲染完成后对 JS 进行压缩）之前完成注入。</li></ol><hr><p>injector 函数：<code>hexo.extend.injector.register(entry, value, to);</code></p><ul><li><p>entry （<code>&lt;String&gt;</code>）：在 HTML 中的注入代码的位置。</p><ol><li><code>head_begin</code>：注入在 <code>&lt;head&gt;</code> 之后（默认）</li><li><code>head_end</code>：注入在 <code>&lt;/head&gt;</code> 之前</li><li><code>body_begin</code>：注入在 <code>&lt;body&gt;</code> 之后</li><li><code>body_end</code>：注入在 <code>&lt;/body&gt;</code> 之前</li></ol></li><li><p>value（ <code>&lt;Stirng&gt;</code>|<code>&lt;Function&gt;</code>）：注入的代码片段。除了字符串，也支持返回值为字符串的函数。</p></li><li><p>to（<code>&lt;String&gt;</code>）：哪些页面会被注入代码。</p><ol><li><code>default</code>：注入到每个页面（默认值）</li><li><code>post</code>：只注入到文章页面</li><li>……</li><li>或是其他自定义 layout 名称，比如关于页 <code>about</code></li></ol></li></ul><hr><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"># scripts\inject.<span class="hljs-property">js</span> （执行 hexo g 时，<span class="hljs-title class_">Hexo</span>自动加载此脚本）<br><br># hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(entry, value, to);<br># 将 &lt;div id=<span class="hljs-string">&quot;custom1&quot;</span>&gt;<span class="hljs-number">1</span>&lt;/div&gt; 注入到所有页面的 &lt;body&gt; 之后<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>, <span class="hljs-string">&#x27;&lt;div id=&quot;custom1&quot;&gt;1&lt;/div&gt;&#x27;</span>);<br># 将 &lt;div id=<span class="hljs-string">&quot;custom2&quot;</span>&gt;<span class="hljs-number">2</span>&lt;<span class="hljs-regexp">/div&gt; 注入到文章页面的 &lt;/</span>body&gt; 之前<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">&#x27;&lt;div id=&quot;custom2&quot;&gt;2&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="Fluid-注入"><a href="#Fluid-注入" class="headerlink" title="Fluid 注入"></a>Fluid 注入</h3><p><a href="https://hexo.fluid-dev.com/docs/advance/#fluid-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">Fluid 注入 | Hexo Fluid 用户手册</a></p><h3 id="Fluid-主题配置文件设置注入"><a href="#Fluid-主题配置文件设置注入" class="headerlink" title="Fluid 主题配置文件设置注入"></a>Fluid 主题配置文件设置注入</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># 注入到 `&lt;/body&gt;` 前，形式：&lt;script src=&quot;url&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-attr">custom_js:</span> <span class="hljs-string">/js/custom1.js</span><span class="hljs-comment"># 单文件</span><br><br><span class="hljs-comment"># 指定自定义 css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># 注入到 `&lt;/head&gt;` 前，形式：&lt;link rel=&quot;stylesheet&quot; href=&quot;url&quot;&gt;</span><br><span class="hljs-attr">custom_css:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom2.css</span><span class="hljs-comment"># 多文件，使用&quot;-&quot;分隔不同文件</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom3.css</span><br><br><span class="hljs-comment"># 自定义 &lt;head&gt; 节点中的 HTML 内容</span><br><span class="hljs-attr">custom_head:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;meta name=&quot;key&quot; content=&quot;value&quot;&gt;</span><br><span class="hljs-string">&#x27;</span><br><br><span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），也可用于外部引入 js css 这些操作，注意不要和 post.custom 配置冲突</span><br><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom4.css&quot;&gt;</span><br><span class="hljs-string">&#x27;</span><br><br><span class="hljs-comment"># 自定义 &lt;footer&gt; 节点中的 HTML 内容</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;div&gt;footer.content部分的div块&lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></td></tr></table></figure><h3 id="两种方式注入的位置"><a href="#两种方式注入的位置" class="headerlink" title="两种方式注入的位置"></a>两种方式注入的位置</h3><p>紫色为 Hexo 注入的位置，其他颜色为 Fluid 主题配置文件设置注入的位置（Fluid 注入的位置略）。</p><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250527174138521.png"></p><hr><p>如果你想了解 Fluid 及其主题配置文件设置注入的位置，或者变更这些位置，你可以查看或变更 Fluid 主题文件。</p><ul><li><code>fluid\layout\</code> ：核心布局文件夹，包含各种页面模板（如首页、文章页、标签页等）。查看 <code>layout.ejs</code> 了解大致的页面布局。</li><li><code>fluid\scripts\</code> ：自定义脚本文件夹。Fluid 主题使用 Hexo API 注册的一些模板函数，以及其他通用函数，在页面布局中被使用。</li><li><code>fluid\source\</code> ：主题的静态资源文件夹。<code>js\</code> 目录下的脚本涉及 Fluid 主题集成的插件模块及其他功能。</li></ul><p><img src="Fluid%E4%B8%BB%E9%A2%98%E3%81%AE%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/image-20250527034210100.png"></p><h2 id="一些特效"><a href="#一些特效" class="headerlink" title="一些特效"></a>一些特效</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">custom_js:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/love.js</span> <span class="hljs-comment"># 鼠标点击小爱心❤</span><br>  <span class="hljs-comment"># - //cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxuehua.js # 页面小雪花飘落 </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/Cherry.min.js</span> <span class="hljs-comment"># 页面樱花飘落</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/DynamicLine.min.js</span> <span class="hljs-comment"># 页面动态黑色线条</span><br>  <br>  <span class="hljs-comment"># 该小星星特效是操作 DOM 元素产生的，耗性能，可改为 Canvas 实现。</span><br>  <span class="hljs-comment"># - //cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxingxing.js # 鼠标跟随特效：小星星</span><br>  <span class="hljs-comment"># - //cdn.jsdelivr.net/gh/bynotes/texiao/source/js/caidai.js # 页面动态彩带</span><br>  <span class="hljs-comment"># - //cdn.jsdelivr.net/gh/EmoryHuang/BlogBeautify@1.1/Ribbon.min.js # 页面静态彩带</span><br><br><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://jsd.cdn.zzko.cn/gh/EmoryHuang/BlogBeautify@1.1/gradient.css</span> <span class="hljs-comment"># 渐变打字机</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/shubiao.css</span> <span class="hljs-comment"># 鼠标指针美化</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/gundongtiao.css</span> <span class="hljs-comment"># 滚动条美化</span><br></code></pre></td></tr></table></figure><p>特效分享：</p><ul><li><a href="https://www.bootstrapmb.com/item/15586">webgl鼠标拖着尾巴效果</a></li><li><a href="https://www.bootstrapmb.com/item/14285">动态的边框流动css特效</a></li><li><a href="https://www.bootstrapmb.com/item/15941">JavaScript光标跟踪特效</a></li><li><a href="https://www.bootstrapmb.com/item/15273">canvas动态粒子特效</a></li><li><a href="https://www.bootstrapmb.com/item/3985">鼠标跟随闪闪发光html5动画背景特效</a></li><li><a href="https://www.bootstrapmb.com/item/3267">鼠标跟随svg尾巴特效</a></li><li><a href="https://www.bootstrapmb.com/item/1960">jQuery炫酷前端页面动画代码</a></li></ul><h2 id="双端背景"><a href="#双端背景" class="headerlink" title="双端背景"></a>双端背景</h2><blockquote><p>【舍去 banner，固定背景】：<a href="https://endlesspath.icu/2024/10/12/Fluid%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/#3-2-%E8%83%8C%E6%99%AF%E5%9B%BA%E5%AE%9A%E5%92%8C%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C">Fluid主题安装及配置 - Endlsee-Path的学习记录</a></p></blockquote><p>【注】：专门为 <code>white.webp</code> 和 banner 设置的响应式。为了页面性能，也可以选择舍去 banner，固定背景。</p><p>设置响应式背景：</p><ul><li>根据窗口尺寸区分手机端和电脑端，实时切换背景。（Shit! You can not see the background on the post pages on mobile, except for the bottom!）</li><li>当 banner 占据页面小于一定比例，则显示背景；否则隐藏背景。</li></ul><hr><p>在所有页面的 body 头部添加 div 元素。在所有页面的 body 尾部添加响应式背景程序，用于填充该 div 元素。</p><p><code>scripts/injector.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 嫌弃模板（$&#123;siteRoot&#125;）使用麻烦就去掉这个，暂时不关键。</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">root</span>: siteRoot  =  <span class="hljs-string">&quot;/&quot;</span> &#125; =  hexo.<span class="hljs-property">config</span>;<br><br><span class="hljs-comment">// &lt;div&gt; 注入到所有页面的 &lt;body&gt; 之后，用于 responsive-background.js 自适应背景切换。</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>, <span class="hljs-string">&#x27;&lt;div id=&quot;web_bg&quot;&gt;&lt;/div&gt;&#x27;</span>);<br><span class="hljs-comment">// &lt;script&gt; 注入到所有页面的 &lt;/body&gt; 之前</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">`&lt;script src=&quot;<span class="hljs-subst">$&#123;siteRoot&#125;</span>js/responsive-background.js&quot;&gt;&lt;/script&gt;`</span>);<br></code></pre></td></tr></table></figure><p><code>source/js/responsive-background.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 响应式背景程序 */</span><br><br><span class="hljs-comment">// 定义背景图片链接，url(&#x27;your background address&#x27;)</span><br><span class="hljs-keyword">const</span> mobileBgImageUrl = <span class="hljs-string">&quot;url(&#x27;/image/bg/和泉纱雾mob5.jpg&#x27;)&quot;</span>;<br><span class="hljs-keyword">const</span> desktopBgImageUrl = <span class="hljs-string">&quot;url(&#x27;/image/bg/white.webp&#x27;)&quot;</span>;<br><br><span class="hljs-comment">// 获取元素</span><br><span class="hljs-keyword">const</span> webBg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#web_bg&#x27;</span>);<br><span class="hljs-keyword">const</span> banner = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#banner&#x27;</span>);<br><br><span class="hljs-comment">// 控制是否在请求动画帧中执行</span><br><span class="hljs-keyword">let</span> isUpdating = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 设置背景图片的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setBackground</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// window.innerWidth &lt; 768，用来区分手机端和电脑端。</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">768</span>) &#123;<br>    <span class="hljs-comment">// 手机端背景</span><br>    webBg.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = mobileBgImageUrl;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 电脑端背景</span><br>    webBg.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = desktopBgImageUrl;<br>  &#125;<br>  <span class="hljs-comment">// 保持其他样式</span><br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;fixed&#x27;</span>;<br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">&#x27;0&#x27;</span>;<br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&#x27;0&#x27;</span>;<br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;100%&#x27;</span>;<br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&#x27;100%&#x27;</span>;<br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">zIndex</span> = <span class="hljs-string">&#x27;-1&#x27;</span>;<br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundSize</span> = <span class="hljs-string">&#x27;cover&#x27;</span>;<br>  webBg.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundRepeat</span> = <span class="hljs-string">&#x27;no-repeat&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// 根据 banner 在页面的占比，决定显示/隐藏 web_bg（背景）。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateVisibility</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 每次滚动时获取元素在视口中的位置和尺寸。</span><br>  <span class="hljs-comment">// bottom：元素底部距离视口顶部的距离。top：元素顶部距离视口顶部的距离。height：元素高度。</span><br>  <span class="hljs-keyword">const</span> rect = banner.<span class="hljs-title function_">getBoundingClientRect</span>();<br><br>  <span class="hljs-comment">// 设置阈值。比如：视口高度（界面高度）的20%。</span><br>  <span class="hljs-keyword">const</span> threshold = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> * <span class="hljs-number">0.2</span>;<br><br>  <span class="hljs-keyword">if</span> (rect.<span class="hljs-property">bottom</span> &gt; threshold) &#123;<br>    <span class="hljs-comment">// 若 banner 底部距离视口顶部大于阈值，则隐藏背景。</span><br>    webBg.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 否则显示背景。</span><br>    webBg.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;<br>  &#125;<br>  isUpdating = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 允许下一帧更新</span><br>&#125;<br><br><span class="hljs-comment">// 绑定 load 事件，页面加载完成后调用。</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setBackground</span>();       <span class="hljs-comment">// 页面加载完成后设置背景</span><br>  <span class="hljs-title function_">updateVisibility</span>();    <span class="hljs-comment">// 初次检测</span><br>&#125;);<br><br><span class="hljs-comment">// 绑定 resize 事件，窗口变化时调用。</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setBackground</span>();       <span class="hljs-comment">// 改变窗口时设置背景</span><br>  <span class="hljs-comment">// 立即检测 banner 位置，调整背景显示状态。</span><br>  <span class="hljs-keyword">if</span> (!isUpdating) &#123;<br>    isUpdating = <span class="hljs-literal">true</span>;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(updateVisibility);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 绑定滚动事件，鼠标滚动时调用。</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!isUpdating) &#123;<br>    isUpdating = <span class="hljs-literal">true</span>;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(updateVisibility);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>使用 <code>requestAnimationFrame</code> 确保在每一帧只调用一次 <code>updateVisibility</code> ，避免滚动频繁触发造成的性能问题。<code>isUpdating</code> 变量用来避免 <code>requestAnimationFrame</code> 重复请求动画帧。</li><li>在 <code>resize</code> 事件中也调用 <code>setBackground()</code>，确保背景在窗口变化时正确设置。</li></ul><blockquote><p>滚动事件会在用户滚动时频繁触发，可能每秒触发几十次甚至上百次。每次触发，调用 <code>getBoundingClientRect()</code> 和修改样式会触发浏览器的布局（reflow）和绘制（repaint），非常耗费性能，导致页面卡顿。</p><p><code>requestAnimationFrame</code> 是浏览器提供的 API，用于在浏览器下一次重绘之前执行回调函数。它会在浏览器准备好绘制下一帧时调用，通常每秒大约 60 次（每 16 毫秒左右），但如果多次请求，浏览器会合并成一次调用，避免多次重复执行。</p><p>在滚动或窗口变化事件中，设置一个标志（如<code>isUpdating</code>）。确保在一帧中只发起一次 <code>requestAnimationFrame</code> 请求。控制请求频率，防止请求堆积。最终实现每一帧最多只执行一次 <code>updateVisibility</code>。</p></blockquote><h2 id="文章时效性提示"><a href="#文章时效性提示" class="headerlink" title="文章时效性提示"></a>文章时效性提示</h2><blockquote><p>【发布时间提示】<a href="https://hexo.fluid-dev.com/posts/hexo-injector/#%E6%96%87%E7%AB%A0%E6%97%B6%E6%95%88%E6%80%A7%E6%8F%90%E7%A4%BA">通过 Hexo 5 注入器为主题添加新功能 - Hexo Theme Fluid</a></p></blockquote><p>【更新时间提示】只给出代码，笔者未使用。笔者已经在文章开头显示文章更新时间。</p><p><code>scripts/injector.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// script 注入到文章页面的 &lt;/body&gt; 之前</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">`&lt;script src=&quot;/js/articleAgeWarning.js&quot;&gt;&lt;/script&gt;`</span>, <span class="hljs-string">&#x27;post&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>source/js/articleAgeWarning.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 获取特定的meta元素</span><br>  <span class="hljs-keyword">var</span> times = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;meta[property=&quot;article:modified_time&quot;]&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (times.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span>; &#125;<span class="hljs-comment">// 没有时间元素，退出</span><br>  <span class="hljs-comment">// 获取所有类名为&#x27;post-content&#x27;的元素</span><br>  <span class="hljs-keyword">var</span> posts = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;post-content&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (posts.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span>; &#125; <span class="hljs-comment">// 没有文章内容，退出</span><br><br>  <span class="hljs-keyword">var</span> updateTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(times[<span class="hljs-number">0</span>].<span class="hljs-property">content</span>);  <span class="hljs-comment">// 文章更新时间</span><br>  <span class="hljs-keyword">var</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()  <span class="hljs-comment">// 当前时间戳（毫秒）</span><br>  <span class="hljs-keyword">var</span> interval = <span class="hljs-built_in">parseInt</span>(now - updateTime)<span class="hljs-comment">// 时间差（毫秒）</span><br>   <span class="hljs-comment">// 如果发布时间超过30天（30天*24小时*3600秒*1000毫秒）</span><br>  <span class="hljs-keyword">if</span> (interval &gt; <span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>*<span class="hljs-number">1000</span>)&#123;<br>    <span class="hljs-keyword">var</span> days = <span class="hljs-built_in">parseInt</span>(interval / <span class="hljs-number">86400000</span>)<span class="hljs-comment">// 计算天数（毫秒转天）</span><br>    <span class="hljs-comment">// 在文章内容前插入提醒信息</span><br>    posts[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;div class=&quot;note note-warning&quot; style=&quot;font-size:0.9rem&quot;&gt;&lt;p&gt;&#x27;</span> +<br>      <span class="hljs-string">&#x27;&lt;div class=&quot;h6&quot;&gt;文章时效性提示&lt;/div&gt;&lt;p&gt;这是一篇更新于 &#x27;</span> + days + <span class="hljs-string">&#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&#x27;</span> +<br>      <span class="hljs-string">&#x27;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;&#x27;</span> + posts[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span>;<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="页面：HTML-代码"><a href="#页面：HTML-代码" class="headerlink" title="页面：HTML 代码"></a>页面：HTML 代码</h2><p><a href="https://hexo.fluid-dev.com/posts/fluid-write/#%E5%96%84%E7%94%A8-html">搭配 Fluid 如何优雅的写一篇文章 - Hexo Theme Fluid</a></p><p>在 Markdown 中插入一些简单的 HTML 代码。</p><p>【页内跳转】和【iframe 页面镶套】可能有点用，虽然它们也不符合笔者的写作习惯。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://prettier.io/playground/">Prettier Playground（在线网站）</a>：支持 JavaScript、TypeScript、CSS、JSON 等多种格式化。粘贴代码，实时预览格式化效果，还可以自定义配置。</p><p>（用 VSCode + Prettier 编辑文档得了！）</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链接留档</title>
    <link href="/posts/%E9%93%BE%E6%8E%A5%E7%95%99%E6%A1%A3.html"/>
    <url>/posts/%E9%93%BE%E6%8E%A5%E7%95%99%E6%A1%A3.html</url>
    
    <content type="html"><![CDATA[<p>Typora 换行： </p><ul><li>在非源代码模式下，键入 enter 是插入两个换行符。键入 enter+shift 是插入一个换行符。</li><li>在源代码模式下，键入 enter | enter+shift 都是插入一个换行符。</li></ul><p> <a href="https://www.typora.net/429.html">空格和换行符 | typora中文网</a></p><p>……</p>]]></content>
    
    
    <categories>
      
      <category>待定</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>marked（Hexo默认的Markdown渲染插件）的部分源码注释</title>
    <link href="/posts/marked%EF%BC%88Hexo%E9%BB%98%E8%AE%A4%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E6%8F%92%E4%BB%B6%EF%BC%89%E7%9A%84%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A.html"/>
    <url>/posts/marked%EF%BC%88Hexo%E9%BB%98%E8%AE%A4%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E6%8F%92%E4%BB%B6%EF%BC%89%E7%9A%84%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A.html</url>
    
    <content type="html"><![CDATA[<p><code>node_modules/hexo-renderer-marked/lib/renderer.js</code> 源代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在源代码中添加 `console.log()` ，执行 generate 命令时，查看控制台输出的测试数据。clean 不能漏！</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; marked &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;marked&#x27;</span>);<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">JSDOM</span>,<br>  createDOMPurify;<br><br><span class="hljs-keyword">const</span> &#123; encodeURL, slugize, stripHTML, url_for, isExternalLink, <span class="hljs-attr">escapeHTML</span>: <span class="hljs-built_in">escape</span>, <span class="hljs-attr">unescapeHTML</span>: <span class="hljs-built_in">unescape</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hexo-util&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; basename, dirname, extname, join &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>).<span class="hljs-property">posix</span>;<br><span class="hljs-keyword">const</span> rATag = <span class="hljs-regexp">/&lt;a(?:\s+?|\s+?[^&lt;&gt;]+\s+?)?href=[&quot;&#x27;](?:#)([^&lt;&gt;&quot;&#x27;]+)[&quot;&#x27;][^&lt;&gt;]*&gt;/i</span>;<br><span class="hljs-keyword">const</span> rDlSyntax = <span class="hljs-regexp">/(?:^|\s)(\S.+)&lt;br&gt;:\s+(\S.+)/</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">anchorId</span> = (<span class="hljs-params">str, transformOption</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">slugize</span>(<span class="hljs-title function_">stripHTML</span>(<span class="hljs-built_in">unescape</span>(str)).<span class="hljs-title function_">trim</span>(), &#123; <span class="hljs-attr">transform</span>: transformOption &#125;);<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mangleEmail</span>(<span class="hljs-params">text</span>) &#123;<br>  <span class="hljs-keyword">let</span> out = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">let</span> i,<br>    ch;<br><br>  <span class="hljs-keyword">const</span> l = text.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; l; i++) &#123;<br>    ch = text.<span class="hljs-title function_">charCodeAt</span>(i);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span>) &#123;<br>      ch = <span class="hljs-string">&#x27;x&#x27;</span> + ch.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br>    &#125;<br>    out += <span class="hljs-string">&#x27;&amp;#&#x27;</span> + ch + <span class="hljs-string">&#x27;;&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-keyword">const</span> renderer = &#123;<br>  <span class="hljs-comment">// Add id attribute to headings</span><br>  <span class="hljs-title function_">heading</span>(<span class="hljs-params">&#123; tokens, depth: level &#125;</span>) &#123;<br>    <span class="hljs-keyword">let</span> text = <span class="hljs-variable language_">this</span>.<span class="hljs-property">parser</span>.<span class="hljs-title function_">parseInline</span>(tokens);<br>    <span class="hljs-keyword">const</span> &#123; anchorAlias, headerIds, modifyAnchors, _headingId &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>;<br><br>    <span class="hljs-keyword">if</span> (!headerIds) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;h<span class="hljs-subst">$&#123;level&#125;</span>&gt;<span class="hljs-subst">$&#123;text&#125;</span>&lt;/h<span class="hljs-subst">$&#123;level&#125;</span>&gt;`</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> transformOption = modifyAnchors;<br>    <span class="hljs-keyword">let</span> id = <span class="hljs-title function_">anchorId</span>(text, transformOption);<br>    <span class="hljs-keyword">const</span> headingId = _headingId;<br><br>    <span class="hljs-keyword">const</span> anchorAliasOpt = anchorAlias &amp;&amp; text.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;&lt;a href=&quot;#&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (anchorAliasOpt) &#123;<br>      <span class="hljs-keyword">const</span> customAnchor = text.<span class="hljs-title function_">match</span>(rATag)[<span class="hljs-number">1</span>];<br>      id = <span class="hljs-title function_">anchorId</span>(customAnchor, transformOption);<br>    &#125;<br><br>    <span class="hljs-comment">// Add a number after id if repeated</span><br>    <span class="hljs-keyword">if</span> (headingId[id]) &#123;<br>      id += <span class="hljs-string">`-<span class="hljs-subst">$&#123;headingId[id]++&#125;</span>`</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      headingId[id] = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (anchorAliasOpt) &#123;<br>      text = text.<span class="hljs-title function_">replace</span>(rATag, <span class="hljs-function">(<span class="hljs-params">str, alias</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(alias, id);<br>      &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// add headerlink</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;h<span class="hljs-subst">$&#123;level&#125;</span> id=&quot;<span class="hljs-subst">$&#123;id&#125;</span>&quot;&gt;&lt;a href=&quot;#<span class="hljs-subst">$&#123;id&#125;</span>&quot; class=&quot;headerlink&quot; title=&quot;<span class="hljs-subst">$&#123;stripHTML(text)&#125;</span>&quot;&gt;&lt;/a&gt;<span class="hljs-subst">$&#123;text&#125;</span>&lt;/h<span class="hljs-subst">$&#123;level&#125;</span>&gt;`</span>;<br>  &#125;,<br><br>  <span class="hljs-title function_">link</span>(<span class="hljs-params">&#123; tokens, href, title &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> text = <span class="hljs-variable language_">this</span>.<span class="hljs-property">parser</span>.<span class="hljs-title function_">parseInline</span>(tokens);<br>    <span class="hljs-keyword">const</span> &#123; external_link, sanitizeUrl, hexo, mangle &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">url</span>: urlCfg &#125; = hexo.<span class="hljs-property">config</span>;<br><br>    <span class="hljs-keyword">if</span> (sanitizeUrl) &#123;<br>      <span class="hljs-keyword">if</span> (href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;javascript:&#x27;</span>) || href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;vbscript:&#x27;</span>) || href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;data:&#x27;</span>)) &#123;<br>        href = <span class="hljs-string">&#x27;&#x27;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mangle) &#123;<br>      <span class="hljs-keyword">if</span> (href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;mailto:&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">const</span> email = href.<span class="hljs-title function_">substring</span>(<span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">const</span> mangledEmail = <span class="hljs-title function_">mangleEmail</span>(email);<br><br>        href = <span class="hljs-string">`mailto:<span class="hljs-subst">$&#123;mangledEmail&#125;</span>`</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> out = <span class="hljs-string">&#x27;&lt;a href=&quot;&#x27;</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      out += <span class="hljs-title function_">encodeURL</span>(href);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      out += href;<br>    &#125;<br><br>    out += <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span> (title) &#123;<br>      out += <span class="hljs-string">` title=&quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(title)&#125;</span>&quot;`</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (external_link) &#123;<br>      <span class="hljs-keyword">const</span> target = <span class="hljs-string">&#x27; target=&quot;_blank&quot;&#x27;</span>;<br>      <span class="hljs-keyword">const</span> noopener = <span class="hljs-string">&#x27; rel=&quot;noopener&quot;&#x27;</span>;<br>      <span class="hljs-keyword">const</span> nofollowTag = <span class="hljs-string">&#x27; rel=&quot;noopener external nofollow noreferrer&quot;&#x27;</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isExternalLink</span>(href, urlCfg, external_link.<span class="hljs-property">exclude</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (external_link.<span class="hljs-property">enable</span> &amp;&amp; external_link.<span class="hljs-property">nofollow</span>) &#123;<br>          out += target + nofollowTag;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (external_link.<span class="hljs-property">enable</span>) &#123;<br>          out += target + noopener;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (external_link.<span class="hljs-property">nofollow</span>) &#123;<br>          out += nofollowTag;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    out += <span class="hljs-string">`&gt;<span class="hljs-subst">$&#123;text&#125;</span>&lt;/a&gt;`</span>;<br>    <span class="hljs-keyword">return</span> out;<br>  &#125;,<br><br>  <span class="hljs-comment">// Support Basic Description Lists</span><br>  <span class="hljs-title function_">paragraph</span>(<span class="hljs-params">&#123; tokens &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> text = <span class="hljs-variable language_">this</span>.<span class="hljs-property">parser</span>.<span class="hljs-title function_">parseInline</span>(tokens);<br>    <span class="hljs-keyword">const</span> &#123; descriptionLists = <span class="hljs-literal">true</span> &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>;<br><br>    <span class="hljs-keyword">if</span> (descriptionLists &amp;&amp; text.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;&lt;br&gt;:&#x27;</span>)) &#123;<br>      <span class="hljs-keyword">if</span> (rDlSyntax.<span class="hljs-title function_">test</span>(text)) &#123;<br>        <span class="hljs-keyword">return</span> text.<span class="hljs-title function_">replace</span>(rDlSyntax, <span class="hljs-string">&#x27;&lt;dl&gt;&lt;dt&gt;$1&lt;/dt&gt;&lt;dd&gt;$2&lt;/dd&gt;&lt;/dl&gt;&#x27;</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;p&gt;<span class="hljs-subst">$&#123;text&#125;</span>&lt;/p&gt;\n`</span>;<br>  &#125;,<br><br>  <span class="hljs-comment">// Prepend root to image path</span><br>  <span class="hljs-title function_">image</span>(<span class="hljs-params">&#123; href, title, text &#125;</span>) &#123;<br><span class="hljs-comment">// href 是引用路径。比如，md 文档中引用本地图片的 md 语法：![](test/1.jpg)，&quot;test/1.jpg&quot; 就是 href。</span><br><span class="hljs-comment">//console.log(&quot;href 0: &quot; + href );</span><br><br>    <span class="hljs-keyword">const</span> &#123; options &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> &#123; hexo &#125; = options;<br>    <span class="hljs-keyword">const</span> &#123; relative_link &#125; = hexo.<span class="hljs-property">config</span>;<br>    <span class="hljs-keyword">const</span> &#123; lazyload, figcaption, prependRoot, postPath &#125; = options;<br><br><span class="hljs-comment">// 如果 href 不是外部资源（非#锚点、非协议相对路径、非HTTP(S)绝对路径）、relative_link 未启用、prependRoot 选项启用，执行代码块。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">锚点定位：#about；协议相对路径：//cdn.example.com/logo.png；绝对URL：&quot;http://&quot; 或 &quot;https://&quot; 开头的路径。</span><br><span class="hljs-comment">relative_link 默认 false；prependRoot 默认 true。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^(#|\/\/|http(s)?:)/</span>.<span class="hljs-title function_">test</span>(href) &amp;&amp; !relative_link &amp;&amp; prependRoot) &#123;<br>  <span class="hljs-comment">// 符合条件的例子：&quot;test/1.jpg&quot; 和 &quot;/test/2.jpg&quot;</span><br>  <br>  <span class="hljs-comment">// 如果 href 是相对路径格式的本地资源，且 postPath 为真值，执行代码块。</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">postPath 参考 module.exports = function(data, options) &#123;...&#125; 部分</span><br><span class="hljs-comment">postPath 默认声明赋值为 &#x27;&#x27;，是假值。</span><br><span class="hljs-comment">当 marked.postAsset 选项启用时，postPath 为真值，例如 &quot;source/_posts/test&quot;。</span><br><span class="hljs-comment">  */</span><br>      <span class="hljs-keyword">if</span> (!href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/&#x27;</span>) &amp;&amp; !href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;\\&#x27;</span>) &amp;&amp; postPath) &#123;<br><span class="hljs-comment">// 符合条件的例子：&quot;test/1.jpg&quot;</span><br><br><span class="hljs-comment">// 获取文章资源文件夹的模型。</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">PostAsset</span> = hexo.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;PostAsset&#x27;</span>);<br>        <span class="hljs-comment">// findById requires forward slash</span><br><span class="hljs-comment">// 通过【拼接的路径】定位资源。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">postPath 与【常规的 md 语法引用的相对路径】拼接而得到的路径是错误的。</span><br><span class="hljs-comment">例如：postPath 为 source/_posts/test，</span><br><span class="hljs-comment">常规的相对路径为 test/1.jpg，</span><br><span class="hljs-comment">source/_posts/test.md （语法格式：![](test/1.jpg)）</span><br><span class="hljs-comment">source/_posts/test/1.jpg</span><br><span class="hljs-comment">两者拼接得到的路径为 source/_posts/test/test/1.jpg，通过该路径是获取不到 1.jpg 资源的。</span><br><span class="hljs-comment">换句话说，下面的 href = asset.path 并不会被执行，</span><br><span class="hljs-comment">href 不会是资源的真实路径（posts/test/1.jpg），而仅是原值（test/1.jpg）。</span><br><span class="hljs-comment">*/</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">而 postPath 与无法显示图片的相对路径拼接得到的路径才能获取到资源。</span><br><span class="hljs-comment">例如：postPath 为 source/_posts/test，</span><br><span class="hljs-comment">非常规的相对路径为 1.jpg，</span><br><span class="hljs-comment">source/_posts/test.md （语法格式：![](1.jpg)，文档无法显示图片）</span><br><span class="hljs-comment">source/_posts/test/1.jpg</span><br><span class="hljs-comment">两者拼接得到的路径为 source/_posts/test/1.jpg，通过该路径能获取到 1.jpg 资源。</span><br><span class="hljs-comment">然后，经过下面的 href = asset.path，href 重新赋值为资源的真实路径。</span><br><span class="hljs-comment">这是 hexo 官方教程给出的处理方式！！！相当糟糕！！！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// console.log(&quot;postPath/href: &quot; + join(postPath, href.replace(/\\/g, &#x27;/&#x27;)));</span><br><span class="hljs-keyword">const</span> asset = <span class="hljs-title class_">PostAsset</span>.<span class="hljs-title function_">findById</span>(<span class="hljs-title function_">join</span>(postPath, href.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\/g</span>, <span class="hljs-string">&#x27;/&#x27;</span>)));<br><br><span class="hljs-comment">// if (asset) console.log(&quot;---asset---&quot; + asset);</span><br><br>        <span class="hljs-comment">// asset.path is backward slash in Windows</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">如果资源存在，将 href 重新赋值为 asset.path。</span><br><span class="hljs-comment">asset.path 是资源的真实全路径，例如 posts/test/1.jpg，目录部分是 【permalink结构】。</span><br><span class="hljs-comment">*/</span><br>        <span class="hljs-keyword">if</span> (asset) href = asset.<span class="hljs-property">path</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\/g</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>      &#125;<br>  <br>  <span class="hljs-comment">//console.log(&quot;href 1:&quot; + href );</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  核心路径处理函数。</span><br><span class="hljs-comment">  例如：当 marked.prependRoot = true 时（默认值为 true），prepend root 值到相对路径内部。</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">//console.log(&quot;url_for.call(hexo, href): &quot; + href );</span><br>      href = url_for.<span class="hljs-title function_">call</span>(hexo, href);<br>    &#125;<br>    <span class="hljs-keyword">let</span> out = <span class="hljs-string">`&lt;img src=&quot;<span class="hljs-subst">$&#123;encodeURL(href)&#125;</span>&quot;`</span>;<br>    <span class="hljs-keyword">if</span> (text) out += <span class="hljs-string">` alt=&quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(text)&#125;</span>&quot;`</span>;<br>    <span class="hljs-keyword">if</span> (title) out += <span class="hljs-string">` title=&quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(title)&#125;</span>&quot;`</span>;<br>    <span class="hljs-keyword">if</span> (lazyload) out += <span class="hljs-string">&#x27; loading=&quot;lazy&quot;&#x27;</span>;<br><br>    out += <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (figcaption &amp;&amp; text) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;figure&gt;<span class="hljs-subst">$&#123;out&#125;</span>&lt;figcaption aria-hidden=&quot;true&quot;&gt;<span class="hljs-subst">$&#123;text&#125;</span>&lt;/figcaption&gt;&lt;/figure&gt;`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> out;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// https://github.com/markedjs/marked/blob/b6773fca412c339e0cedd56b63f9fa1583cfd372/src/Lexer.js#L8-L24</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">smartypants</span> = (<span class="hljs-params">str, quotes</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [openDbl, closeDbl, openSgl, closeSgl] = <span class="hljs-keyword">typeof</span> quotes === <span class="hljs-string">&#x27;string&#x27;</span> &amp;&amp; quotes.<span class="hljs-property">length</span> === <span class="hljs-number">4</span><br>    ? quotes<br>    : [<span class="hljs-string">&#x27;\u201c&#x27;</span>, <span class="hljs-string">&#x27;\u201d&#x27;</span>, <span class="hljs-string">&#x27;\u2018&#x27;</span>, <span class="hljs-string">&#x27;\u2019&#x27;</span>];<br><br>  <span class="hljs-keyword">return</span> str<br>    <span class="hljs-comment">// em-dashes</span><br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/---/g</span>, <span class="hljs-string">&#x27;\u2014&#x27;</span>)<br>    <span class="hljs-comment">// en-dashes</span><br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/--/g</span>, <span class="hljs-string">&#x27;\u2013&#x27;</span>)<br>    <span class="hljs-comment">// opening singles</span><br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(^|[-\u2014/([&#123;&quot;\s])&#x27;/g</span>, <span class="hljs-string">&#x27;$1&#x27;</span> + openSgl)<br>    <span class="hljs-comment">// closing singles &amp; apostrophes</span><br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, closeSgl)<br>    <span class="hljs-comment">// opening doubles</span><br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(^|[-\u2014/([&#123;\u2018\s])&quot;/g</span>, <span class="hljs-string">&#x27;$1&#x27;</span> + openDbl)<br>    <span class="hljs-comment">// closing doubles</span><br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, closeDbl)<br>    <span class="hljs-comment">// ellipses</span><br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.&#123;3&#125;/g</span>, <span class="hljs-string">&#x27;\u2026&#x27;</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> tokenizer = &#123;<br>  <span class="hljs-comment">// Support autolink option</span><br>  <span class="hljs-title function_">url</span>(<span class="hljs-params">src</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; autolink &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>;<br><br>    <span class="hljs-keyword">if</span> (!autolink) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// return false to use original url tokenizer</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;,<br><br>  <span class="hljs-comment">// Override smartypants</span><br>  <span class="hljs-title function_">inlineText</span>(<span class="hljs-params">src</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; options, rules &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> &#123; quotes, <span class="hljs-attr">smartypants</span>: isSmarty &#125; = options;<br><br>    <span class="hljs-comment">// https://github.com/markedjs/marked/blob/b6773fca412c339e0cedd56b63f9fa1583cfd372/src/Tokenizer.js#L643-L658</span><br>    <span class="hljs-keyword">const</span> cap = rules.<span class="hljs-property">inline</span>.<span class="hljs-property">text</span>.<span class="hljs-title function_">exec</span>(src);<br>    <span class="hljs-keyword">if</span> (cap) &#123;<br>      <span class="hljs-keyword">let</span> text;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">lexer</span>.<span class="hljs-property">state</span>.<span class="hljs-property">inRawBlock</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">rules</span>.<span class="hljs-property">inline</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">exec</span>(src)) &#123;<br>        text = cap[<span class="hljs-number">0</span>];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        text = <span class="hljs-built_in">escape</span>(isSmarty ? <span class="hljs-title function_">smartypants</span>(cap[<span class="hljs-number">0</span>], quotes) : cap[<span class="hljs-number">0</span>]);<br>      &#125;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;text&#x27;</span>,<br>        <span class="hljs-attr">raw</span>: cap[<span class="hljs-number">0</span>],<br>        text<br>      &#125;;<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">data, options</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; post_asset_folder, <span class="hljs-attr">marked</span>: markedCfg, source_dir &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">const</span> &#123; prependRoot, postAsset, dompurify &#125; = markedCfg;<br>  <span class="hljs-keyword">const</span> &#123; path, text &#125; = data;<br><br>  marked.<span class="hljs-property">defaults</span>.<span class="hljs-property">extensions</span> = <span class="hljs-literal">null</span>;<br>  marked.<span class="hljs-property">defaults</span>.<span class="hljs-property">tokenizer</span> = <span class="hljs-literal">null</span>;<br>  marked.<span class="hljs-property">defaults</span>.<span class="hljs-property">renderer</span> = <span class="hljs-literal">null</span>;<br>  marked.<span class="hljs-property">defaults</span>.<span class="hljs-property">hooks</span> = <span class="hljs-literal">null</span>;<br>  marked.<span class="hljs-property">defaults</span>.<span class="hljs-property">walkTokens</span> = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">// exec filter to extend marked</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">execFilterSync</span>(<span class="hljs-string">&#x27;marked:use&#x27;</span>, marked.<span class="hljs-property">use</span>, &#123; <span class="hljs-attr">context</span>: <span class="hljs-variable language_">this</span> &#125;);<br><br>  <span class="hljs-comment">// exec filter to extend renderer</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">execFilterSync</span>(<span class="hljs-string">&#x27;marked:renderer&#x27;</span>, renderer, &#123; <span class="hljs-attr">context</span>: <span class="hljs-variable language_">this</span> &#125;);<br><br>  <span class="hljs-comment">// exec filter to extend tokenizer</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">execFilterSync</span>(<span class="hljs-string">&#x27;marked:tokenizer&#x27;</span>, tokenizer, &#123; <span class="hljs-attr">context</span>: <span class="hljs-variable language_">this</span> &#125;);<br><br>  <span class="hljs-keyword">const</span> extensions = [];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">execFilterSync</span>(<span class="hljs-string">&#x27;marked:extensions&#x27;</span>, extensions, &#123; <span class="hljs-attr">context</span>: <span class="hljs-variable language_">this</span> &#125;);<br>  marked.<span class="hljs-title function_">use</span>(&#123; extensions &#125;);<br><br>  <span class="hljs-keyword">let</span> postPath = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-comment">// 如果文章（md文档）存在、启用文章资源文件夹、prependRoot选项启用、postAsset选项启用，执行代码块。</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  post_asset_folder 默认 false，设置 true 开启。</span><br><span class="hljs-comment">  marked.prependRoot 默认为 true。marked.postAsset 默认为 false。</span><br><span class="hljs-comment">  path是特定文章在磁盘绝对路径，例如 &quot;E:\ningc5-blog\hexo\source\_posts\test.md&quot;。</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (path &amp;&amp; post_asset_folder &amp;&amp; prependRoot &amp;&amp; postAsset) &#123;<br><span class="hljs-comment">// 获取文章的模型，包含元数据、所有文章的部分数据和其他信息。</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Post</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;Post&#x27;</span>);<br>    <span class="hljs-comment">// Windows compatibility, Post.findOne() requires forward slash</span><br><span class="hljs-comment">// 获取特定文章的全路径（相对于资源文件夹）。</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    this.source_dir.length是资源文件夹在磁盘绝对路径的长度，例如 &quot;E:\ningc5-blog\hexo\source\&quot;，长度为 27。</span><br><span class="hljs-comment">    path.substring(this.source_dir.length)，截取文章相对于资源文件夹的路径并替换\\为/，例如 &quot;_posts/test.md&quot;。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">const</span> source = path.<span class="hljs-title function_">substring</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">source_dir</span>.<span class="hljs-property">length</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\/g</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><br><span class="hljs-comment">// 通过该路径获取特定文章数据。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">文章数据中有该文章的输出目录（post.path），与permalink配置项的值结构有关。</span><br><span class="hljs-comment">例如：</span><br><span class="hljs-comment">当 &quot;permalink=posts/:name/&quot; 时，&quot;path&quot;:&quot;posts/test/&quot;；输出到该目录下的 index.html。</span><br><span class="hljs-comment">当 &quot;permalink=posts/:name.html&quot; 时，&quot;path&quot;:&quot;posts/test.html&quot;；输出到 test.html。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">const</span> post = <span class="hljs-title class_">Post</span>.<span class="hljs-title function_">findOne</span>(&#123; source &#125;);<br><br><span class="hljs-comment">// if (post) console.log(&quot;if post exist, post: &quot; + post);</span><br><br>    <span class="hljs-keyword">if</span> (post) &#123;<br>  <span class="hljs-comment">// 从 post 对象中提取 source 属性，并将其重命名为 postSource。post.source，例如 &quot;_posts/test.md&quot;。</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">source</span>: postSource &#125; = post;<br>  <span class="hljs-comment">// 将 source_dir（资源目录）、postSource 的目录部分、以及 postSource 的文件名（不带扩展名）拼接成一个完整路径。</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  source_dir 配置项，默认值为 source；</span><br><span class="hljs-comment">  dirname(postSource) 获取 postSource 的目录部分，例如 &quot;_posts&quot;；</span><br><span class="hljs-comment">  extname(postSource) 获取 postSource 的扩展名，例如 &quot;.md&quot;；</span><br><span class="hljs-comment">  basename(postSource, extname(postSource)) 获取 postSource 的文件名并移除扩展名，例如 &quot;test&quot;。</span><br><span class="hljs-comment">  路径拼接结果：&quot;source/_posts/test&quot;。</span><br><span class="hljs-comment">  */</span><br>      postPath = <span class="hljs-title function_">join</span>(source_dir, <span class="hljs-title function_">dirname</span>(postSource), <span class="hljs-title function_">basename</span>(postSource, <span class="hljs-title function_">extname</span>(postSource)));<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//console.log(&quot;postPath: &quot; + postPath );</span><br>  <br>  <span class="hljs-keyword">let</span> sanitizer = <span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>) &#123; <span class="hljs-keyword">return</span> html; &#125;;<br><br>  <span class="hljs-keyword">if</span> (dompurify) &#123;<br>    <span class="hljs-keyword">if</span> (createDOMPurify === <span class="hljs-literal">undefined</span> &amp;&amp; <span class="hljs-variable constant_">JSDOM</span> === <span class="hljs-literal">undefined</span>) &#123;<br>      createDOMPurify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dompurify&#x27;</span>);<br>      <span class="hljs-variable constant_">JSDOM</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsdom&#x27;</span>).<span class="hljs-property">JSDOM</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable language_">window</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">JSDOM</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-property">window</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMPurify</span> = <span class="hljs-title function_">createDOMPurify</span>(<span class="hljs-variable language_">window</span>);<br>    <span class="hljs-keyword">let</span> param = &#123;&#125;;<br>    <span class="hljs-keyword">if</span> (dompurify !== <span class="hljs-literal">true</span>) &#123;<br>      param = dompurify;<br>    &#125;<br>    sanitizer = <span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(html, param); &#125;;<br>  &#125;<br><br>  marked.<span class="hljs-title function_">use</span>(&#123;<br>    renderer,<br>    tokenizer<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">sanitizer</span>(marked.<span class="hljs-title function_">parse</span>(text, <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;<br>    <span class="hljs-comment">// headerIds was removed in marked v8.0.0, but we still need it</span><br>    <span class="hljs-attr">headerIds</span>: <span class="hljs-literal">true</span><br>  &#125;, markedCfg, options, &#123; postPath, <span class="hljs-attr">hexo</span>: <span class="hljs-variable language_">this</span>, <span class="hljs-attr">_headingId</span>: &#123;&#125; &#125;)));<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HexoとGitHubPages搭建静态博客</title>
    <link href="/posts/Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html"/>
    <url>/posts/Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html</url>
    
    <content type="html"><![CDATA[<p>本人搭建博客是为了能在网站上浏览自己的记录。  </p><p>博客的搭建参考了很多文章。其中，<a href="https://princehao.cn/posts/blog001/">Hexo+Fluid搭建个人博客网站</a> 这篇博文结构简单且思路清晰，在搭建初期很有帮助。在本博文开头，先对网络上知名或不知名的作者表示由衷的感谢：</p><ol><li><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>：官方文档虽然不够细致，搜索引擎也是稀烂，但是如果有部分困惑，还是推荐查看。</li><li><a href="https://princehao.cn/posts/blog001/">Hexo+Fluid搭建个人博客网站</a>：简明！</li><li><a href="https://juejin.cn/post/6844904131266609165">彻底搞懂如何使用Hexo+GitHubPages搭建个人微博</a></li><li><a href="https://zhuanlan.zhihu.com/p/26625249/">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/348093645">浅析 Hexo 搭建博客的原理 - 知乎</a></li><li><a href="https://swiftsiqi.com/posts/A-Guide-Of-Making-Your-Personal-Blog-Part-1">《A Guide Of Making Your Personal Blog》</a> 系列文章</li><li><a href="https://blog.17lai.site/posts/253706ff/">hexo博客博文撰写篇之完美笔记大攻略终极完全版 | 夜法之书</a>：全！</li><li>……</li></ol><p>本博文将介绍如何从零开始，一步一步搭建出属于自己的个人博客网站。使用到的有 Hexo、Git、Fluid、GitHub 和 Github Pages。</p><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo</a>：一个快速、简洁且高效的博客框架。 它能够解析 Markdown 文档（或其他标记语言），渲染成 HTML 静态网页（带有特色主题样式） 。</li><li><a href="https://git-scm.com/">Git</a>：分布式版本控制系统。建立本地仓库，管理本地数据。如果博客不需要细致地管理数据，一般只用到 Git 的 clone 和 push 功能，且这部分由 Hexo 命令完成。（不备份数据还是人类吗？我请问了！）</li><li><a href="https://hexo.fluid-dev.com/docs/">Fluid</a>：基于 Hexo 的一款 Material Design 风格的主题，Hexo 默认的主题比较朴素。</li><li><a href="https://github.com/">GitHub</a>：在线软件源代码托管服务平台。建立远程仓库，使用 Git 关联 GitHub，将本地仓库管理的数据推送到远程仓库。</li><li><a href="https://docs.github.com/zh/pages">GitHub Pages</a>：GitHub 提供的<strong>静态</strong>网站托管服务，托管固定的 GitHub 仓库：<code>&lt;username&gt;.github.io</code> 。</li></ul><p>【脑海整理中……】</p><p>【注】：文字说明远比简单地给出做法重要，虽然后者更实在。遗憾的是，本篇博文是残稿，缺少广角说明。</p><p>【注】：本篇博文稍微有点价值的是“文件管理和附属资源显示”章节。该章节讲解了文档和博文同时显示本地图片的思路和处理方案，简浅但明晰。若嫌麻烦，直接看“文档和博文同时显示本地图片”小节。</p><p>【注】：Github Pages 的说明请看前篇，或者看官方文档。</p><p>【注】：本篇博文讲解基于“Hexo - Git -  Github Pages 仓库（public）”架构建立<strong>静态</strong>博客。用户是无法与静态 Web 网站进行交互的。</p><blockquote><p>暂未参考，同质化，待删除：</p><p><a href="https://zhuanlan.zhihu.com/p/111614119">（一）Github + Hexo 搭建个人博客超详细教程 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/109382792">如何快速搭建自己的博客平台 - 知乎</a></p><p><a href="https://zhcano.github.io/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#6-%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D">Hexo+GitHub Pages+服务器搭建个人网站 - 学思行录</a></p><p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列-CSDN博客</a></p></blockquote><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><p>Hexo 是一个快速、简洁且高效的博客框架，它能够解析 Markdown 格式的文档，渲染生成 HTML 文件。</p><blockquote><p>Tip：Markdown 的使用较为简易，而 HTML、CSS 和 JavaScript 等编程语言的学习相对繁杂。当然，要想使网页更具个人色彩，还需对编程语言具有一定的了解。</p></blockquote><p>Hexo 框架依赖于 Node.js 提供的运行环境和功能。npm（Node Package Manager）是 Node.js 默认安装和使用的包管理器，Hexo 可以使用 npm 或其他包管理器来安装和管理各种插件、主题和依赖包。</p><blockquote><p>Tip：Node.js 是一个运行环境，它能够使 JavaScript 代码在服务器端运行。我们只是显示地使用其包管理器，无需系统学习其知识。</p></blockquote><p>Git 是版本控制系统。通过它，用户可以很方便地管理本地博客数据，并将本地博客推送到 Github Pages 仓库。</p><h2 id="1-1-安装-Git"><a href="#1-1-安装-Git" class="headerlink" title="1.1 安装 Git"></a>1.1 安装 Git</h2><blockquote><p><a href="https://blog.csdn.net/mukes/article/details/115693833">Git 详细安装教程（详解 Git 安装过程的每一个步骤）_git安装-CSDN博客</a></p></blockquote><p>如果 C 盘空间充足，默认安装即可。只需配置 Git 用户名和邮箱，以便区分不同提交者的身份。</p><p>Git Bash 配置 Git 用户名和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;your username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your email address&quot;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-安装-Node-js"><a href="#1-2-安装-Node-js" class="headerlink" title="1.2 安装 Node.js"></a>1.2 安装 Node.js</h2><p>如果 C 盘空间充足，默认安装即可。只需修改 registry 和配置环境变量。</p><h3 id="1-2-1-安装"><a href="#1-2-1-安装" class="headerlink" title="1.2.1 安装"></a>1.2.1 安装</h3><p>在 <a href="https://nodejs.org/en">Node.js官网</a> 下载与操作系统所匹配的最新的 <code>.msi</code> 长期稳定版，然后按步骤安装。</p><p>默认的安装路径在 <code>C:\Program Files</code> 目录下。<u>因 C 盘空间不足，将其修改为 <code>E:\APP</code> 目录下。</u></p><p>安装完后，<code>msi</code> 格式的安装包会自动将【Node 安装目录】添加到 Path 环境变量中，而 Node 程序（<code>node.exe</code>）和 npm 程序（<code>npm.cmd</code>）在 Node 安装目录下，因此 CLI 能够在任意路径下执行两者程序。</p><blockquote><p>查看环境变量进行验证：【个人电脑】右键 →【属性】→【高级系统设置】→【高级-环境变量】→【系统变量-Path】，发现已配置 <code>E:\APP\nodejs\</code> 。</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250519020703779.png"></p></blockquote><blockquote><p>CLI，全称 Command-line interface，译为命令行界面。Windows 系统可使用 cmd.exe 或 PowerShell，推荐使用 Git Bash。</p></blockquote><p>CLI 执行命令 <code>node -v</code> 和 <code>npm -v</code>，若显示对应版本号，则说明安装成功。</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250408195925672.png"></p><h3 id="1-2-2-修改全局模块安装目录和缓存目录"><a href="#1-2-2-修改全局模块安装目录和缓存目录" class="headerlink" title="1.2.2 修改全局模块安装目录和缓存目录"></a>1.2.2 修改全局模块安装目录和缓存目录</h3><p>npm 的全局模块安装目录和缓存目录默认都在 C 盘下。</p><blockquote><p>执行如下命令进行查看：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 查看npm的全局模块安装目录。默认：C:\Users\用户\AppData\Roaming\npm<br>npm get prefix<br># 查看npm的缓存目录。默认：C:\Users\用户\AppData\Local\npm-cache<br>npm get cache<br></code></pre></td></tr></table></figure></blockquote><p><u>因 C 盘空间不足，将两者改到 <code>Node.js</code> 的自定义安装目录下（<code>E:\APP\nodejs\</code>）。</u></p><p>先在该目录下新建 “node_global” 和 “node_cache” 两个文件夹，然后执行如下命令进行修改：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 设置 npm 的全局模块安装目录为 &quot;node_global&quot; 文件夹。全局安装到 node_global\node_modules\ 目录下。<br>npm config <span class="hljs-built_in">set</span> prefix &quot;E:\APP\nodejs\node_global&quot;<br># 设置 npm 的缓存目录为 &quot;node_cache&quot; 文件夹。<br>npm config <span class="hljs-built_in">set</span> cache &quot;E:\APP\nodejs\node_cache&quot;<br></code></pre></td></tr></table></figure><h3 id="1-2-3-配置环境变量"><a href="#1-2-3-配置环境变量" class="headerlink" title="1.2.3 配置环境变量"></a>1.2.3 配置环境变量</h3><p>【个人电脑】右键 →【属性】→【高级系统设置】→【高级-环境变量】→【系统变量】</p><ol><li><strong>全局安装的模块的程序就在 “node_global” 路径下，将 “node_global” 路径添加到 Path 变量中（<code>E:\APP\nodejs\node_global</code>），方便 CLI 在任意路径下执行 node 全局模块的命令。</strong></li><li>很多博文新建变量，变量名为 <code>NODE_PATH</code>，变量值为全局 <code>node_modules</code> 的路径。该变量用于扩展 Node.js 的模块查找路径（默认在项目的本地 <code>node_modules</code> 目录查找）。通常不建议手动设置，因为可能导致依赖混乱和版本冲突。（搭建静态博客没必要新建该变量。）</li></ol><blockquote><p>Tips：</p><ul><li>系统变量作用于所有用户和程序，而用户变量只影响当前登录的用户。对于个人计算机，通常只有一个用户，两者的实际差异很小。在日常使用中，修改用户变量已足够满足大部分需求。</li><li>在 Windows 系统中， 在 <code>Path</code> 变量中的路径可以省略最后的反斜杠（<code>\</code>），不会影响系统识别。</li></ul><p><code>NODE_PATH</code> 变量的说明：</p><ul><li>除非你有特殊需求，否则不推荐常规使用。比如：在某些开发或测试环境中，需要全局模块访问，避免重复安装公共依赖。</li><li>现代 Node.js 开发推荐通过局部 <code>node_modules</code> 或使用包管理工具（如 <code>npm</code> 或 <code>yarn</code>）管理依赖，而不是依赖 <code>NODE_PATH</code>。</li><li>兼容性问题：不同环境和不同Node版本下，<code>NODE_PATH</code>的行为可能略有差异。</li></ul></blockquote><h3 id="1-2-4-registry（源仓库）"><a href="#1-2-4-registry（源仓库）" class="headerlink" title="1.2.4 registry（源仓库）"></a>1.2.4 registry（源仓库）</h3><blockquote><p>粗览，可删：<a href="https://www.cnblogs.com/chase-star/p/10455703.html">npm 和 cnpm 的区别，你真的搞懂了嘛 - 爱看星星的稻草人 - 博客园</a></p></blockquote><p>npm 安装模块是从源仓库下载对应的包。通过命令 <code>npm config get registry</code> 查看当前源仓库的地址，默认为 <a href="http://registry.npmjs.org/">http://registry.npmjs.org</a> 。因为 npm 默认源仓库的服务器在国外，在国内使用 npm 安装模块时，经常会出现下载缓慢或模块安装失败等问题。有两种方式解决该问题，如下所示：</p><ol><li>npm 的源仓库改为使用阿里维护的淘宝镜像地址</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 修改 npm 的源仓库地址为阿里维护的淘宝镜像地址：https://registry.npmmirror.com<br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><ol start="2"><li>使用 cnpm 代替 npm，install 模块</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># npm 安装 cnpm 插件到全局模块安装目录，并设置 cnpm 的源仓库地址为国内的淘宝镜像地址<br>npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>npm 是 node 官方的包管理器，<a href="https://github.com/cnpm/cnpm">cnpm</a>（gzip 压缩支持）是淘宝定制的中国版 npm 插件。安装模块时可使用 cnpm 来代替 npm，两者的下载命令基本一致。</p><blockquote><p>npm 命令安装模块：</p><ol><li><code>npm install -g package-name</code>：全局（<code>-g</code> or <code>--global</code>）安装指定包。</li><li><code>npm install package-name</code>：本地安装指定包。</li></ol><p>cnpm 命令安装模块时，<code>cnpm</code> 替换 <code>npm</code> 即可。</p></blockquote><h3 id="1-2-5-权限修改与下载测试"><a href="#1-2-5-权限修改与下载测试" class="headerlink" title="1.2.5 权限修改与下载测试"></a>1.2.5 权限修改与下载测试</h3><ol><li>确保当前用户对全局模块安装目录具有读写权限，否则使用 npm 全局安装包时可能会遇到权限不足的错误。</li></ol><blockquote><p>Tip：修改用户组权限，而不是“以管理员身份运行”程序。可参考：<a href="/posts/Windows%E7%94%A8%E6%88%B7%E7%BB%84%E4%B8%8E%E6%9D%83%E9%99%90.html" title="Windows用户组与权限">Windows用户组与权限</a></p></blockquote><p>【node_global】→【属性】→【安全】→【Authenticated Users】→【编辑】→勾选【写入】</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250518222811468.png"></p><ol start="2"><li>确保当前用户对缓存目录具有读写权限，否则可能会影响缓存的使用和更新。（操作同上）</li></ol><hr><p>CLI 执行命令 <code>npm install express -g</code>，下载 express 模块到全局模块安装目录。</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250519000113697.png"></p><h3 id="1-2-6-版本升级"><a href="#1-2-6-版本升级" class="headerlink" title="1.2.6 版本升级"></a>1.2.6 版本升级</h3><blockquote><p><a href="https://juejin.cn/post/7161634586824212488">如何更新NodeJs到最新版本？ - 掘金</a></p></blockquote><p>适用于 Windows 和 macOS 的通用方式：<strong>官网下载最新 LTS 版本，然后重新安装在原安装路径下。</strong> 这样更新无需重新配置环境变量。</p><p>操作步骤如下：</p><ol><li>执行命令 <code>node -v</code>，查看当前版本是否为最新版。</li><li>执行命令 <code>where node</code>，查看之前的安装路径。</li><li>在 <a href="https://nodejs.org/en">Node.js官网</a> 下载与操作系统所匹配的最新的 <code>.msi</code> 长期稳定版，然后按步骤安装在原安装路径下。</li><li>最后测试是否安装成功：执行命令  <code>node -v</code> ，打印版本信息。</li></ol><h2 id="1-3-安装-Hexo"><a href="#1-3-安装-Hexo" class="headerlink" title="1.3 安装 Hexo"></a>1.3 安装 Hexo</h2><p> npm 安装 Hexo 模块到全局模块安装目录：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="1-4-注册-GitHub-账号"><a href="#1-4-注册-GitHub-账号" class="headerlink" title="1.4 注册 GitHub 账号"></a>1.4 注册 GitHub 账号</h2><p>在 <a href="https://github.com/">GitHub官网</a> 注册账号。</p><h1 id="2-本地博客初体验"><a href="#2-本地博客初体验" class="headerlink" title="2. 本地博客初体验"></a>2. 本地博客初体验</h1><p>本地博客是指 Hexo 本地项目；使用 Hexo 初始化文件夹，以之作为本地博客项目。</p><h2 id="2-1-建立本地博客"><a href="#2-1-建立本地博客" class="headerlink" title="2.1 建立本地博客"></a>2.1 建立本地博客</h2><p>任选位置新建文件夹，本人选择 <code>E:\&lt;username&gt;-blog\blogRoot\</code> 文件夹。其中：<code>E:\&lt;username&gt;-blog\</code> 目录用于存放与博客相关的内容；<code>blogRoot\</code> 是专门的本地博客项目目录，简称为<strong>站点根目录</strong>。</p><p><strong>在站点根目录下执行以下命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<span class="hljs-comment"># Git clone hexo-starter 和 hexo-theme-landscape 主题，包管理器下载依赖。</span><br>npm install<span class="hljs-comment"># 比对依赖项配置文件，然后更新依赖（如果需要）。</span><br></code></pre></td></tr></table></figure><p><strong>执行完后，本地博客项目初始化完成。</strong></p><blockquote><p><code>hexo init</code> 命令的具体作用：<a href="https://hexo.io/zh-cn/docs/commands#init">int 命令 | Hexo</a></p><p><code>npm install</code> 命令的作用：<a href="https://blog.csdn.net/m0_73531461/article/details/136399322">深入理解 package.json 文件与 package-lock.json 文件-CSDN博客</a></p></blockquote><p>此时，站点根目录下存在一系列文件，如下图所示：</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250409102402277.png"></p><hr><p><strong>在站点根目录下执行以下命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<span class="hljs-comment"># 生成博客。【hexo generate】</span><br>hexo s<span class="hljs-comment"># 启动服务器。默认情况下，访问地址为：http://localhost:4000/。【hexo server】</span><br></code></pre></td></tr></table></figure><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250610072511206.png" alt="执行 hexo g 命令"></p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250610072611017.png" alt="执行 hexo s 命令"></p><hr><p>浏览器键入 <a href="http://localhost:4000/">http://localhost:4000/</a> ，若出现如下界面，则本地博客建立成功。本地预览完后，命令行界面【Ctrl + c】关闭本地服务器，避免 4000 端口被一直占用。</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250409171310908.png" alt="本地博客默认首页"></p><h2 id="2-2-关于博客项目文件夹的说明"><a href="#2-2-关于博客项目文件夹的说明" class="headerlink" title="2.2 关于博客项目文件夹的说明"></a>2.2 关于博客项目文件夹的说明</h2><blockquote><p><a href="https://www.jianshu.com/p/cfd05c35833c">Hexo文件结构 - 简书</a></p><p>暂未遇到的问题：<a href="https://www.zhihu.com/question/41444638">hexo博客文件夹下删除了db.json之后，之前的分类（categories）还在？ - 知乎</a></p></blockquote><ul><li><p><code>node_modules/</code>：博客项目的模块安装目录。</p></li><li><p><code>themes/</code>：主题文件夹。Hexo 会根据主题来生成静态页面。</p></li><li><p>_config.landscape.yml：默认主题的配置文件。默认主题包在 node_modules&#x2F; 目录下。</p></li><li><p>package.json 和 package-lock.json：博客项目的依赖项配置文件。</p></li><li><p><strong>_config.yml</strong>：网站的配置文件。</p></li><li><p><code>scaffolds/</code>：模版文件夹。new 命令新建文章时，Hexo 会根据 scaffold 来创建文件。</p></li><li><p><strong><code>source/</code></strong>：资源文件夹；用于存放用户资源，比如 Markdown 文档、静态资源等。</p><ol><li><strong><code>source/_posts/</code></strong>：专门用于存放博文（html）的原始文档（md）。</li><li><code>source/images/</code>：自建的图片文件夹。</li><li>…</li></ol></li><li><p><strong><code>public/</code></strong>：generate 命令的输出目录，一般不直接操作里面的文件。<u>静态站点的位置，相当于“博客网站根目录”，访问博客就是访问 public 目录下的资源文件。</u></p></li></ul><p>执行 generate 命令时：Hexo 会解析资源文件夹下的 Markdown 和 HTML 文件（以 <code>_</code>开头命名的文件&#x2F;文件夹和隐藏的文件将会被忽略 ，不包括 <code>_posts</code> 文件夹），渲染得到的 html 文件会输出到 public 文件夹，此外还会在站点根目录下生成一份缓存文件（<code>db.json</code>）；而其他文件会被直接拷贝到 public 文件夹（不包括以 <code>_</code>开头命名的文件&#x2F;文件夹和隐藏的文件）。</p><blockquote><p>Tip：执行 generate 命令时，Hexo 渲染的主要目标就是 <code>source/_posts/</code> 目录下的 md 文件，生成的 html 文件就是所说的博文。</p></blockquote><blockquote><p>Explain：上节浏览器所展示的 <code>hello-world</code> 博文的原始 md 文档是执行 <code>hexo init</code> 命令时下载的。执行 generate 命令时，<code>source/_posts/hello-world.md</code> 文档被渲染成 <code>hello-world.html</code> 文件并输出到 <code>public/</code> 目录下。</p></blockquote><h1 id="3-网络博客"><a href="#3-网络博客" class="headerlink" title="3. 网络博客"></a>3. 网络博客</h1><p>网络博客，即能够在因特网上浏览的个人博客网站。</p><h2 id="3-1-GitHub-Pages"><a href="#3-1-GitHub-Pages" class="headerlink" title="3.1 GitHub Pages"></a>3.1 GitHub Pages</h2><p>按官方文档操作即可。</p><p><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/creating-a-github-pages-site">创建 GitHub Pages 站点 - GitHub 文档</a> ，public GitHub Pages 仓库</p><p><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">配置 GitHub Pages 站点的发布源 - GitHub 文档</a> </p><h2 id="3-2-Git-部署博客到-GitHub-Pages"><a href="#3-2-Git-部署博客到-GitHub-Pages" class="headerlink" title="3.2 Git 部署博客到 GitHub Pages"></a>3.2 Git 部署博客到 GitHub Pages</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">一键部署 | Hexo</a></p></blockquote><blockquote><p>标题：基于 hexo-deployer-git 部署</p></blockquote><p>Hexo 提供快速、简便的部署策略。在安装 与服务器&#x2F;存储库提供的部署方法兼容的必要插件 的情况下，进行相关配置后，只需要一条命令（<code>hexo deploy</code>）即可将网站部署到服务器上。</p><p>使用 Git 将本地博客部署到 GitHub Pages，直白地说，就是将 <code>public/</code> 目录下的所有文件，而不是 <code>public/</code> 目录，push 到 GitHub Pages 仓库。</p><blockquote><p>Tip：<code>hexo deploy</code> 命令的具体作用——先将静态站点（<code>public/</code>）的内容复制到 <code>.deploy_git/</code> 目录下，然后在 <code>.deploy_git/</code> 目录下执行 Git 命令（init、add、commit、push）。</p></blockquote><ol><li>安装 hexo-deployer-git 插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ol start="2"><li>编辑 <code>_config.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-comment"># 类型</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><span class="hljs-comment"># 采用git部署</span><br>  <span class="hljs-comment"># 仓库连接方式，可以是【HTTPS+密码】、【HTTPS+token】或【SSH】</span><br>  <span class="hljs-comment"># 采用【HTTPS+密码】，HTTPS见下图</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br>  <span class="hljs-comment"># 分支名称，与 GitHub Pages 仓库的默认分支名一致</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250610072733850.png"></p><ol start="3"><li>部署</li></ol><p>Git Bash 执行 <code>hexo d</code> 命令实现部署。因为 Git 连接仓库采用【HTTPS+密码】的方式，第一次连接要求输入用户名和密码进行身份验证（浏览器会自动跳转出认证页面）。</p><ol start="4"><li>验证</li></ol><p>浏览器键入 <code>https://&lt;username&gt;.github.io</code> 查看个人博客网站。</p><h1 id="4-选择主题"><a href="#4-选择主题" class="headerlink" title="4. 选择主题"></a>4. 选择主题</h1><p>Hexo 的默认主题（landscape）比较朴素，官网提供了丰富的 <a href="https://hexo.io/themes/">主题样式</a>，常用有 Next、Butterfly、Fluid 等。可以查看不同主题的 Demo，自行做出选择。不同主题的差异主要在生态建设及插件集成，外在表现是页面布局。</p><blockquote><p><a href="https://pengtech.net/hexo/hexo_theme_recommendation.html">16 款精美的hexo 博客主题推荐 - 鹏叔的技术博客</a></p></blockquote><p>笔者选择 Fluid 主题，仅仅是因为其博文页右侧的目录设计。</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250427192746433.png"></p><blockquote><p>Tip：如果不满足于主题的默认页面布局和样式，可以修改源代码，形成自己的页面风格。</p></blockquote><h2 id="4-1-Fluid-主题"><a href="#4-1-Fluid-主题" class="headerlink" title="4.1 Fluid 主题"></a>4.1 Fluid 主题</h2><ol><li><p><strong>在站点根目录下执行 <code>npm install --save hexo-theme-fluid</code> 命令来下载 Fluid 主题包。</strong></p></li><li><p>移动 fluid 主题文件夹并改名：<code>node_modules/hexo-theme-fluid</code> → <code>themes/fluid</code>。（本人移动并改名只是为了方便找到它。后期可能想换主题？）</p></li><li><p><strong><code>_config.yml</code> 配置文件中指定主题和语言：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题为 Fluid，默认主题是 landscape</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言为中文</span><br></code></pre></td></tr></table></figure></li><li><p>执行 <code>hexo g</code>  和 <code>hexo s</code> 命令后，浏览器键入 <a href="http://localhost:4000/">http://localhost:4000/</a> ，查看 Fluid 主题效果。</p></li></ol><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250409175218454.png" alt="fluid 主题的默认格式界面"></p><h2 id="4-2-配置文件"><a href="#4-2-配置文件" class="headerlink" title="4.2 配置文件"></a>4.2 配置文件</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置：使用代替主题配置文件 | Hexo</a></p></blockquote><p>hexo 支持多配置文件合并覆盖生效；配置文件的优先级从高到低：<code>_config.yml</code>、<code>_config.[theme].yml</code>、主题目录下的<code>_config.yml</code>。主题更新后，主题目录下的 <code>_config.yml</code> 会被替换。</p><p><strong>【强烈建议】：将所有的主题配置集中在独立的 <code>_config.[theme].yml</code> 配置文件中，以方便管理。</strong></p><p>在站点根目录下创建 <code>_config.fluid.yml</code>，然后复制 Fluid 主题配置文件（<code>fluid/_config.yml</code>）的内容。</p><p><strong>【注意】：<u>配置项的 key 和 value 之间用 <code>英文冒号+空格</code> 连接。</u> 否则清理或部署时会报错：<code>can not read a block mapping entry</code>。当然，也可能是报错点之前存在格式错误。</strong></p><h1 id="5-博客撰写"><a href="#5-博客撰写" class="headerlink" title="5. 博客撰写"></a>5. 博客撰写</h1><p>在站点根目录下执行 <code>hexo new [layout] &lt;title&gt;</code> 命令来创建一篇新文章或新页面。</p><h2 id="5-1-布局"><a href="#5-1-布局" class="headerlink" title="5.1 布局"></a>5.1 布局</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span><span class="hljs-comment"># 默认值。</span><br></code></pre></td></tr></table></figure><p>layout 是布局（版面）。Hexo 共有三种 layout：<code>post</code>、<code>page</code> 和 <code>draft</code>。 每种布局创建的文件会被保存到不同的路径。</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code>（文章）</td><td align="left"><code>source/_posts/</code></td></tr><tr><td align="left"><code>page</code>（页面）</td><td align="left"><code>source/</code></td></tr><tr><td align="left"><code>draft</code>（草稿）</td><td align="left"><code>source/_drafts/</code></td></tr></tbody></table><p>使用 new 命令来新建时，如果 layout 缺省，则默认使用 <code>_config.yml</code> 配置文件中的 default_layout 参数代替，默认值为 post。</p><ol><li>若 layout 为 post，则会在 <code>source/_posts/</code> 目录下生成一篇文章——博文（html）的原始文档（md）。</li><li>若 layout 为 page，则会生成 <code>source/title/index.md</code> 。</li><li>若 layout 为 draft，则会在 <code>source/_draft/</code> 目录下生成一篇草稿。</li></ol><h2 id="5-2-文件名称（title-部分）"><a href="#5-2-文件名称（title-部分）" class="headerlink" title="5.2 文件名称（title 部分）"></a>5.2 文件名称（title 部分）</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span><span class="hljs-comment"># 默认值。:title 是占位符，值为 &lt;title&gt; 参数值</span><br></code></pre></td></tr></table></figure><ol><li><strong>使用 new 命令来新建文章或草稿时，默认使用 title 作为文件名（前缀部分）。如果 title 包含空格，请使用引号括起来。</strong> 如果 title 包含 <code>.</code> 或 <code>/</code> 等符号，会转换成 <code>-</code> 连接。</li><li>使用 new 命令来创建页面时，Hexo 会创建一个以标题为名字的目录，并在目录下放置一个 <code>index.md</code> 文件。</li></ol><p>如果要更改默认文件名，可以更改 <code>new_post_name</code> 配置项的值。例如， <code>:year-:month-:day-:title.md</code> 将在文件名前加上创建日期。<u>（没必要，在“文件管理与附属资源显示：文件管理（下）”小节会提到）</u></p><h2 id="5-3-草稿"><a href="#5-3-草稿" class="headerlink" title="5.3 草稿"></a>5.3 草稿</h2><p>Hexo 默认不会渲染 <code>source/_draft/</code>目录下草稿 md 文档。可使用 <code>hexo publish draft &lt;filename&gt;</code> 命令发表草稿，即将草稿移到到 <code>source/_posts/</code> 目录下。</p><p>当然，也可以在运行 generate 命令时，添加 <code>--draft</code> 选项，或在配置文件中启用 <code>render_draft</code> 设置，来渲染草稿。（别搞这个操作）</p><h2 id="5-4-模板-Front-matter"><a href="#5-4-模板-Front-matter" class="headerlink" title="5.4 模板 &amp; Front-matter"></a>5.4 模板 &amp; Front-matter</h2><blockquote><p><a href="https://wyh0517.github.io/2020/06/24/rule/">文章的front-matter使用详解 | Wang-YH</a></p></blockquote><p><strong>使用 new 命令来新建时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的模板文件来建立文件。</strong><u>一般只需要修改文章或草稿的模板文件。</u></p><p>例如，执行 <code>hexo new post &quot;test&quot;</code> 命令时，Hexo 会根据 <code>scaffolds/post.md</code> 模板文件的内容建立 md 文档。如下所示：</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250413131954477.png" alt="源代码模式查看"></p><p>md 文档开头的代码块就是 Front-matter。</p><h3 id="5-4-1-Front-matter"><a href="#5-4-1-Front-matter" class="headerlink" title="5.4.1 Front-matter"></a>5.4.1 Front-matter</h3><p><strong>Front-matter（前页|前置内容）是文档开头的 YAML 或 JSON 代码块，用于配置文档的各种属性（元信息）。</strong> 以 YAML 格式书写时，Front-matter 以三个破折号结束；以 JSON 格式书写时，Front-matter 以三个分号结束。</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/599096662">YAML front matter ——在 Obsidian 笔记中加入属性 - 知乎</a></p></blockquote><p>Front-matter 常用的设置有：title、date、categories、tags、excerpt、permalink。</p><ol><li><strong>title</strong></li></ol><p>title 是文章的标题，默认为 <code>&lt;title&gt;</code>（模板中的默认设置）。</p><ol start="2"><li><strong>categories &amp; tags</strong>（分类 &amp; 标签）</li></ol><p>只有文章支持分类和标签。 分类按顺序应用于文章，从而形成分类和子分类的层次结构。 标签是在相同的层次结构上定义的，因此它们的出现顺序不重要。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md">categories:<br><span class="hljs-bullet">  -</span> Programming<br><span class="hljs-bullet">  -</span> Java<br>tags:<br><span class="hljs-bullet">  -</span> 编程<br><span class="hljs-bullet">  -</span> IO<br></code></pre></td></tr></table></figure><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250426214919632.png"></p><p>如果想应用多个分类层次结构，请使用一个名称列表而不是一个单个名称。 Hexo 会将每个分类视为独立层次结构。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">categories:<br><span class="hljs-bullet">  -</span> Programming<br><span class="hljs-bullet">  -</span> Java<br><span class="hljs-bullet">  -</span> [编程, 博客搭建]<br>tags: [编程, IO]<br></code></pre></td></tr></table></figure><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250426215112716.png"></p><ol start="4"><li><strong>excerpt（摘要）</strong></li></ol><p>摘要会出现在博客首页，用于对博文进行必要的简介。</p><p>方式一：在文档正文使用 <code>&lt;!-- more --&gt;</code> 截断，之前的文字将会被视为摘要。此方式的摘要会出现在博文中。</p><p><u>方式二：在 Front-matter 中指定 <code>excerpt:</code> 值。此方式的摘要不会出现在博文中。</u></p><p>本人按需采用了方式二。本人习惯在文档开头编写文档概述，若摘要内容出现在博文开头显得不美观。</p><ol start="5"><li><strong>permalink（永久链接）</strong></li></ol><p>覆盖文章的永久链接（覆盖配置文件中的该配置）。永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾。</p><h3 id="5-4-2-文章模板"><a href="#5-4-2-文章模板" class="headerlink" title="5.4.2 文章模板"></a>5.4.2 文章模板</h3><p>修改文章模板文件：<code>scaffolds/post.md</code></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: &#123;&#123; title &#125;&#125; # 读取 new命令的title参数值 作为文章主题<br>excerpt:  # 摘要<br>author: shaton沙桐# custom auther&#x27;s name<br>date: &#123;&#123; date &#125;&#125; # 读取 new命令的执行时间 作为文章date<br>categories: # 自定义层级目录<br><span class="hljs-section">tags:  # 自定义标签</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>按需删改。</p><p>【注意】：如果文档 Front-matter 部分的属性无值，则删除该属性。否则执行 generate 命令时，Hexo 可能会报错： <code>ValidationError: ‘null’ is not a string!</code> 。这是属性缺失造成的。</p><h2 id="5-6-永久链接"><a href="#5-6-永久链接" class="headerlink" title="5.6 永久链接"></a>5.6 永久链接</h2><p><strong>permalink 是文章的永久链接。可以在配置文件（<code>config.yml</code>）中统一设置所有博文的永久链接格式。或者在每篇文档的 Front-matter 部分单独设置每篇博文的永久链接。</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span>      <span class="hljs-comment"># 默认值</span><br><br><span class="hljs-comment"># permalink 推荐以 `/` 或 `.html` 结尾。</span><br><span class="hljs-comment"># permalink: posts/:title/# 推荐。占位符&quot;:title&quot;是相对于&quot;source/_posts/&quot;文件夹的文件名称</span><br><span class="hljs-comment"># permalink: posts/:name/# 推荐。占位符&quot;:name&quot;仅是文件名称</span><br><span class="hljs-comment"># permalink: posts/:title.html# 推荐</span><br><span class="hljs-comment"># permalink: posts/:name.html# 推荐</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://hexo.io/zh-cn/docs/permalinks">永久链接（Permalinks） | Hexo</a> 有占位符的描述说明。</p></blockquote><p><strong>注意！对 permalink 而言，占位符 <code>:title</code> 是相对于 “source&#x2F;_posts&#x2F;“ 文件夹的文件名称。</strong> 例如，<code>source/_posts/test/test3.md</code> 文档的 <code>:title</code> 对 permalink 而言为 <code>test/test3</code>。</p><p><strong>此外，【permalink结构】还与 generate 命令的输出目录有关。</strong>（在”<code>public/</code> 目录下图片的真实路径“章节讲解）</p><h1 id="6-常用工作命令与脚本"><a href="#6-常用工作命令与脚本" class="headerlink" title="6. 常用工作命令与脚本"></a>6. 常用工作命令与脚本</h1><blockquote><p><a href="https://hzr0709.github.io/2024/05/17/Hexo-Commands/">Hexo-常用命令详解 | 个人博客</a></p><p>？若使用 Github Actions 自动部署，只需要删除 md 文档，然后 push 即可。？（待用）</p></blockquote><p>常用工作命令：</p><ol><li><code>hexo new post &lt;title&gt; </code>：创建文档。</li><li><code>hexo generate</code>：生成本地博客。简写为 <code>hexo g</code> 。</li><li><code>hexo server</code>：启动本地服务器。简写为 <code>hexo s</code> 。如果 <a href="http://localhost:4000/">本地预览</a> 没问题，【ctrl + c】关闭服务器，避免端口被一直占用。</li><li><code>hexo deploy</code>：部署。简写为 <code>hexo d</code> 。比如，推送到 GitHub Pages 仓库，等待 gp 部署。</li><li><code>hexo clean</code>：清理缓存文件（<code>db.json</code>）和 <code>public/</code> 目录。</li><li><code>hexo g -d</code> or <code>hexo d -g</code>：先生成，后部署。</li></ol><p>一些说明：</p><ul><li>可以使用 new 命令按照模板创建文档。也可以手动创建文档，自行添加 Front-matter。两者效果一样。</li><li>server 命令方便本地调试和预览。网络博客需要等待，而本地博客是实时的。此外，文档修改保存后，本地博客刷新后能实时预览（仅文字变更）。</li><li>clean 命令的执行是必要的。md 文档的修改&#x2F;删除都需要 clean，否则执行 generate 命令时，Hexo 不会渲染&#x2F;删除对应的 html 博文。</li></ul><hr><p><code>.bat</code> 脚本，双击运行。（CLI 执行的 <code>.sh</code> 脚本，略。）</p><p><code>一键预览.bat</code>：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bat">:: 一键预览（注释）<br>:: @隐藏自身；<span class="hljs-built_in">echo</span> on 显示脚本中的后续命令。<span class="hljs-built_in">echo</span> off 隐藏后续命令。<br>@<span class="hljs-built_in">echo</span> on<br>:: 切换到E盘<br><span class="hljs-function">E:</span><br><span class="hljs-function">:: 进入本地博客项目目录</span><br><span class="hljs-function"><span class="hljs-title">cd</span> <span class="hljs-title">E</span>:\&lt;<span class="hljs-title">username</span>&gt;-<span class="hljs-title">blog</span>\<span class="hljs-title">hexo</span></span><br><span class="hljs-function">:: 依次执行 <span class="hljs-title">hexo</span> 命令</span><br><span class="hljs-function">:: &amp;&amp; 表示前一条命令成功执行后再执行下一条命令；如果某步失败，后续步骤不会执行</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">clean</span> &amp;&amp; <span class="hljs-title">hexo</span> <span class="hljs-title">g</span> &amp;&amp; <span class="hljs-title">hexo</span> <span class="hljs-title">s</span></span><br></code></pre></td></tr></table></figure><p><code>一键部署.bat</code>：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bat">:: 一键部署<br>@<span class="hljs-built_in">echo</span> off<br>:: /d 选项切换盘符；然后进入本地博客项目目录<br><span class="hljs-built_in">cd</span> /d E:\&lt;username&gt;-blog\hexo<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>:: 窗口暂停。万一部署失败，暂停窗口以查看错误信息<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><blockquote><p>【参考连接可能有价值】<a href="https://hexo.fluid-dev.com/posts/hexo-server/#%E4%B8%80%E9%94%AE%E4%B8%89%E8%BF%9E">Hexo 云服务备份与使用 Jupyter - Hexo Theme Fluid</a></p></blockquote><h1 id="7-文件管理与附属资源显示"><a href="#7-文件管理与附属资源显示" class="headerlink" title="7. 文件管理与附属资源显示"></a>7. 文件管理与附属资源显示</h1><p>使用 <code>hexo new post &lt;title&gt;</code> 命令时，Hexo 会在 <code>source/_posts/</code> 目录下创建一篇文章，具体地说是一份  md 文档，它就是博文的原始文件。该文档除了文字信息外，还可以包含图片（主要）、gif、视频等附属资源。这些文件需要组织化管理，以避免数量过多而混乱。</p><p>Hexo 提供了 <code>post_asset_folder</code> 选项以启用文章资源文件夹，这解决了部分文件管理的问题。当然，这些文件的目录结构除了在 <code>source/_posts/</code> 目录下可以被设计，在 <code>public/</code> 目录下也能被设置。</p><p>附属资源显示是指 md 文档和博客页面同时显示附属资源（比如图片、gif、视频等）。当然，博客页面本身也是一种资源文件（html）。<code>public/</code> 目录是静态站点的位置，相当于“博客网站根目录”（类似于 Tomcat 类路径）。访问博客页面就是访问 <code>public/</code> 目录下的 html 文件。博客页面能够显示意味着地址与 html 文件的路径是一致的。Hexo 的默认处理即可使博客页面显示，我们关注的焦点是博客页面中附属资源的显示。 <strong>若附属资源在博客页面中能够显示，这意味着【html 文件中附属资源的引用路径】与【<code>public/</code> 目录下附属资源的真实路径】是一致的，而这两者都与 generate 命令的执行有关。</strong> </p><p>文件管理和附属资源显示是前后呼应的。本章 ”附属资源显示“ 以 ”本地“ ”图片“ 为例，其他附属资源或远程资源同理。</p><h2 id="7-1-文件管理（上）"><a href="#7-1-文件管理（上）" class="headerlink" title="7.1 文件管理（上）"></a>7.1 文件管理（上）</h2><blockquote><p>未采用，但链接及其引用链接可参考：<a href="https://muxiner.github.io/organize-files/">Hexo 文章管理：子文件夹管理 + 保留文章永久链接 - Muxiner’s Blog</a></p></blockquote><p>文件主要指博文在 <code>source/_posts/</code> 目录下的原始 md 文档及其附属资源文件。此外，还有部分博客资源文件。</p><ol><li>一般地，在 md 文档中使用 md 语法 <code>![](imageLocation)</code> 和相对路径引用本地图片，这样处理也方便本地迁移。md 文档附属资源所在的文件夹称为<strong>文章资源文件夹</strong>。</li><li>至于博客资源文件（比如全局图片、CSS、JS 文件等），放在【<code>source/</code> 目录下任意一个非 <code>_</code> 开头的文件夹】中即可，该文件夹被称为<strong>全局资源文件夹</strong>。</li></ol> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">blogRoot<br>├── source<br>│   ├── _posts<br>│   │   ├── filename【文章资源文件夹】<br>│   │   │   └── 图片.jpg【文章引用的图片】<br>│   │   └── filename.md【文章，该文章引用”图片.jpg“的语法：![](filename/图片.jpg)】<br>│   ├── images【全局资源文件夹：图片】<br>│   |<span class="hljs-string">├── 背景图.jpg</span><br><span class="hljs-string"></span>|<span class="hljs-string"></span>|<span class="hljs-string">└── 小图标.ico</span><br><span class="hljs-string"></span>|<span class="hljs-string">├── css【全局资源文件夹：css】</span><br><span class="hljs-string"></span>|<span class="hljs-string">└── js【全局资源文件夹：js】</span><br></code></pre></td></tr></table></figure><hr><p><strong>可以通过将配置文件（<code>config.yml</code>）中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来启用文章资源文件夹。</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 启用文章资源文件夹</span><br></code></pre></td></tr></table></figure><p><u>启用后，使用 new 命令创建文章时，Hexo 就会自动创建一个和文章同名的文章资源文件夹（作用一）。</u></p><h2 id="7-2-Typora-偏好设置"><a href="#7-2-Typora-偏好设置" class="headerlink" title="7.2 Typora 偏好设置"></a>7.2 Typora 偏好设置</h2><blockquote><p><a href="https://typorachina.com/guide/quick-start/images-in-typora.html">在 Typora 中使用图片 | TyporaChina</a></p><p><a href="https://zhuanlan.zhihu.com/p/342135587">Typora嵌入视频和PDF - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/344941041">Typora使用技巧之插入图片及图片上传 - 知乎</a></p></blockquote><p>Typora 是常用的 Markdown 语法编辑器，它支持实时预览。</p><p>常使用 md 语法 <code>![](src)</code> 插入图片。当 src 是 URL 时，引用远程库图片；当 src 为绝对&#x2F;相对路径时，引用本地图片。 <u>一般地，采用 md 语法和相对路径引用本地图片，以方便管理和迁移。</u> 当然，Typora 也支持 <code>&lt;img&gt;</code> 标签（html 语法）显示图片：<code>&lt;img src=&quot;imageLocation&quot;/&gt;</code> 。缩放图片时，md 语法就会转换成 html 语法。</p><p>Typora 还支持拖放图片和从剪贴板上粘贴图片。当使用这两种方式插入图片时，Typora 可以设置插入图片时的动作。请进行如下设置，以方便管理：</p><ol><li>【文件 - 偏好设置】→ 【图像】→ 【插入图片时…】→ 【复制到指定路径：<code>./$&#123;filename&#125;</code> 】</li><li>勾选【优先使用相对路径】</li></ol><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250421162215205.png"></p><blockquote><p>Tip：为了与 hexo 适配，Typora 设置插入图片时复制到指定路径 【<code>./$&#123;filename&#125;</code>】，而不是它默认提供的选项：【<code>复制图片到 ./$&#123;filename&#125;.assets 文件夹</code>】。</p></blockquote><p>设置完后，拖放图片或从剪贴板上粘贴图片时，Typora 会进行如下操作：</p><ol><li>在文档所在目录下创建与文档同名的文件夹 <code>filename/</code>，并将要插入的图片复制到该文件夹中。</li><li>插入图片，采用相对路径：<code>![](filename/imageFullName)</code></li></ol><h2 id="7-3-文件管理（下）"><a href="#7-3-文件管理（下）" class="headerlink" title="7.3 文件管理（下）"></a>7.3 文件管理（下）</h2><p>当文章越来越多时，文章及文章资源文件夹需要进一步划分目录结构，以方便查找。</p><p>这节给出两种处理方式。</p><ol><li>按年月划分</li></ol><p><strong>配置项 <code>new_post_name</code> 不仅与文件名称相关，还涉及文档的目录结构。</strong> </p><p><u>例如，将该配置项设置为<code>:year/:month/:title.md</code> 时，使用 new 命令新建文档会按年月划分。</u> </p><p>示例：执行 <code>hexo new post &quot;test2&quot;</code> 命令时，Hexo 会生成 <code>source/_posts/2025/4/test2.md</code> 。</p><ol start="2"><li>按文章类别划分</li></ol><p>根据文章的内容确定文章类别来划分文章及其资源文件夹所属的目录结构。</p><p><strong>使用 new 命令时添加 <code>--path</code> 选项，自定义文档的路径。</strong></p><p>示例：执行 <code>hexo new post -p test/test3 &quot;测试文档3&quot;</code> 命令时，Hexo 会生成 <code>source/_posts/test/test3.md</code>。</p><p><strong>注意！path 部分的最后必须是文件名（可以是前缀名，会自动添加 <code>new_post_name</code> 设置的后缀；也可以是带后缀的全名）！后面的 title 也必须指定！否则可能会产生非期望的结果！</strong> 示例的文件名为 <code>test3</code>，title 为 <code>测试文档3</code>，此 title 会作为博文的标题（Front-matter 部分的 title）。</p><blockquote><p>Tip：使用 new 命令和 path 选项需要知晓它的执行结果。当然，也可以直接通过手动创建目录结构和文档的方式来达到同样的效果。</p></blockquote><hr><p>当博文产出不多时，可采用按年月划分。但私以为该结构比较死板。本人习惯按文章类别划分。</p><p>当博客需要 <a href="https://hexo.io/zh-cn/docs/permalinks#%E5%A4%9A%E8%AF%AD%E7%A7%8D%E6%94%AF%E6%8C%81">多语种支持</a> 时，也可以修改该 <code>new_post_name</code> 配置项。</p><h2 id="7-4-public-目录下图片的真实路径"><a href="#7-4-public-目录下图片的真实路径" class="headerlink" title="7.4 public/ 目录下图片的真实路径"></a>7.4 <code>public/</code> 目录下图片的真实路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tree">blogRoot<br>├── source<br>│   ├── _posts<br>│   │   ├── filename【文章资源文件夹】<br>│   │   │   └── 图片.jpg【文章引用的图片】<br>│   │   └── filename.md【文章，该文章引用”1.jpg“的语法：![](filename/图片.jpg)】<br>│   ├── images【全局资源文件夹：图片】<br>│   │├── 背景图.jpg<br>|│└── 小图标.ico<br>|├── css【全局资源文件夹：css】<br>|└── js【全局资源文件夹：js】<br></code></pre></td></tr></table></figure><p>执行 generate 命令时，Hexo 的默认行为：</p><ol><li>渲染 <code>source/</code> 目录下的 Markdown 和 HTML 文件（以 <code>_</code>开头命名的文件&#x2F;文件夹和隐藏的文件将会被忽略 ，不包括 <code>_posts</code> 文件夹），并将渲染得到的 HTML 文件会输出到 <code>public/</code> 目录下。</li><li>在站点根目录下生成一份缓存文件（db.json）。</li><li>将其他文件直接拷贝到 <code>public/</code> 目录下（不包括以 <code>_</code>开头命名的文件&#x2F;文件夹和隐藏的文件）。</li></ol><hr><p><strong>全局资源文件夹拷贝到 <code>public/</code> 目录下。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tree">blogRoot<br>├── public<br>│   ├── images【全局资源文件夹：图片】<br>│   |├── 背景图.jpg<br>|│└── 小图标.ico<br>|├── css【全局资源文件夹：css】<br>|└── js【全局资源文件夹：js】<br></code></pre></td></tr></table></figure><p><strong>而【md 文档渲染后的 HTML 文件】以及【文章资源文件夹中的附属资源文件】按照【<code>permalink</code> 结构】输出到 <code>public/</code> 目录下。</strong></p><p>输出 html 博文到 <code>public/</code> 目录下是 Hexo 的默认行为； <u>而输出【文章资源文件夹中的附属资源文件】是启用文章资源文件夹（<code>post_asset_folder</code> 选项设为 <code>true</code>）的结果（作用二）。</u> Hexo 复制无法渲染的文件默认是忽略 <code>_posts/</code> 文件夹的。</p><blockquote><p>Tip：文章资源文件夹必须与文章同名，否则 Hexo 也不会复制资源文件，这就是前文 Typora 设置插入图片时复制到指定路径 【<code>./$&#123;filename&#125;</code>】的原因。文章资源文件夹是 Hexo 的一个功能模型，Hexo 读取数据时是按文章名称获取文章资源文件夹的。</p></blockquote><p><strong>【<code>permalink</code> 结构】示例：</strong></p><ol><li><strong><code>permalink: posts/:name/</code> ，该 permalink 结构为 <code>posts/文章名称/</code> ，【html 博文】及其【文章资源文件】都在 <code>public/posts/文章名称/</code> 目录下。</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tree">blogRoot<br>├── public<br>│   └── posts<br>│       └── filename<br>│├── index.html【html博文】    <br>│      └── 图片.jpg  <br></code></pre></td></tr></table></figure><ol start="2"><li><strong><code>permalink: posts/:name.html</code> ，该 permalink 结构为 <code>posts/</code> ，【html 博文】及其【文章资源文件夹】都在 <code>public/posts/</code> 目录下。</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tree">blogRoot<br>├── public<br>│   └── posts<br>│       ├── filename.html【html博文】（两种结尾方式，html文件名不一致，文件结构不一致）<br>│   └── filename<br>│      └── 图片.jpg<br></code></pre></td></tr></table></figure><h2 id="7-5-html-文件中图片的引用路径"><a href="#7-5-html-文件中图片的引用路径" class="headerlink" title="7.5 html 文件中图片的引用路径"></a>7.5 html 文件中图片的引用路径</h2><p>博客全局设置，比如 Fluid 主题的浏览器标签的图标，在配置文件中这样设置：<code>favicon: /img/fluid.png</code> 。博客页面图标的链接为 <code>http://ip:端口号/img/fluid.png</code> ，获取的就是 <code>public/img/fluid.png</code> 资源。如果需要替换，可以将自定义图标文件（<code>小图标.ico</code>）放到全局资源文件夹（<code>source/images/</code>）中，然后修改该配置项：<code>favicon: /images/小图标.ico</code> 。</p><hr><p>md 文档显示本地图片采用的 md 语法和相对路径。执行 generate 命令时，<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 插件（Hexo 默认的 Markdown 渲染器）将 md 文档渲染成 html 文件（博文），图片的引用格式会发生相应变化。</p><ol><li>md 语法转换成 <code>&lt;img&gt;</code> 标签（html 语法）</li><li>路径【<code>relative path</code>】（md）被渲染成 【<code>/relative path</code>】（html）</li></ol><p>例如，<code>![](test/girl.jpg)</code> → <code>&lt;img src=&quot;/test/girl.jpg&quot; &gt;</code> 。</p><p><strong>marked 对相对路径默认处理方式是——prepend root 值到路径内部。因为 marked.prependRoot 默认值为 true，而 root 默认值为 <code>/</code> 。</strong></p><blockquote><p>详情见 <code>node_modules/hexo-renderer-marked/lib/renderer.js</code> 和 <code>node_modules\hexo-util\dist\url_for.js</code> 等程序源代码。可参考：<a href="/posts/marked%EF%BC%88Hexo%E9%BB%98%E8%AE%A4%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E6%8F%92%E4%BB%B6%EF%BC%89%E7%9A%84%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A.html" title="marked（Hexo默认的Markdown渲染插件）的部分源码注释">marked（Hexo默认的Markdown渲染插件）的部分源码注释</a> </p></blockquote><p>**【marked 渲染问题】：**需要强调的是，如果 md 语法引用本地图片的相对路径存在空格，比如 <code>![](test/背 景.jpg)</code> 或 <code>![](te st/背景.jpg)</code> ，marked 不会进行转换，而是按字符串输出。</p><h2 id="7-6-过滤器与路径转换插件"><a href="#7-6-过滤器与路径转换插件" class="headerlink" title="7.6 过滤器与路径转换插件"></a>7.6 过滤器与路径转换插件</h2><p>Hexo 官方提供了 <a href="https://hexo.io/zh-cn/api/filter#%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%97%E8%A1%A8">过滤器（Filter） | Hexo</a> 钩子，允许开发者在不修改 Hexo 源码的前提下，对渲染过程进行干预。</p><ol><li>before_post_render 在文章渲染前执行，例如 <a href="https://github.com/yiyungent/hexo-asset-img">hexo-asset-img</a> 插件。</li><li>after_post_render 在文章渲染完成后执行，例如 <a href="https://github.com/xcodebuild/hexo-asset-image/blob/master/index.js">hexo-asset-image</a> 插件。</li></ol><p><code>hexo-asset-image</code> 插件在文章渲染完成后再次处理路径。该插件已被作者归档，现在无法适配新版本 Hexo。</p><blockquote><p>私改 <code>hexo-asset-image</code> 插件来兼容 Hexo 新版本：<a href="https://blog.csdn.net/kurapika_030/article/details/130598712">hexo-asset-image在hexo6.3.0下的使用以及与abbrlink插件的修改-CSDN博客</a></p></blockquote><p><code>hexo-asset-img</code> 插件在文章渲染前先处理路径。它在文章渲染前将本地图片相对路径转换 <code>asset_img</code> 标签。<code>asset_img</code> 标签是 Hexo 3 支持的新特性。</p><blockquote><p>Tip：<code>asset_img</code> 标签见 7.8 章。</p></blockquote><h2 id="7-7-文档和博文同时显示本地图片"><a href="#7-7-文档和博文同时显示本地图片" class="headerlink" title="7.7 文档和博文同时显示本地图片"></a>7.7 文档和博文同时显示本地图片</h2><blockquote><p><a href="https://www.larscheng.com/hexo-principle/">Hexo的工作原理探究 | Java技术经验分享</a></p><p>采用 <code>hexo-asset-image</code> 插件，过时，但文章结构不错：<a href="https://andavid.github.io/2019/01/15/insert-local-image-in-hexo/">Hexo 中完美插入本地图片 | JK Notes</a></p><p>虽有思路，也忽略：<a href="https://leay.net/2019/12/25/hexo/">Hexo 引用本地图片以及引用本地任意位置图片的一点思路 | 养恐龙</a></p><p>【思路有参考价值】：渲染 md 文档前，截取图片相对路径（<code>filename/1.jpg</code>）为图片名（<code>1.jpg</code>），以适配官方文档给出的糟糕的处理方案（<a href="https://hexo.io/zh-cn/docs/asset-folders#%E4%BD%BF%E7%94%A8-Markdown-%E5%B5%8C%E5%85%A5%E5%9B%BE%E7%89%87">使用-Markdown-嵌入图片</a>）；该博文的结构也参照官方文档：<a href="https://bingbytebard.com/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/">Hexo中插入图片的方法 - Hazel</a></p><p>私改 marked 插件的 renderer 程序源代码，funny（文档说明是错误的，结果是正确的）：<a href="https://github.com/Xu-pixel/hexo-renderer-marked/tree/master">Xu-pixel&#x2F;hexo-renderer-marked: Markdown renderer for Hexo</a></p><p>使用图床部分待参考？：<a href="https://dettry.github.io/2024/05/09/hexo-asset-image-note/">hexo使用Hexo-asset-image图片无法正常显示的一些解决方案 | CodeCook</a></p></blockquote><p>文档显示本地图片通常使用 md 语法和相对路径，而博文显示本地图片要求【html 文件中图片的引用路径】与【<code>public/</code> 目录下图片的真实路径】一致。诸如 <code>hexo-asset-image</code> ，<code>hexo-asset-img</code> 等插件，会对图片的相对路径进行处理，以满足博文也显示本地图片的要求。</p><p>文档和博文同时显示本地图片的常用方案是使用图片路径转换插件。<u>考虑到个人插件可能与新版本 Hexo 不适配的问题，在 Hexo 默认渲染机制的前提下，只修改 Hexo 配置也能使博文也显示图片。</u></p><hr><p><strong>方式一</strong>：使用 <code>hexo-asset-img</code> 插件。</p><p><a href="https://github.com/yiyungent/hexo-asset-img">hexo-asset-img | Hexo 本地图片插件: 转换 图片相对路径 为 asset_img</a></p><hr><p><strong>方式二：在 Hexo 默认渲染机制的前提下，只修改 Hexo 配置使得博文也显示图片。</strong></p><p>只使用默认配置，则 generate 命令执行后，【html 文件中图片的相对路径】只会有两种情况：</p><ol><li>相对路径不变（<code>filename/图片.jpg</code>），<strong>即 <code>marked.prependRoot</code> 选项设置为 false</strong>：</li></ol><p>文档采用 md 语法和相对路径引用本地图片时，文档和图片具有一定的层级结构（<code>![](filename/图片.jpg)</code>）。考虑到【<code>public/</code> 目录下图片的真实路径】是固定的【permalink结构】，若博文永久链接的路径缺失一层（permalink 值以非 <code>/</code> 结尾即可），则图片 URI 也能具有该结构（浏览器会自动将图片的相对路径与当前页面的路径进行拼接作为图片 URI）。这样图片 URI 就与【<code>public/</code> 目录下图片的真实路径】一致，博文也显示图片。</p><ol start="2"><li>相对路径转换为绝对路径（<code>/filename/图片.jpg</code>），<strong>即 <code>marked.prependRoot</code> 选项采用默认值 true</strong>：</li></ol><p>当【<code>public/</code>目录下图片的真实路径】与转换后的绝对路径相同时，则博文也显示图片。只要 <code>permalink=:name/</code> 或 <code>permalink=:name.html</code>，就能达到该要求；只是该 permalink 值会导致 <code>public/</code> 目录下的博文的结构比较混乱（其实也无所谓）。</p><p><strong>两种情况的设置：</strong></p><ol><li><strong>相对路径不变（<code>filename/图片.jpg</code>），即 <code>marked.prependRoot</code> 选项设置为 false；则 permalink 值以 <code>.html</code> 结尾。</strong> </li><li><strong>相对路径转换为绝对路径（<code>/filename/图片.jpg</code>），即 <code>marked.prependRoot</code> 选项采用默认值 true；则 <code>permalink=:name/</code> 或 <code>permalink=:name.html</code>。</strong></li></ol><p>示例：当 <code>marked.prependRoot=false</code> 且 <code>permalink=posts/:name.html</code> 时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs tree">blogRoot   <br>├── source<br>│   └── _posts<br>│       ├── test<br>│       │   └── 1.jpg<br>│       └── test.md 【![](test/1.jpg)】<br><br>【执行 generate 命令】<br><br>blogRoot   <br>├── public<br>│   └── posts<br>│       ├── test.html【&lt;img src=&quot;test/1.jpg&quot;&gt;】<br>│       └── test<br>│     └── 1.jpg<br><br>博文 URL = http://ip:port/posts/test.html<br><br>图片 src = &quot;test/1.jpg&quot;，浏览器会自动将图片的相对路径与当前页面的路径进行拼接作为图片 URL<br>&quot;http://ip:port/posts/&quot; 拼接 &quot;test/1.jpg&quot;<br>图片 URL = http://ip:port/posts/test/1.jpg<br><br>此时【图片 URI】与【public/ 目录下图片的真实路径】一致<br></code></pre></td></tr></table></figure><hr><blockquote><p>Tip：彩蛋在 shit 章节！有屑捞想给 marked 插件 pull request 吗？</p></blockquote><h2 id="7-8-内置标签"><a href="#7-8-内置标签" class="headerlink" title="7.8 内置标签"></a>7.8 内置标签</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/asset-folders#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6">资源文件夹：相对路径引用的标签插件 | Hexo</a></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%8C%85%E5%90%AB%E8%B5%84%E6%BA%90">标签插件：包含资源 | Hexo</a></p></blockquote><p>Hexo 3 支持更多的内置标签在文章中引用其他资源，例如：</p><ol><li><code>&#123;% asset_img slug [title] %&#125;</code></li></ol><p>其中，<strong>slug 是图片全名，</strong> [title] 是鼠标悬停提示。若 slug 包含空格，请使用英文引号（<code>&quot;&quot;</code>）括起来。</p><p><strong>启动文章资源文件夹后，在文章中引用【文章资源文件夹中的图片】。</strong> 若采用此方式，博文能显示图片，而 md 文档中只是字符串。执行 generate 命令时，Hexo 会将其转换成路径正确的 <code>&lt;img&gt;</code> 标签。</p><p>示例：在 <code>source/_posts/test/1.jgp</code> 和 <code>permalink=posts/:title.html</code> 的情况下，<code>source/_posts/test.md</code> 文档中的 <code>&#123;% asset_img "1.jpg" %&#125;</code>，<br>被转换成 <code>&lt;img src=&quot;/posts/test/1.jpg&quot;&gt;</code> 。</p><ol start="2"><li><code>&#123;% post_link filename [title] %&#125;</code></li></ol><p>其中，<strong>filename 是文档 Format-matter 部分的 title 值，</strong> 而不是文档名。请使用英文引号（<code>&quot;&quot;</code>）括起来。</p><p>示例：<code>&#123;% post_link "marked（Hexo默认的Markdown渲染插件）的部分源码注释" %&#125;</code> 。</p><p>本博文会显示该博文的链接：<a href="/posts/marked%EF%BC%88Hexo%E9%BB%98%E8%AE%A4%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E6%8F%92%E4%BB%B6%EF%BC%89%E7%9A%84%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A.html" title="marked（Hexo默认的Markdown渲染插件）的部分源码注释">marked（Hexo默认的Markdown渲染插件）的部分源码注释</a></p><blockquote><p>注意：slug 必须与文档名一致，否则 generate 命令执行出错。文档改名时会发生这种情况。</p></blockquote><h2 id="7-9-marked-新选项（shit）"><a href="#7-9-marked-新选项（shit）" class="headerlink" title="7.9 marked 新选项（shit）"></a>7.9 marked 新选项（shit）</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/asset-folders#%E4%BD%BF%E7%94%A8-Markdown-%E5%B5%8C%E5%85%A5%E5%9B%BE%E7%89%87">使用-Markdown-嵌入图片 | Hexo</a></p></blockquote><p>虽然官方文档提到，<code>marked 3.1.0</code> 引入了一个新选项，支持 md 文档使用 md 格式（<code>![]()</code> ）嵌入图片而无需使用 <code>asset_img</code> 标签，使得文档和博文同时显示本地图片。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 设置为 true，开启文章资源文件夹</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 默认值为 true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 默认值为 false</span><br></code></pre></td></tr></table></figure><ul><li>先不说这文档说明就是狗屎。</li><li>其次，github 上 <code>marked.postAsset</code>  选项的说明与程序不符。</li><li>再次，若启用新选项，md 文档中只有使用语法：<code>![](1.jpg)</code>（文档无法显示图片）时，博文才能显示图片。若 md 文档中使用语法：<code>![](filename/1.jpg)</code> ，则程序定位不到文章资源文件夹下的图片资源，导致图片的引用路径错误，博文无法显示图片。粗略地说，文档和博文，二者只能选其一显示图片。</li></ul><hr><blockquote><p>【彩蛋】：至于为什么官方文档显得如此狗屎，是因为其默认的 Markdown 渲染插件 marked 的问题。在源代码（renderer.js）中，<code>postPath</code> 赋值出现逻辑错误，不应拼接文件前缀名。</p><p>修改 <a href="/posts/marked%EF%BC%88Hexo%E9%BB%98%E8%AE%A4%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E6%8F%92%E4%BB%B6%EF%BC%89%E7%9A%84%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A.html" title="marked（Hexo默认的Markdown渲染插件）的部分源码注释">marked（Hexo默认的Markdown渲染插件）的部分源码注释</a> 源代码：<code>postPath = join(source_dir, dirname(postSource));</code> 。在文章资源文件夹开启的情况下，设置 <code>prependRoot</code> 和 <code>postAsset</code> 为 true 即可。</p></blockquote><h1 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h1><h2 id="8-1-困惑-处理"><a href="#8-1-困惑-处理" class="headerlink" title="8.1 困惑 &amp; 处理"></a>8.1 困惑 &amp; 处理</h2><p>【marked 插件的渲染问题 | 错误】：文档中直接出现 <code>hexo new [layout] &lt;title&gt;</code> 字符串时，博文的后续内容、右侧目录栏和特效都失踪。</p><p>【marked 插件的渲染问题 | 错误】：若文档中直接出现 http(s) 链接地址，链接地址必须与后面的符号或字词空一格，否则链接地址渲染出错。</p><p>【marked 插件的渲染问题 | 美观】：md 文档使用 <code>**内容**</code> 格式加粗文字；当内容的开头和结尾为符号时，若前后要与数字、字母或汉字连接，则必须空一格；否则博文显示不美观。</p><p><img src="Hexo%E3%81%A8GitHubPages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/image-20250412210601319.png"></p><p>【marked 插件的渲染问题 | 错误】：当文档中采用内置标签 <code>post_link</code> 时，若 filename（文档 Format-matter 部分的 title 值）出错，执行 generate 命令会报错。若采用该内置标签，则不能随意博文 title。不推荐使用该内置标签引用本地博文。</p><p>【marked 插件的渲染问题 |问题】：限制 Front-matter 部分的 title 属性值。&amp; 符号及之后的值，不会被渲染为 HTML 元素的内容。</p><h2 id="8-2-卸载插件"><a href="#8-2-卸载插件" class="headerlink" title="8.2 卸载插件"></a>8.2 卸载插件</h2><blockquote><p><a href="https://hsyac.github.io/posts/870f2d70.html">Hexo删除插件的命令与使用办法 | Hsyac</a></p></blockquote><p>以卸载 <code>hexo-asset-image</code> 插件为例：</p><ol><li>执行 <code>npm uninstall hexo-asset-image</code> 命令。</li><li>如果 <code>node_modules/</code> 目录下仍有该插件包，删除。</li><li>如果配置文件、主题配置文件、<code>package.json</code> 和 <code>package-lock.json</code> 仍有与该插件相关的配置信息，删除。</li></ol><h2 id="8-3-中英文空格"><a href="#8-3-中英文空格" class="headerlink" title="8.3 中英文空格"></a>8.3 中英文空格</h2><p>中英文之间空格能够让文章更美观， <code>hexo-filter-auto-spacing</code> 插件能够实现所有中英文之间自动空格。需要注意的是，该插件的作用范围是【所有中英文连接处】，可能不是很符合要求。 <u>本人编写文档时，会在中英文数字等连接处手动添加空格，不是很需要该插件。</u></p><hr><p>安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-filter-auto-spacing --save<br></code></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 文件中配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># hexo-filter-auto-spacing 插件，实现中英文之间自动加空格</span><br><span class="hljs-attr">auto_spacing:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><p>【困惑】：该插件卸载后再重新安装，无需配置，甚至设置为 false，仍然实现空格，这是 bug 吗？</p><p>【暂未遇到的问题】：<code>hexo-filter-auto-spacing</code> 插件会导致脚注插件不能正常运行。</p><h1 id="附录（可略）"><a href="#附录（可略）" class="headerlink" title="附录（可略）"></a>附录（可略）</h1><p>【注】：附录内容可能与主题无关，只是个人搜索！</p><ol><li>CLI</li></ol><p><a href="https://www.jianshu.com/p/a74188ba2b31">命令行相关概念梳理(CLI、Terminal、Shell、脚本) - 简书</a></p><p><a href="https://zhuanlan.zhihu.com/p/647135420">到底什么是CLI？ - 知乎</a></p><p><a href="https://blog.csdn.net/csdn100861/article/details/116414786">什么是CLI（命令行界面）、GUI(图形用户界面)、Terminal(终端)、Console（控制台）、Shell、TTY-CSDN博客</a></p><p><a href="https://blog.eson.org/pub/bfc2ae40/">Github Pages托管静态博客-原理浅析 | ESON</a></p><p><a href="https://steffan.cn/2017/03/22/use-cloudflare-to-implement-HTTPS-for-GithubPages-with-custom-domain-names/">使用Cloudflare为自定义域名的GithubPages实现HTTPS化 | Steffan’s Blog</a></p><p><a href="https://blog.csdn.net/qq_36777143/article/details/145416743">github Page到底是干什么的？使用场景是什么？底层原理是什么？_github pages-CSDN博客</a></p><p><a href="https://blog.csdn.net/fuxily/article/details/139453257">互联网、因特网和万维网傻傻分不清，一文带你彻底理解计算机中的各种网络-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建与运维指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>GitHub Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
